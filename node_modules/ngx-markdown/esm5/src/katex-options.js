/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// tslint:disable: no-redundant-jsdoc
var 
// tslint:disable: no-redundant-jsdoc
KatexOptions = /** @class */ (function () {
    function KatexOptions() {
    }
    return KatexOptions;
}());
// tslint:disable: no-redundant-jsdoc
export { KatexOptions };
if (false) {
    /**
     * If `true`, math will be rendered in display mode
     * (math in display style and center math on page)
     *
     * If `false`, math will be rendered in inline mode
     * \@default false
     * @type {?}
     */
    KatexOptions.prototype.displayMode;
    /**
     * If `true`, KaTeX will throw a `ParseError` when
     * it encounters an unsupported command or invalid LaTex
     *
     * If `false`, KaTeX will render unsupported commands as
     * text, and render invalid LaTeX as its source code with
     * hover text giving the error, in color given by errorColor
     * \@default true
     * @type {?}
     */
    KatexOptions.prototype.throwOnError;
    /**
     * A Color string given in format `#XXX` or `#XXXXXX`
     * @type {?}
     */
    KatexOptions.prototype.errorColor;
    /**
     * A collection of custom macros.
     *
     * See `src/macros.js` for its usage
     * @type {?}
     */
    KatexOptions.prototype.macros;
    /**
     * If `true`, `\color` will work like LaTeX's `\textcolor`
     * and takes 2 arguments
     *
     * If `false`, `\color` will work like LaTeX's `\color`
     * and takes 1 argument
     *
     * In both cases, `\textcolor` works as in LaTeX
     *
     * \@default false
     * @type {?}
     */
    KatexOptions.prototype.colorIsTextColor;
    /**
     * All user-specified sizes will be caped to `maxSize` ems
     *
     * If set to Infinity, users can make elements and space
     * arbitrarily large
     *
     * \@default Infinity
     * @type {?}
     */
    KatexOptions.prototype.maxSize;
    /**
     * Limit the number of macro expansions to specified number
     *
     * If set to `Infinity`, marco expander will try to fully expand
     * as in LaTex
     *
     * \@default 1000
     * @type {?}
     */
    KatexOptions.prototype.maxExpand;
    /**
     * Allowed protocols in `\href`
     *
     * Use `_relative` to allow relative urls
     *
     * Use `*` to allow all protocols
     * @type {?}
     */
    KatexOptions.prototype.allowedProtocols;
    /**
     * If `false` or `"ignore"`, allow features that make
     * writing in LaTex convenient but not supported by LaTex
     *
     * If `true` or `"error"`, throw an error for such transgressions
     *
     * If `"warn"`, warn about behavior via `console.warn`
     *
     * \@default "warn"
     * @type {?}
     */
    KatexOptions.prototype.strict;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoia2F0ZXgtb3B0aW9ucy5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25neC1tYXJrZG93bi8iLCJzb3VyY2VzIjpbInNyYy9rYXRleC1vcHRpb25zLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQ0E7OztJQUFBO0lBOEVBLENBQUM7SUFBRCxtQkFBQztBQUFELENBQUMsQUE5RUQsSUE4RUM7Ozs7Ozs7Ozs7OztJQXRFRyxtQ0FBc0I7Ozs7Ozs7Ozs7O0lBVXRCLG9DQUF1Qjs7Ozs7SUFJdkIsa0NBQW9COzs7Ozs7O0lBTXBCLDhCQUFhOzs7Ozs7Ozs7Ozs7O0lBWWIsd0NBQTJCOzs7Ozs7Ozs7O0lBUzNCLCtCQUFpQjs7Ozs7Ozs7OztJQVNqQixpQ0FBbUI7Ozs7Ozs7OztJQVFuQix3Q0FBNEI7Ozs7Ozs7Ozs7OztJQVc1Qiw4QkFBcUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyB0c2xpbnQ6ZGlzYWJsZTogbm8tcmVkdW5kYW50LWpzZG9jXHJcbmV4cG9ydCBjbGFzcyBLYXRleE9wdGlvbnMge1xyXG4gICAgLyoqXHJcbiAgICAgKiBJZiBgdHJ1ZWAsIG1hdGggd2lsbCBiZSByZW5kZXJlZCBpbiBkaXNwbGF5IG1vZGVcclxuICAgICAqIChtYXRoIGluIGRpc3BsYXkgc3R5bGUgYW5kIGNlbnRlciBtYXRoIG9uIHBhZ2UpXHJcbiAgICAgKlxyXG4gICAgICogSWYgYGZhbHNlYCwgbWF0aCB3aWxsIGJlIHJlbmRlcmVkIGluIGlubGluZSBtb2RlXHJcbiAgICAgKiBAZGVmYXVsdCBmYWxzZVxyXG4gICAgICovXHJcbiAgICBkaXNwbGF5TW9kZT86IGJvb2xlYW47XHJcbiAgICAvKipcclxuICAgICAqIElmIGB0cnVlYCwgS2FUZVggd2lsbCB0aHJvdyBhIGBQYXJzZUVycm9yYCB3aGVuXHJcbiAgICAgKiBpdCBlbmNvdW50ZXJzIGFuIHVuc3VwcG9ydGVkIGNvbW1hbmQgb3IgaW52YWxpZCBMYVRleFxyXG4gICAgICpcclxuICAgICAqIElmIGBmYWxzZWAsIEthVGVYIHdpbGwgcmVuZGVyIHVuc3VwcG9ydGVkIGNvbW1hbmRzIGFzXHJcbiAgICAgKiB0ZXh0LCBhbmQgcmVuZGVyIGludmFsaWQgTGFUZVggYXMgaXRzIHNvdXJjZSBjb2RlIHdpdGhcclxuICAgICAqIGhvdmVyIHRleHQgZ2l2aW5nIHRoZSBlcnJvciwgaW4gY29sb3IgZ2l2ZW4gYnkgZXJyb3JDb2xvclxyXG4gICAgICogQGRlZmF1bHQgdHJ1ZVxyXG4gICAgICovXHJcbiAgICB0aHJvd09uRXJyb3I/OiBib29sZWFuO1xyXG4gICAgLyoqXHJcbiAgICAgKiBBIENvbG9yIHN0cmluZyBnaXZlbiBpbiBmb3JtYXQgYCNYWFhgIG9yIGAjWFhYWFhYYFxyXG4gICAgICovXHJcbiAgICBlcnJvckNvbG9yPzogc3RyaW5nO1xyXG4gICAgLyoqXHJcbiAgICAgKiBBIGNvbGxlY3Rpb24gb2YgY3VzdG9tIG1hY3Jvcy5cclxuICAgICAqXHJcbiAgICAgKiBTZWUgYHNyYy9tYWNyb3MuanNgIGZvciBpdHMgdXNhZ2VcclxuICAgICAqL1xyXG4gICAgbWFjcm9zPzogYW55O1xyXG4gICAgLyoqXHJcbiAgICAgKiBJZiBgdHJ1ZWAsIGBcXGNvbG9yYCB3aWxsIHdvcmsgbGlrZSBMYVRlWCdzIGBcXHRleHRjb2xvcmBcclxuICAgICAqIGFuZCB0YWtlcyAyIGFyZ3VtZW50c1xyXG4gICAgICpcclxuICAgICAqIElmIGBmYWxzZWAsIGBcXGNvbG9yYCB3aWxsIHdvcmsgbGlrZSBMYVRlWCdzIGBcXGNvbG9yYFxyXG4gICAgICogYW5kIHRha2VzIDEgYXJndW1lbnRcclxuICAgICAqXHJcbiAgICAgKiBJbiBib3RoIGNhc2VzLCBgXFx0ZXh0Y29sb3JgIHdvcmtzIGFzIGluIExhVGVYXHJcbiAgICAgKlxyXG4gICAgICogQGRlZmF1bHQgZmFsc2VcclxuICAgICAqL1xyXG4gICAgY29sb3JJc1RleHRDb2xvcj86IGJvb2xlYW47XHJcbiAgICAvKipcclxuICAgICAqIEFsbCB1c2VyLXNwZWNpZmllZCBzaXplcyB3aWxsIGJlIGNhcGVkIHRvIGBtYXhTaXplYCBlbXNcclxuICAgICAqXHJcbiAgICAgKiBJZiBzZXQgdG8gSW5maW5pdHksIHVzZXJzIGNhbiBtYWtlIGVsZW1lbnRzIGFuZCBzcGFjZVxyXG4gICAgICogYXJiaXRyYXJpbHkgbGFyZ2VcclxuICAgICAqXHJcbiAgICAgKiBAZGVmYXVsdCBJbmZpbml0eVxyXG4gICAgICovXHJcbiAgICBtYXhTaXplPzogbnVtYmVyO1xyXG4gICAgLyoqXHJcbiAgICAgKiBMaW1pdCB0aGUgbnVtYmVyIG9mIG1hY3JvIGV4cGFuc2lvbnMgdG8gc3BlY2lmaWVkIG51bWJlclxyXG4gICAgICpcclxuICAgICAqIElmIHNldCB0byBgSW5maW5pdHlgLCBtYXJjbyBleHBhbmRlciB3aWxsIHRyeSB0byBmdWxseSBleHBhbmRcclxuICAgICAqIGFzIGluIExhVGV4XHJcbiAgICAgKlxyXG4gICAgICogQGRlZmF1bHQgMTAwMFxyXG4gICAgICovXHJcbiAgICBtYXhFeHBhbmQ/OiBudW1iZXI7XHJcbiAgICAvKipcclxuICAgICAqIEFsbG93ZWQgcHJvdG9jb2xzIGluIGBcXGhyZWZgXHJcbiAgICAgKlxyXG4gICAgICogVXNlIGBfcmVsYXRpdmVgIHRvIGFsbG93IHJlbGF0aXZlIHVybHNcclxuICAgICAqXHJcbiAgICAgKiBVc2UgYCpgIHRvIGFsbG93IGFsbCBwcm90b2NvbHNcclxuICAgICAqL1xyXG4gICAgYWxsb3dlZFByb3RvY29scz86IHN0cmluZ1tdO1xyXG4gICAgLyoqXHJcbiAgICAgKiBJZiBgZmFsc2VgIG9yIGBcImlnbm9yZVwiYCwgYWxsb3cgZmVhdHVyZXMgdGhhdCBtYWtlXHJcbiAgICAgKiB3cml0aW5nIGluIExhVGV4IGNvbnZlbmllbnQgYnV0IG5vdCBzdXBwb3J0ZWQgYnkgTGFUZXhcclxuICAgICAqXHJcbiAgICAgKiBJZiBgdHJ1ZWAgb3IgYFwiZXJyb3JcImAsIHRocm93IGFuIGVycm9yIGZvciBzdWNoIHRyYW5zZ3Jlc3Npb25zXHJcbiAgICAgKlxyXG4gICAgICogSWYgYFwid2FyblwiYCwgd2FybiBhYm91dCBiZWhhdmlvciB2aWEgYGNvbnNvbGUud2FybmBcclxuICAgICAqXHJcbiAgICAgKiBAZGVmYXVsdCBcIndhcm5cIlxyXG4gICAgICovXHJcbiAgICBzdHJpY3Q/OiBib29sZWFuIHwgc3RyaW5nIHwgRnVuY3Rpb247XHJcbn1cclxuIl19