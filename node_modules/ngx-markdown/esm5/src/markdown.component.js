/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component, ElementRef, EventEmitter, Input, Output } from '@angular/core';
import { KatexOptions } from './katex-options';
import { MarkdownService } from './markdown.service';
import { PrismPlugin } from './prism-plugin';
var MarkdownComponent = /** @class */ (function () {
    function MarkdownComponent(element, markdownService) {
        this.element = element;
        this.markdownService = markdownService;
        this.error = new EventEmitter();
        this.load = new EventEmitter();
        this.ready = new EventEmitter();
        this._katex = false;
        this._lineHighlight = false;
        this._lineNumbers = false;
    }
    Object.defineProperty(MarkdownComponent.prototype, "katex", {
        // Plugin - katex
        get: 
        // Plugin - katex
        /**
         * @return {?}
         */
        function () { return this._katex; },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) { this._katex = this.coerceBooleanProperty(value); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MarkdownComponent.prototype, "lineNumbers", {
        // Plugin - lineNumbers
        get: 
        // Plugin - lineNumbers
        /**
         * @return {?}
         */
        function () { return this._lineNumbers; },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) { this._lineNumbers = this.coerceBooleanProperty(value); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MarkdownComponent.prototype, "lineHighlight", {
        // Plugin - lineHighlight
        get: 
        // Plugin - lineHighlight
        /**
         * @return {?}
         */
        function () { return this._lineHighlight; },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) { this._lineHighlight = this.coerceBooleanProperty(value); },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    MarkdownComponent.prototype.ngOnChanges = /**
     * @return {?}
     */
    function () {
        if (this.data != null) {
            this.handleData();
            return;
        }
        if (this.src != null) {
            this.handleSrc();
            return;
        }
    };
    /**
     * @return {?}
     */
    MarkdownComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        if (!this.data && !this.src) {
            this.handleTransclusion();
        }
    };
    /**
     * @param {?} markdown
     * @param {?=} decodeHtml
     * @return {?}
     */
    MarkdownComponent.prototype.render = /**
     * @param {?} markdown
     * @param {?=} decodeHtml
     * @return {?}
     */
    function (markdown, decodeHtml) {
        if (decodeHtml === void 0) { decodeHtml = false; }
        /** @type {?} */
        var compiled = this.markdownService.compile(markdown, decodeHtml);
        compiled = this.katex ? this.markdownService.renderKatex(compiled, this.katexOptions) : compiled;
        this.element.nativeElement.innerHTML = compiled;
        this.handlePlugins();
        this.markdownService.highlight(this.element.nativeElement);
        this.ready.emit();
    };
    /**
     * @private
     * @param {?} value
     * @return {?}
     */
    MarkdownComponent.prototype.coerceBooleanProperty = /**
     * @private
     * @param {?} value
     * @return {?}
     */
    function (value) {
        return value != null && "" + value !== 'false';
    };
    /**
     * @private
     * @return {?}
     */
    MarkdownComponent.prototype.handleData = /**
     * @private
     * @return {?}
     */
    function () {
        this.render(this.data);
    };
    /**
     * @private
     * @return {?}
     */
    MarkdownComponent.prototype.handleSrc = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        this.markdownService
            .getSource(this.src)
            .subscribe((/**
         * @param {?} markdown
         * @return {?}
         */
        function (markdown) {
            _this.render(markdown);
            _this.load.emit(markdown);
        }), (/**
         * @param {?} error
         * @return {?}
         */
        function (error) { return _this.error.emit(error); }));
    };
    /**
     * @private
     * @return {?}
     */
    MarkdownComponent.prototype.handleTransclusion = /**
     * @private
     * @return {?}
     */
    function () {
        this.render(this.element.nativeElement.innerHTML, true);
    };
    /**
     * @private
     * @return {?}
     */
    MarkdownComponent.prototype.handlePlugins = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.lineHighlight) {
            this.setPluginClass(this.element.nativeElement, PrismPlugin.LineHighlight);
            this.setPluginOptions(this.element.nativeElement, { dataLine: this.line, dataLineOffset: this.lineOffset });
        }
        if (this.lineNumbers) {
            this.setPluginClass(this.element.nativeElement, PrismPlugin.LineNumbers);
            this.setPluginOptions(this.element.nativeElement, { dataStart: this.start });
        }
    };
    /**
     * @private
     * @param {?} element
     * @param {?} plugin
     * @return {?}
     */
    MarkdownComponent.prototype.setPluginClass = /**
     * @private
     * @param {?} element
     * @param {?} plugin
     * @return {?}
     */
    function (element, plugin) {
        var _a;
        /** @type {?} */
        var preElements = element.querySelectorAll('pre');
        for (var i = 0; i < preElements.length; i++) {
            /** @type {?} */
            var classes = plugin instanceof Array ? plugin : [plugin];
            (_a = preElements.item(i).classList).add.apply(_a, tslib_1.__spread(classes));
        }
    };
    /**
     * @private
     * @param {?} element
     * @param {?} options
     * @return {?}
     */
    MarkdownComponent.prototype.setPluginOptions = /**
     * @private
     * @param {?} element
     * @param {?} options
     * @return {?}
     */
    function (element, options) {
        var _this = this;
        /** @type {?} */
        var preElements = element.querySelectorAll('pre');
        var _loop_1 = function (i) {
            Object.keys(options).forEach((/**
             * @param {?} option
             * @return {?}
             */
            function (option) {
                /** @type {?} */
                var attributeValue = options[option];
                if (!!attributeValue) {
                    /** @type {?} */
                    var attributeName = _this.toLispCase(option);
                    preElements.item(i).setAttribute(attributeName, attributeValue.toString());
                }
            }));
        };
        for (var i = 0; i < preElements.length; i++) {
            _loop_1(i);
        }
    };
    /**
     * @private
     * @param {?} value
     * @return {?}
     */
    MarkdownComponent.prototype.toLispCase = /**
     * @private
     * @param {?} value
     * @return {?}
     */
    function (value) {
        /** @type {?} */
        var upperChars = value.match(/([A-Z])/g);
        if (!upperChars) {
            return value;
        }
        /** @type {?} */
        var str = value.toString();
        for (var i = 0, n = upperChars.length; i < n; i++) {
            str = str.replace(new RegExp(upperChars[i]), '-' + upperChars[i].toLowerCase());
        }
        if (str.slice(0, 1) === '-') {
            str = str.slice(1);
        }
        return str;
    };
    MarkdownComponent.decorators = [
        { type: Component, args: [{
                    // tslint:disable-next-line:component-selector
                    selector: 'markdown, [markdown]',
                    template: '<ng-content></ng-content>'
                }] }
    ];
    /** @nocollapse */
    MarkdownComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: MarkdownService }
    ]; };
    MarkdownComponent.propDecorators = {
        data: [{ type: Input }],
        src: [{ type: Input }],
        katex: [{ type: Input }],
        katexOptions: [{ type: Input }],
        lineNumbers: [{ type: Input }],
        start: [{ type: Input }],
        lineHighlight: [{ type: Input }],
        line: [{ type: Input }],
        lineOffset: [{ type: Input }],
        error: [{ type: Output }],
        load: [{ type: Output }],
        ready: [{ type: Output }]
    };
    return MarkdownComponent;
}());
export { MarkdownComponent };
if (false) {
    /** @type {?} */
    MarkdownComponent.prototype.data;
    /** @type {?} */
    MarkdownComponent.prototype.src;
    /** @type {?} */
    MarkdownComponent.prototype.katexOptions;
    /** @type {?} */
    MarkdownComponent.prototype.start;
    /** @type {?} */
    MarkdownComponent.prototype.line;
    /** @type {?} */
    MarkdownComponent.prototype.lineOffset;
    /** @type {?} */
    MarkdownComponent.prototype.error;
    /** @type {?} */
    MarkdownComponent.prototype.load;
    /** @type {?} */
    MarkdownComponent.prototype.ready;
    /**
     * @type {?}
     * @private
     */
    MarkdownComponent.prototype._katex;
    /**
     * @type {?}
     * @private
     */
    MarkdownComponent.prototype._lineHighlight;
    /**
     * @type {?}
     * @private
     */
    MarkdownComponent.prototype._lineNumbers;
    /** @type {?} */
    MarkdownComponent.prototype.element;
    /** @type {?} */
    MarkdownComponent.prototype.markdownService;
}
//# sourceMappingURL=data:application/json;base64,