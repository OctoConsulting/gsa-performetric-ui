/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, ElementRef, Output, EventEmitter, HostListener } from '@angular/core';
/**
 * The <sam-click-outside> directive can detect whether a click is made inside
 * the target
 */
var SDSClickOutsideDirective = /** @class */ (function () {
    function SDSClickOutsideDirective(_elementRef) {
        this._elementRef = _elementRef;
        /**
         * Event emitted when clicked outside the target
         */
        this.clickOutside = new EventEmitter();
    }
    /**
     * @param {?} targetElement
     * @return {?}
     */
    SDSClickOutsideDirective.prototype.onClick = /**
     * @param {?} targetElement
     * @return {?}
     */
    function (targetElement) {
        /** @type {?} */
        var clickedInside = this._elementRef.nativeElement.contains(targetElement);
        if (!clickedInside) {
            this.clickOutside.emit(undefined);
        }
    };
    SDSClickOutsideDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[sds-click-outside]'
                },] }
    ];
    /** @nocollapse */
    SDSClickOutsideDirective.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    SDSClickOutsideDirective.propDecorators = {
        clickOutside: [{ type: Output }],
        onClick: [{ type: HostListener, args: ['document:click', ['$event.target'],] }]
    };
    return SDSClickOutsideDirective;
}());
export { SDSClickOutsideDirective };
if (false) {
    /**
     * Event emitted when clicked outside the target
     * @type {?}
     */
    SDSClickOutsideDirective.prototype.clickOutside;
    /**
     * @type {?}
     * @private
     */
    SDSClickOutsideDirective.prototype._elementRef;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2xpY2stb3V0c2lkZS5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZ3NhLXNhbS9jb21wb25lbnRzLyIsInNvdXJjZXMiOlsibGliL2NsaWNrLW91dHNpZGUvY2xpY2stb3V0c2lkZS5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFDTCxTQUFTLEVBQUUsVUFBVSxFQUNyQixNQUFNLEVBQUUsWUFBWSxFQUNwQixZQUFZLEVBQ2IsTUFBTSxlQUFlLENBQUM7Ozs7O0FBTXZCO0lBU0Usa0NBQW9CLFdBQXVCO1FBQXZCLGdCQUFXLEdBQVgsV0FBVyxDQUFZOzs7O1FBRmpDLGlCQUFZLEdBQUcsSUFBSSxZQUFZLEVBQUUsQ0FBQztJQUVHLENBQUM7Ozs7O0lBR3pDLDBDQUFPOzs7O0lBRGQsVUFDZSxhQUFhOztZQUNwQixhQUFhLEdBQ2pCLElBQUksQ0FBQyxXQUFXLENBQUMsYUFBYSxDQUFDLFFBQVEsQ0FBQyxhQUFhLENBQUM7UUFDeEQsSUFBSSxDQUFDLGFBQWEsRUFBRTtZQUNsQixJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztTQUNuQztJQUNILENBQUM7O2dCQWxCRixTQUFTLFNBQUM7b0JBQ1QsUUFBUSxFQUFFLHFCQUFxQjtpQkFDaEM7Ozs7Z0JBWFksVUFBVTs7OytCQWdCcEIsTUFBTTswQkFJTixZQUFZLFNBQUMsZ0JBQWdCLEVBQUUsQ0FBQyxlQUFlLENBQUM7O0lBUW5ELCtCQUFDO0NBQUEsQUFuQkQsSUFtQkM7U0FoQlksd0JBQXdCOzs7Ozs7SUFJbkMsZ0RBQTRDOzs7OztJQUVoQywrQ0FBK0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBEaXJlY3RpdmUsIEVsZW1lbnRSZWYsXG4gIE91dHB1dCwgRXZlbnRFbWl0dGVyLFxuICBIb3N0TGlzdGVuZXJcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbi8qKlxuICogVGhlIDxzYW0tY2xpY2stb3V0c2lkZT4gZGlyZWN0aXZlIGNhbiBkZXRlY3Qgd2hldGhlciBhIGNsaWNrIGlzIG1hZGUgaW5zaWRlIFxuICogdGhlIHRhcmdldFxuICovXG5ARGlyZWN0aXZlKHtcbiAgc2VsZWN0b3I6ICdbc2RzLWNsaWNrLW91dHNpZGVdJ1xufSlcbmV4cG9ydCBjbGFzcyBTRFNDbGlja091dHNpZGVEaXJlY3RpdmUge1xuICAvKipcbiAgKiBFdmVudCBlbWl0dGVkIHdoZW4gY2xpY2tlZCBvdXRzaWRlIHRoZSB0YXJnZXRcbiAgKi9cbiAgQE91dHB1dCgpIGNsaWNrT3V0c2lkZSA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIF9lbGVtZW50UmVmOiBFbGVtZW50UmVmKSB7IH1cblxuICBASG9zdExpc3RlbmVyKCdkb2N1bWVudDpjbGljaycsIFsnJGV2ZW50LnRhcmdldCddKVxuICBwdWJsaWMgb25DbGljayh0YXJnZXRFbGVtZW50KSB7XG4gICAgY29uc3QgY2xpY2tlZEluc2lkZSA9XG4gICAgICB0aGlzLl9lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQuY29udGFpbnModGFyZ2V0RWxlbWVudCk7XG4gICAgaWYgKCFjbGlja2VkSW5zaWRlKSB7XG4gICAgICB0aGlzLmNsaWNrT3V0c2lkZS5lbWl0KHVuZGVmaW5lZCk7XG4gICAgfVxuICB9XG59XG4iXX0=