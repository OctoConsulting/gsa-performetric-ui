/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ChangeDetectionStrategy, Component, ElementRef, EventEmitter, InjectionToken, Input, Output, TemplateRef, ViewChild, ViewEncapsulation } from '@angular/core';
import { ESCAPE, DOWN_ARROW, UP_ARROW, HOME, END, hasModifierKey } from '@angular/cdk/keycodes';
import { FocusKeyManager } from '@angular/cdk/a11y';
import { coerceBooleanProperty } from '@angular/cdk/coercion';
import { Subscription } from 'rxjs';
import { sdsMenuAnimations } from './menu-animations';
/**
 * Injection token used to provide the parent menu to menu items.
 * @type {?}
 */
export var SDS_MENU_TOKEN = new InjectionToken('SDS_MENU_TOKEN');
/**
 * Menu Interface
 * @record
 * @template T
 */
export function SdsMenuInterface() { }
if (false) {
    /** @type {?} */
    SdsMenuInterface.prototype.xPosition;
    /** @type {?} */
    SdsMenuInterface.prototype.yPosition;
    /** @type {?} */
    SdsMenuInterface.prototype.overlapTrigger;
    /** @type {?} */
    SdsMenuInterface.prototype.templateRef;
    /** @type {?} */
    SdsMenuInterface.prototype.closed;
    /** @type {?|undefined} */
    SdsMenuInterface.prototype.parentMenu;
    /** @type {?|undefined} */
    SdsMenuInterface.prototype.size;
    /** @type {?} */
    SdsMenuInterface.prototype.focusFirstItem;
    /** @type {?|undefined} */
    SdsMenuInterface.prototype.setPositionClasses;
    /** @type {?|undefined} */
    SdsMenuInterface.prototype.addItem;
    /** @type {?|undefined} */
    SdsMenuInterface.prototype.insertItem;
    /** @type {?|undefined} */
    SdsMenuInterface.prototype.removeItem;
}
var SdsMenuComponent = /** @class */ (function () {
    function SdsMenuComponent(_elementRef) {
        this._elementRef = _elementRef;
        /**
         * After | Before the menu triger element
         */
        this._xPosition = 'after';
        /**
         * Above | Below the menu triger element
         */
        this._yPosition = 'below';
        /**
         * Menu items inside the current menu.
         */
        this._items = [];
        /**
         * Subscription to tab events on the menu panel
         */
        this._tabSubscription = Subscription.EMPTY;
        /**
         * Config object to be passed into the menu's ngClass
         */
        this._classList = {};
        /**
         * Current state of the panel animation.
         */
        this._panelAnimationState = 'void';
        this._overlapTrigger = false;
        /**
         * Event emitted when the menu is closed.
         */
        this.closed = new EventEmitter();
    }
    Object.defineProperty(SdsMenuComponent.prototype, "xPosition", {
        /** Position of the menu in the X axis. */
        get: /**
         * Position of the menu in the X axis.
         * @return {?}
         */
        function () {
            return this._xPosition;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._xPosition = value;
            this.setPositionClasses();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SdsMenuComponent.prototype, "yPosition", {
        /** Position of the menu in the Y axis. */
        get: /**
         * Position of the menu in the Y axis.
         * @return {?}
         */
        function () {
            return this._yPosition;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._yPosition = value;
            this.setPositionClasses();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SdsMenuComponent.prototype, "overlapTrigger", {
        /** Whether menu panel overlaps trigger element */
        get: /**
         * Whether menu panel overlaps trigger element
         * @return {?}
         */
        function () {
            return this._overlapTrigger;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._overlapTrigger = coerceBooleanProperty(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SdsMenuComponent.prototype, "panelClass", {
        /** Transfer classes from the sds-menu to the overlay container */
        set: /**
         * Transfer classes from the sds-menu to the overlay container
         * @param {?} classes
         * @return {?}
         */
        function (classes) {
            var _this = this;
            /** @type {?} */
            var previousPanelClass = this._previousPanelClass;
            // Remove previous classes from current set of classes
            if (previousPanelClass && previousPanelClass.length) {
                previousPanelClass.split(' ').forEach((/**
                 * @param {?} className
                 * @return {?}
                 */
                function (className) {
                    _this._classList[className] = false;
                }));
            }
            this._previousPanelClass = classes;
            // Adds new classes to current set of classes
            if (classes && classes.length) {
                classes.split(' ').forEach((/**
                 * @param {?} className
                 * @return {?}
                 */
                function (className) {
                    _this._classList[className] = true;
                }));
                // Remove all classes from <sds-menu>
                this._elementRef.nativeElement.className = '';
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    SdsMenuComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.setPositionClasses();
    };
    /**
     * @return {?}
     */
    SdsMenuComponent.prototype.ngAfterContentInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this._keyManager = new FocusKeyManager(this._items).withWrap();
        this._tabSubscription = this._keyManager.tabOut.subscribe((/**
         * @return {?}
         */
        function () {
            return _this.closed.emit('tab');
        }));
    };
    /**
     * @return {?}
     */
    SdsMenuComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this._tabSubscription.unsubscribe();
        this.closed.complete();
    };
    /** Focus the first item in the menu */
    /**
     * Focus the first item in the menu
     * @param {?=} origin
     * @return {?}
     */
    SdsMenuComponent.prototype.focusFirstItem = /**
     * Focus the first item in the menu
     * @param {?=} origin
     * @return {?}
     */
    function (origin) {
        if (origin === void 0) { origin = 'program'; }
        this._keyManager.setFocusOrigin(origin).setFirstItemActive();
    };
    /** Adds classes to the menu panel based on its position */
    /**
     * Adds classes to the menu panel based on its position
     * @param {?=} posX
     * @param {?=} posY
     * @return {?}
     */
    SdsMenuComponent.prototype.setPositionClasses = /**
     * Adds classes to the menu panel based on its position
     * @param {?=} posX
     * @param {?=} posY
     * @return {?}
     */
    function (posX, posY) {
        if (posX === void 0) { posX = this.xPosition; }
        if (posY === void 0) { posY = this.yPosition; }
        /** @type {?} */
        var classes = this._classList;
        classes['sds-menu-before'] = posX === 'before';
        classes['sds-menu-after'] = posX === 'after';
        classes['sds-menu-above'] = posY === 'above';
        classes['sds-menu-below'] = posY === 'below';
    };
    /** Adds a menu item with the menu. */
    /**
     * Adds a menu item with the menu.
     * @param {?} item
     * @return {?}
     */
    SdsMenuComponent.prototype.addItem = /**
     * Adds a menu item with the menu.
     * @param {?} item
     * @return {?}
     */
    function (item) {
        if (this._items.indexOf(item) === -1) {
            this._items.push(item);
        }
    };
    /** Inserts a menu item at an index */
    /**
     * Inserts a menu item at an index
     * @param {?} item
     * @param {?} index
     * @return {?}
     */
    SdsMenuComponent.prototype.insertItem = /**
     * Inserts a menu item at an index
     * @param {?} item
     * @param {?} index
     * @return {?}
     */
    function (item, index) {
        if (this._items.indexOf(item) === -1 && index < this._items.length) {
            this._items.splice(index, 0, item);
        }
    };
    /** Removes an item from the menu. */
    /**
     * Removes an item from the menu.
     * @param {?} item
     * @return {?}
     */
    SdsMenuComponent.prototype.removeItem = /**
     * Removes an item from the menu.
     * @param {?} item
     * @return {?}
     */
    function (item) {
        /** @type {?} */
        var index = this._items.indexOf(item);
        if (this._items.indexOf(item) > -1) {
            this._items.splice(index, 1);
        }
    };
    /** Handle a keyboard event from the menu */
    /**
     * Handle a keyboard event from the menu
     * @param {?} event
     * @return {?}
     */
    SdsMenuComponent.prototype._handleKeydown = /**
     * Handle a keyboard event from the menu
     * @param {?} event
     * @return {?}
     */
    function (event) {
        // tslint:disable-next-line: deprecation
        /** @type {?} */
        var keyCode = event.keyCode;
        /** @type {?} */
        var manager = this._keyManager;
        switch (keyCode) {
            case ESCAPE:
                this.closed.emit('keydown');
                break;
            case HOME:
            case END:
                if (!hasModifierKey(event)) {
                    keyCode === HOME
                        ? manager.setFirstItemActive()
                        : manager.setLastItemActive();
                    event.preventDefault();
                }
                break;
            default:
                if (keyCode === UP_ARROW || keyCode === DOWN_ARROW) {
                    manager.setFocusOrigin('keyboard');
                }
                manager.onKeydown(event);
        }
    };
    /** Starts the enter animation. */
    /**
     * Starts the enter animation.
     * @return {?}
     */
    SdsMenuComponent.prototype._startAnimation = /**
     * Starts the enter animation.
     * @return {?}
     */
    function () {
        this._panelAnimationState = 'enter';
    };
    /** Callback that is invoked when the panel animation completes. */
    /**
     * Callback that is invoked when the panel animation completes.
     * @param {?} event
     * @return {?}
     */
    SdsMenuComponent.prototype._onAnimationDone = /**
     * Callback that is invoked when the panel animation completes.
     * @param {?} event
     * @return {?}
     */
    function (event) { };
    /** Resets the panel animation to its initial state. */
    /**
     * Resets the panel animation to its initial state.
     * @return {?}
     */
    SdsMenuComponent.prototype._resetAnimation = /**
     * Resets the panel animation to its initial state.
     * @return {?}
     */
    function () {
        this._panelAnimationState = 'void';
    };
    /**
     * @param {?} event
     * @return {?}
     */
    SdsMenuComponent.prototype._onAnimationStart = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        // Scroll the content element to the top as soon as the animation starts.
        if (event.toState === 'enter' && this._keyManager.activeItemIndex === 0) {
            event.element.scrollTop = 0;
        }
    };
    SdsMenuComponent.decorators = [
        { type: Component, args: [{
                    selector: 'sds-menu',
                    exportAs: 'sdsMenu',
                    template: "<ng-template>\n  <div\n    class=\"sds-overlay minw-menu maxw-mobile radius-overlay\"\n    [ngClass]=\"_classList\"\n    (keydown)=\"_handleKeydown($event)\"\n    (click)=\"closed.emit('click')\"\n    [@transformMenu]=\"_panelAnimationState\"\n    (@transformMenu.start)=\"_onAnimationStart($event)\"\n    (@transformMenu.done)=\"_onAnimationDone($event)\"\n    tabindex=\"-1\"\n    role=\"menu\"\n  >\n    <div class=\"sds-menu\" [class.sds-menu--small]=\"size === 'sm'\">\n      <ng-content></ng-content>\n    </div>\n  </div>\n</ng-template>\n",
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    encapsulation: ViewEncapsulation.None,
                    animations: [sdsMenuAnimations.transformMenu],
                    providers: [
                        { provide: SDS_MENU_TOKEN, useExisting: SdsMenuComponent }
                    ]
                }] }
    ];
    /** @nocollapse */
    SdsMenuComponent.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    SdsMenuComponent.propDecorators = {
        templateRef: [{ type: ViewChild, args: [TemplateRef,] }],
        size: [{ type: Input }],
        xPosition: [{ type: Input }],
        yPosition: [{ type: Input }],
        overlapTrigger: [{ type: Input }],
        panelClass: [{ type: Input, args: ['class',] }],
        closed: [{ type: Output }]
    };
    return SdsMenuComponent;
}());
export { SdsMenuComponent };
if (false) {
    /**
     * After | Before the menu triger element
     * @type {?}
     * @private
     */
    SdsMenuComponent.prototype._xPosition;
    /**
     * Above | Below the menu triger element
     * @type {?}
     * @private
     */
    SdsMenuComponent.prototype._yPosition;
    /**
     * Manage browser focus
     * @type {?}
     * @private
     */
    SdsMenuComponent.prototype._keyManager;
    /**
     * Menu items inside the current menu.
     * @type {?}
     * @private
     */
    SdsMenuComponent.prototype._items;
    /**
     * Subscription to tab events on the menu panel
     * @type {?}
     * @private
     */
    SdsMenuComponent.prototype._tabSubscription;
    /**
     * Stores <sds-menu> classes
     * @type {?}
     * @private
     */
    SdsMenuComponent.prototype._previousPanelClass;
    /**
     * Config object to be passed into the menu's ngClass
     * @type {?}
     */
    SdsMenuComponent.prototype._classList;
    /**
     * Current state of the panel animation.
     * @type {?}
     */
    SdsMenuComponent.prototype._panelAnimationState;
    /**
     * Grab the component template
     * @type {?}
     */
    SdsMenuComponent.prototype.templateRef;
    /**
     * Size of menu component.
     * Affects the font-size of the menu items and
     * the size of the close button in the menu header
     * @type {?}
     */
    SdsMenuComponent.prototype.size;
    /**
     * @type {?}
     * @private
     */
    SdsMenuComponent.prototype._overlapTrigger;
    /**
     * Event emitted when the menu is closed.
     * @type {?}
     */
    SdsMenuComponent.prototype.closed;
    /**
     * @type {?}
     * @private
     */
    SdsMenuComponent.prototype._elementRef;
}
//# sourceMappingURL=data:application/json;base64,