/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ElementRef, Inject, Input, HostBinding, ChangeDetectionStrategy, ViewEncapsulation, Optional } from '@angular/core';
import { FocusMonitor } from '@angular/cdk/a11y';
import { coerceBooleanProperty } from '@angular/cdk/coercion';
import { SDS_MENU_TOKEN } from './menu.component';
import { SdsMenuHeaderComponent } from './menu-header.component';
var SdsMenuItemComponent = /** @class */ (function () {
    function SdsMenuItemComponent(_elementRef, _focusMonitor, _parentMenu, _parentMenuHeader) {
        this._elementRef = _elementRef;
        this._focusMonitor = _focusMonitor;
        this._parentMenu = _parentMenu;
        this._parentMenuHeader = _parentMenuHeader;
        /**
         * Menu item class
         */
        this.class = this._getClass();
        /**
         * ARIA role for the menu item.
         */
        this.role = 'menuitem';
        /**
         * Menu item tab index
         */
        this.tabIndex = this.disabled ? '-1' : '0';
        /**
         * Holds the disable status value
         */
        this._disabled = false;
        // Start listening to focus changes
        _focusMonitor.monitor(this._elementRef, false);
        // Add this menu item to its parent menu
        // If item its inside a header
        // add it as the first item in the list
        if (_parentMenuHeader) {
            _parentMenu.insertItem(this, 0);
        }
        else {
            _parentMenu.addItem(this);
        }
    }
    Object.defineProperty(SdsMenuItemComponent.prototype, "disabled", {
        /** Whether the menu item should be disabled */
        get: /**
         * Whether the menu item should be disabled
         * @return {?}
         */
        function () {
            return this._disabled;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._disabled = coerceBooleanProperty(value);
        },
        enumerable: true,
        configurable: true
    });
    /** Get item class */
    /**
     * Get item class
     * @return {?}
     */
    SdsMenuItemComponent.prototype._getClass = /**
     * Get item class
     * @return {?}
     */
    function () {
        /** @type {?} */
        var headerButtonSmall = this._parentMenu.size === 'sm' ? 'sds-button--small' : '';
        return this._parentMenuHeader
            ? "sds-button sds-button--circular " + headerButtonSmall
            : 'sds-menu__item';
    };
    /** Focuses the menu item. */
    /**
     * Focuses the menu item.
     * @param {?=} origin
     * @return {?}
     */
    SdsMenuItemComponent.prototype.focus = /**
     * Focuses the menu item.
     * @param {?=} origin
     * @return {?}
     */
    function (origin) {
        if (origin === void 0) { origin = 'program'; }
        this._focusMonitor.focusVia(this._elementRef.nativeElement, origin);
    };
    /** Stop listening to focus changes and remove item from parent */
    /**
     * Stop listening to focus changes and remove item from parent
     * @return {?}
     */
    SdsMenuItemComponent.prototype.ngOnDestroy = /**
     * Stop listening to focus changes and remove item from parent
     * @return {?}
     */
    function () {
        this._focusMonitor.stopMonitoring(this._elementRef);
        this._parentMenu.removeItem(this);
    };
    SdsMenuItemComponent.decorators = [
        { type: Component, args: [{
                    // tslint:disable-next-line: component-selector
                    selector: '[sds-menu-item]',
                    template: '<ng-content></ng-content>',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    encapsulation: ViewEncapsulation.None
                }] }
    ];
    /** @nocollapse */
    SdsMenuItemComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: FocusMonitor },
        { type: undefined, decorators: [{ type: Inject, args: [SDS_MENU_TOKEN,] }] },
        { type: SdsMenuHeaderComponent, decorators: [{ type: Optional }] }
    ]; };
    SdsMenuItemComponent.propDecorators = {
        class: [{ type: HostBinding, args: ['class',] }],
        role: [{ type: HostBinding, args: ['attr.role',] }, { type: Input }],
        tabIndex: [{ type: HostBinding, args: ['attr.tabIndex',] }],
        disabled: [{ type: Input }]
    };
    return SdsMenuItemComponent;
}());
export { SdsMenuItemComponent };
if (false) {
    /**
     * Menu item class
     * @type {?}
     */
    SdsMenuItemComponent.prototype.class;
    /**
     * ARIA role for the menu item.
     * @type {?}
     */
    SdsMenuItemComponent.prototype.role;
    /**
     * Menu item tab index
     * @type {?}
     */
    SdsMenuItemComponent.prototype.tabIndex;
    /**
     * Holds the disable status value
     * @type {?}
     * @private
     */
    SdsMenuItemComponent.prototype._disabled;
    /**
     * @type {?}
     * @private
     */
    SdsMenuItemComponent.prototype._elementRef;
    /**
     * @type {?}
     * @private
     */
    SdsMenuItemComponent.prototype._focusMonitor;
    /**
     * @type {?}
     * @private
     */
    SdsMenuItemComponent.prototype._parentMenu;
    /**
     * @type {?}
     * @private
     */
    SdsMenuItemComponent.prototype._parentMenuHeader;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWVudS1pdGVtLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Bnc2Etc2FtL2NvbXBvbmVudHMvIiwic291cmNlcyI6WyJsaWIvbWVudS9tZW51LWl0ZW0uY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQ0wsU0FBUyxFQUNULFVBQVUsRUFFVixNQUFNLEVBQ04sS0FBSyxFQUNMLFdBQVcsRUFDWCx1QkFBdUIsRUFDdkIsaUJBQWlCLEVBQ2pCLFFBQVEsRUFDVCxNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQW1CLFlBQVksRUFBZSxNQUFNLG1CQUFtQixDQUFDO0FBQy9FLE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBQzlELE9BQU8sRUFBRSxjQUFjLEVBQW9CLE1BQU0sa0JBQWtCLENBQUM7QUFDcEUsT0FBTyxFQUFFLHNCQUFzQixFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFFakU7SUE2QkUsOEJBQ1UsV0FBb0MsRUFDcEMsYUFBMkIsRUFFM0IsV0FBbUQsRUFDdkMsaUJBQXlDO1FBSnJELGdCQUFXLEdBQVgsV0FBVyxDQUF5QjtRQUNwQyxrQkFBYSxHQUFiLGFBQWEsQ0FBYztRQUUzQixnQkFBVyxHQUFYLFdBQVcsQ0FBd0M7UUFDdkMsc0JBQWlCLEdBQWpCLGlCQUFpQixDQUF3Qjs7OztRQXpCekMsVUFBSyxHQUFHLElBQUksQ0FBQyxTQUFTLEVBQUUsQ0FBQzs7OztRQUdaLFNBQUksR0FBZSxVQUFVLENBQUM7Ozs7UUFHbkMsYUFBUSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDOzs7O1FBRzVELGNBQVMsR0FBRyxLQUFLLENBQUM7UUFrQnhCLG1DQUFtQztRQUNuQyxhQUFhLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxXQUFXLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFDL0Msd0NBQXdDO1FBQ3hDLDhCQUE4QjtRQUM5Qix1Q0FBdUM7UUFDdkMsSUFBSSxpQkFBaUIsRUFBRTtZQUNyQixXQUFXLENBQUMsVUFBVSxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQztTQUNqQzthQUFNO1lBQ0wsV0FBVyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQztTQUMzQjtJQUNILENBQUM7SUF6QkQsc0JBQ0ksMENBQVE7UUFGWiwrQ0FBK0M7Ozs7O1FBQy9DO1lBRUUsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDO1FBQ3hCLENBQUM7Ozs7O1FBQ0QsVUFBYSxLQUFVO1lBQ3JCLElBQUksQ0FBQyxTQUFTLEdBQUcscUJBQXFCLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDaEQsQ0FBQzs7O09BSEE7SUF3QkQscUJBQXFCOzs7OztJQUNyQix3Q0FBUzs7OztJQUFUOztZQUNRLGlCQUFpQixHQUNyQixJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksS0FBSyxJQUFJLENBQUMsQ0FBQyxDQUFDLG1CQUFtQixDQUFDLENBQUMsQ0FBQyxFQUFFO1FBQzNELE9BQU8sSUFBSSxDQUFDLGlCQUFpQjtZQUMzQixDQUFDLENBQUMscUNBQW1DLGlCQUFtQjtZQUN4RCxDQUFDLENBQUMsZ0JBQWdCLENBQUM7SUFDdkIsQ0FBQztJQUVELDZCQUE2Qjs7Ozs7O0lBQzdCLG9DQUFLOzs7OztJQUFMLFVBQU0sTUFBK0I7UUFBL0IsdUJBQUEsRUFBQSxrQkFBK0I7UUFDbkMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxhQUFhLEVBQUUsTUFBTSxDQUFDLENBQUM7SUFDdEUsQ0FBQztJQUVELGtFQUFrRTs7Ozs7SUFDbEUsMENBQVc7Ozs7SUFBWDtRQUNFLElBQUksQ0FBQyxhQUFhLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQztRQUNwRCxJQUFJLENBQUMsV0FBVyxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUNwQyxDQUFDOztnQkFsRUYsU0FBUyxTQUFDOztvQkFFVCxRQUFRLEVBQUUsaUJBQWlCO29CQUMzQixRQUFRLEVBQUUsMkJBQTJCO29CQUNyQyxlQUFlLEVBQUUsdUJBQXVCLENBQUMsTUFBTTtvQkFDL0MsYUFBYSxFQUFFLGlCQUFpQixDQUFDLElBQUk7aUJBQ3RDOzs7O2dCQXBCQyxVQUFVO2dCQVNjLFlBQVk7Z0RBcUNqQyxNQUFNLFNBQUMsY0FBYztnQkFsQ2pCLHNCQUFzQix1QkFvQzFCLFFBQVE7Ozt3QkF6QlYsV0FBVyxTQUFDLE9BQU87dUJBR25CLFdBQVcsU0FBQyxXQUFXLGNBQUcsS0FBSzsyQkFHL0IsV0FBVyxTQUFDLGVBQWU7MkJBTTNCLEtBQUs7O0lBOENSLDJCQUFDO0NBQUEsQUFuRUQsSUFtRUM7U0E1RFksb0JBQW9COzs7Ozs7SUFFL0IscUNBQStDOzs7OztJQUcvQyxvQ0FBaUU7Ozs7O0lBR2pFLHdDQUFvRTs7Ozs7O0lBR3BFLHlDQUEwQjs7Ozs7SUFZeEIsMkNBQTRDOzs7OztJQUM1Qyw2Q0FBbUM7Ozs7O0lBQ25DLDJDQUMyRDs7Ozs7SUFDM0QsaURBQTZEIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgQ29tcG9uZW50LFxuICBFbGVtZW50UmVmLFxuICBPbkRlc3Ryb3ksXG4gIEluamVjdCxcbiAgSW5wdXQsXG4gIEhvc3RCaW5kaW5nLFxuICBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSxcbiAgVmlld0VuY2Fwc3VsYXRpb24sXG4gIE9wdGlvbmFsXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgRm9jdXNhYmxlT3B0aW9uLCBGb2N1c01vbml0b3IsIEZvY3VzT3JpZ2luIH0gZnJvbSAnQGFuZ3VsYXIvY2RrL2ExMXknO1xuaW1wb3J0IHsgY29lcmNlQm9vbGVhblByb3BlcnR5IH0gZnJvbSAnQGFuZ3VsYXIvY2RrL2NvZXJjaW9uJztcbmltcG9ydCB7IFNEU19NRU5VX1RPS0VOLCBTZHNNZW51SW50ZXJmYWNlIH0gZnJvbSAnLi9tZW51LmNvbXBvbmVudCc7XG5pbXBvcnQgeyBTZHNNZW51SGVhZGVyQ29tcG9uZW50IH0gZnJvbSAnLi9tZW51LWhlYWRlci5jb21wb25lbnQnO1xuXG5AQ29tcG9uZW50KHtcbiAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOiBjb21wb25lbnQtc2VsZWN0b3JcbiAgc2VsZWN0b3I6ICdbc2RzLW1lbnUtaXRlbV0nLFxuICB0ZW1wbGF0ZTogJzxuZy1jb250ZW50PjwvbmctY29udGVudD4nLFxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcbiAgZW5jYXBzdWxhdGlvbjogVmlld0VuY2Fwc3VsYXRpb24uTm9uZVxufSlcbmV4cG9ydCBjbGFzcyBTZHNNZW51SXRlbUNvbXBvbmVudCBpbXBsZW1lbnRzIEZvY3VzYWJsZU9wdGlvbiwgT25EZXN0cm95IHtcbiAgLyoqIE1lbnUgaXRlbSBjbGFzcyAqL1xuICBASG9zdEJpbmRpbmcoJ2NsYXNzJykgY2xhc3MgPSB0aGlzLl9nZXRDbGFzcygpO1xuXG4gIC8qKiBBUklBIHJvbGUgZm9yIHRoZSBtZW51IGl0ZW0uICovXG4gIEBIb3N0QmluZGluZygnYXR0ci5yb2xlJykgQElucHV0KCkgcm9sZTogJ21lbnVpdGVtJyA9ICdtZW51aXRlbSc7XG5cbiAgLyoqIE1lbnUgaXRlbSB0YWIgaW5kZXggKi9cbiAgQEhvc3RCaW5kaW5nKCdhdHRyLnRhYkluZGV4JykgdGFiSW5kZXggPSB0aGlzLmRpc2FibGVkID8gJy0xJyA6ICcwJztcblxuICAvKiogSG9sZHMgdGhlIGRpc2FibGUgc3RhdHVzIHZhbHVlICovXG4gIHByaXZhdGUgX2Rpc2FibGVkID0gZmFsc2U7XG5cbiAgLyoqIFdoZXRoZXIgdGhlIG1lbnUgaXRlbSBzaG91bGQgYmUgZGlzYWJsZWQgKi9cbiAgQElucHV0KClcbiAgZ2V0IGRpc2FibGVkKCkge1xuICAgIHJldHVybiB0aGlzLl9kaXNhYmxlZDtcbiAgfVxuICBzZXQgZGlzYWJsZWQodmFsdWU6IGFueSkge1xuICAgIHRoaXMuX2Rpc2FibGVkID0gY29lcmNlQm9vbGVhblByb3BlcnR5KHZhbHVlKTtcbiAgfVxuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgX2VsZW1lbnRSZWY6IEVsZW1lbnRSZWY8SFRNTEVsZW1lbnQ+LFxuICAgIHByaXZhdGUgX2ZvY3VzTW9uaXRvcjogRm9jdXNNb25pdG9yLFxuICAgIEBJbmplY3QoU0RTX01FTlVfVE9LRU4pXG4gICAgcHJpdmF0ZSBfcGFyZW50TWVudTogU2RzTWVudUludGVyZmFjZTxTZHNNZW51SXRlbUNvbXBvbmVudD4sXG4gICAgQE9wdGlvbmFsKCkgcHJpdmF0ZSBfcGFyZW50TWVudUhlYWRlcjogU2RzTWVudUhlYWRlckNvbXBvbmVudFxuICApIHtcbiAgICAvLyBTdGFydCBsaXN0ZW5pbmcgdG8gZm9jdXMgY2hhbmdlc1xuICAgIF9mb2N1c01vbml0b3IubW9uaXRvcih0aGlzLl9lbGVtZW50UmVmLCBmYWxzZSk7XG4gICAgLy8gQWRkIHRoaXMgbWVudSBpdGVtIHRvIGl0cyBwYXJlbnQgbWVudVxuICAgIC8vIElmIGl0ZW0gaXRzIGluc2lkZSBhIGhlYWRlclxuICAgIC8vIGFkZCBpdCBhcyB0aGUgZmlyc3QgaXRlbSBpbiB0aGUgbGlzdFxuICAgIGlmIChfcGFyZW50TWVudUhlYWRlcikge1xuICAgICAgX3BhcmVudE1lbnUuaW5zZXJ0SXRlbSh0aGlzLCAwKTtcbiAgICB9IGVsc2Uge1xuICAgICAgX3BhcmVudE1lbnUuYWRkSXRlbSh0aGlzKTtcbiAgICB9XG4gIH1cblxuICAvKiogR2V0IGl0ZW0gY2xhc3MgKi9cbiAgX2dldENsYXNzKCk6IHN0cmluZyB7XG4gICAgY29uc3QgaGVhZGVyQnV0dG9uU21hbGwgPVxuICAgICAgdGhpcy5fcGFyZW50TWVudS5zaXplID09PSAnc20nID8gJ3Nkcy1idXR0b24tLXNtYWxsJyA6ICcnO1xuICAgIHJldHVybiB0aGlzLl9wYXJlbnRNZW51SGVhZGVyXG4gICAgICA/IGBzZHMtYnV0dG9uIHNkcy1idXR0b24tLWNpcmN1bGFyICR7aGVhZGVyQnV0dG9uU21hbGx9YFxuICAgICAgOiAnc2RzLW1lbnVfX2l0ZW0nO1xuICB9XG5cbiAgLyoqIEZvY3VzZXMgdGhlIG1lbnUgaXRlbS4gKi9cbiAgZm9jdXMob3JpZ2luOiBGb2N1c09yaWdpbiA9ICdwcm9ncmFtJyk6IHZvaWQge1xuICAgIHRoaXMuX2ZvY3VzTW9uaXRvci5mb2N1c1ZpYSh0aGlzLl9lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQsIG9yaWdpbik7XG4gIH1cblxuICAvKiogU3RvcCBsaXN0ZW5pbmcgdG8gZm9jdXMgY2hhbmdlcyBhbmQgcmVtb3ZlIGl0ZW0gZnJvbSBwYXJlbnQgKi9cbiAgbmdPbkRlc3Ryb3koKSB7XG4gICAgdGhpcy5fZm9jdXNNb25pdG9yLnN0b3BNb25pdG9yaW5nKHRoaXMuX2VsZW1lbnRSZWYpO1xuICAgIHRoaXMuX3BhcmVudE1lbnUucmVtb3ZlSXRlbSh0aGlzKTtcbiAgfVxufVxuIl19