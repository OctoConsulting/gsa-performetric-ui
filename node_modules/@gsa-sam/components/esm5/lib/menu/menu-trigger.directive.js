/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Directive, ElementRef, EventEmitter, Input, Output, ViewContainerRef, HostBinding, HostListener, } from '@angular/core';
import { FocusMonitor, isFakeMousedownFromScreenReader } from '@angular/cdk/a11y';
import { Overlay, OverlayConfig } from '@angular/cdk/overlay';
import { TemplatePortal } from '@angular/cdk/portal';
import { normalizePassiveListenerOptions } from '@angular/cdk/platform';
import { merge, Subscription } from 'rxjs';
import { SdsMenuComponent } from './menu.component';
var SdsMenuTriggerForDirective = /** @class */ (function () {
    function SdsMenuTriggerForDirective(_overlay, _element, _viewContainerRef, _focusMonitor) {
        var _this = this;
        this._overlay = _overlay;
        this._element = _element;
        this._viewContainerRef = _viewContainerRef;
        this._focusMonitor = _focusMonitor;
        /**
         * ARIA haspopup for the menu trigger.
         */
        this.ariaHasPopup = true;
        /**
         * Holds value for menuOpen variable
         */
        this._menuOpen = false;
        /**
         * PortalOutlet
         */
        this._overlayRef = null;
        /**
         * Tracks input type
         */
        this._openedBy = null;
        this._closingActionsSubscription = Subscription.EMPTY;
        this._menuCloseSubscription = Subscription.EMPTY;
        /**
         * Event emitted when the associated menu is opened.
         */
        this.menuOpened = new EventEmitter();
        /**
         * Event emitted when the associated menu is closed.
         */
        this.menuClosed = new EventEmitter();
        // On touch devices set _openedBy to 'touch'
        _element.nativeElement.addEventListener('touchstart', (/**
         * @return {?}
         */
        function () { return (_this._openedBy = 'touch'); }), normalizePassiveListenerOptions({ passive: true }));
    }
    Object.defineProperty(SdsMenuTriggerForDirective.prototype, "menuOpen", {
        /** ARIA expanded for the menu trigger. */
        get: /**
         * ARIA expanded for the menu trigger.
         * @return {?}
         */
        function () {
            return this._menuOpen;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SdsMenuTriggerForDirective.prototype, "menu", {
        /** References the menu instance that the trigger is associated with. */
        get: /**
         * References the menu instance that the trigger is associated with.
         * @return {?}
         */
        function () {
            return this._menu;
        },
        set: /**
         * @param {?} menu
         * @return {?}
         */
        function (menu) {
            var _this = this;
            if (menu === this._menu) {
                return;
            }
            this._menu = menu;
            this._menuCloseSubscription.unsubscribe();
            if (menu) {
                this._menuCloseSubscription = menu.closed.asObservable().subscribe((/**
                 * @return {?}
                 */
                function () {
                    _this._destroyMenu();
                }));
            }
        },
        enumerable: true,
        configurable: true
    });
    /** Handles mouse presses on the trigger. */
    /**
     * Handles mouse presses on the trigger.
     * @param {?} event
     * @return {?}
     */
    SdsMenuTriggerForDirective.prototype._handleMousedown = /**
     * Handles mouse presses on the trigger.
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (!isFakeMousedownFromScreenReader(event)) {
            // Since right or middle button clicks won't trigger the `click` event,
            // we shouldn't consider the menu as opened by mouse in those cases.
            this._openedBy = event.button === 0 ? 'mouse' : null;
        }
    };
    /** Toggles the menu between the open and closed states. */
    /**
     * Toggles the menu between the open and closed states.
     * @return {?}
     */
    SdsMenuTriggerForDirective.prototype.toggleMenu = /**
     * Toggles the menu between the open and closed states.
     * @return {?}
     */
    function () {
        return this._menuOpen ? this.closeMenu() : this.openMenu();
    };
    /**
     * @return {?}
     */
    SdsMenuTriggerForDirective.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this._overlayRef) {
            this._overlayRef.dispose();
            this._overlayRef = null;
        }
        this._element.nativeElement.removeEventListener('touchstart', (/**
         * @return {?}
         */
        function () { return (_this._openedBy = 'touch'); }), normalizePassiveListenerOptions({ passive: true }));
        this._menuCloseSubscription.unsubscribe();
        this._closingActionsSubscription.unsubscribe();
    };
    /** Opens the menu. */
    /**
     * Opens the menu.
     * @return {?}
     */
    SdsMenuTriggerForDirective.prototype.openMenu = /**
     * Opens the menu.
     * @return {?}
     */
    function () {
        var _this = this;
        if (this._menuOpen) {
            return;
        }
        /** @type {?} */
        var overlayRef = this._createOverlay();
        /** @type {?} */
        var overlayConfig = overlayRef.getConfig();
        this._setPosition((/** @type {?} */ (overlayConfig.positionStrategy)));
        overlayRef.attach(this._getPortal());
        this._closingActionsSubscription = this._menuClosingActions().subscribe((/**
         * @return {?}
         */
        function () { return _this.closeMenu(); }));
        this._initMenu();
        if (this.menu instanceof SdsMenuComponent) {
            this.menu._startAnimation();
        }
    };
    /** Closes the menu. */
    /**
     * Closes the menu.
     * @return {?}
     */
    SdsMenuTriggerForDirective.prototype.closeMenu = /**
     * Closes the menu.
     * @return {?}
     */
    function () {
        this.menu.closed.emit();
    };
    /** Focuses the menu trigger. */
    /**
     * Focuses the menu trigger.
     * @param {?=} origin
     * @return {?}
     */
    SdsMenuTriggerForDirective.prototype.focus = /**
     * Focuses the menu trigger.
     * @param {?=} origin
     * @return {?}
     */
    function (origin) {
        if (origin === void 0) { origin = 'program'; }
        this._focusMonitor.focusVia(this._element, origin);
    };
    /** This method sets the menu state to open and focuses the first item */
    /**
     * This method sets the menu state to open and focuses the first item
     * @private
     * @return {?}
     */
    SdsMenuTriggerForDirective.prototype._initMenu = /**
     * This method sets the menu state to open and focuses the first item
     * @private
     * @return {?}
     */
    function () {
        this._setIsMenuOpen(true);
        this.menu.focusFirstItem(this._openedBy || 'program');
    };
    /** sets open state */
    /**
     * sets open state
     * @private
     * @param {?} isOpen
     * @return {?}
     */
    SdsMenuTriggerForDirective.prototype._setIsMenuOpen = /**
     * sets open state
     * @private
     * @param {?} isOpen
     * @return {?}
     */
    function (isOpen) {
        this._menuOpen = isOpen;
        this._menuOpen ? this.menuOpened.emit() : this.menuClosed.emit();
    };
    /**
     * This method resets the menu when it's closed,
     * most importantly restoring focus to the menu trigger
     */
    /**
     * This method resets the menu when it's closed,
     * most importantly restoring focus to the menu trigger
     * @private
     * @return {?}
     */
    SdsMenuTriggerForDirective.prototype._resetMenu = /**
     * This method resets the menu when it's closed,
     * most importantly restoring focus to the menu trigger
     * @private
     * @return {?}
     */
    function () {
        this._setIsMenuOpen(false);
        if (!this._openedBy) {
            this.focus();
        }
        else {
            this.focus(this._openedBy);
        }
        this._openedBy = null;
    };
    /** Closes the menu and does the necessary cleanup. */
    /**
     * Closes the menu and does the necessary cleanup.
     * @private
     * @return {?}
     */
    SdsMenuTriggerForDirective.prototype._destroyMenu = /**
     * Closes the menu and does the necessary cleanup.
     * @private
     * @return {?}
     */
    function () {
        if (!this._overlayRef || !this.menuOpen) {
            return;
        }
        this._closingActionsSubscription.unsubscribe();
        this._overlayRef.detach();
        if (this.menu instanceof SdsMenuComponent) {
            this.menu._resetAnimation();
            this._resetMenu();
        }
    };
    /**
     * This method creates the overlay from the provided menu's template and saves its
     * OverlayRef so that it can be attached to the DOM when openMenu is called.
     */
    /**
     * This method creates the overlay from the provided menu's template and saves its
     * OverlayRef so that it can be attached to the DOM when openMenu is called.
     * @private
     * @return {?}
     */
    SdsMenuTriggerForDirective.prototype._createOverlay = /**
     * This method creates the overlay from the provided menu's template and saves its
     * OverlayRef so that it can be attached to the DOM when openMenu is called.
     * @private
     * @return {?}
     */
    function () {
        if (!this._overlayRef) {
            /** @type {?} */
            var config = this._getOverlayConfig();
            this._subscribeToPositions((/** @type {?} */ (config.positionStrategy)));
            this._overlayRef = this._overlay.create(config);
            this._overlayRef.keydownEvents().subscribe();
        }
        return this._overlayRef;
    };
    /**
     * This method builds the configuration object needed to create the overlay, the OverlayState.
     * @returns OverlayConfig
     */
    /**
     * This method builds the configuration object needed to create the overlay, the OverlayState.
     * @private
     * @return {?} OverlayConfig
     */
    SdsMenuTriggerForDirective.prototype._getOverlayConfig = /**
     * This method builds the configuration object needed to create the overlay, the OverlayState.
     * @private
     * @return {?} OverlayConfig
     */
    function () {
        return new OverlayConfig({
            positionStrategy: this._overlay
                .position()
                .flexibleConnectedTo(this._element)
                .withLockedPosition()
                .withTransformOriginOn('.sds-overlay'),
            hasBackdrop: true,
            backdropClass: 'cdk-overlay-transparent-backdrop',
            scrollStrategy: this._overlay.scrollStrategies.reposition()
        });
    };
    /**
     * Listens to changes in the position of the overlay and sets the correct classes
     * on the menu based on the new position.
     */
    /**
     * Listens to changes in the position of the overlay and sets the correct classes
     * on the menu based on the new position.
     * @private
     * @param {?} position
     * @return {?}
     */
    SdsMenuTriggerForDirective.prototype._subscribeToPositions = /**
     * Listens to changes in the position of the overlay and sets the correct classes
     * on the menu based on the new position.
     * @private
     * @param {?} position
     * @return {?}
     */
    function (position) {
        var _this = this;
        position.positionChanges.subscribe((/**
         * @param {?} change
         * @return {?}
         */
        function (change) {
            /** @type {?} */
            var posX = change.connectionPair.overlayX === 'start' ? 'after' : 'before';
            /** @type {?} */
            var posY = change.connectionPair.overlayY === 'top' ? 'below' : 'above';
            _this.menu.setPositionClasses(posX, posY);
        }));
    };
    /**
     * Sets the appropriate positions on a position strategy
     * so the overlay connects with the trigger correctly.
     */
    /**
     * Sets the appropriate positions on a position strategy
     * so the overlay connects with the trigger correctly.
     * @private
     * @param {?} positionStrategy
     * @return {?}
     */
    SdsMenuTriggerForDirective.prototype._setPosition = /**
     * Sets the appropriate positions on a position strategy
     * so the overlay connects with the trigger correctly.
     * @private
     * @param {?} positionStrategy
     * @return {?}
     */
    function (positionStrategy) {
        var _a = tslib_1.__read(this.menu.xPosition === 'before' ? ['end', 'start'] : ['start', 'end'], 2), originX = _a[0], originFallbackX = _a[1];
        var _b = tslib_1.__read(this.menu.yPosition === 'above' ? ['bottom', 'top'] : ['top', 'bottom'], 2), overlayY = _b[0], overlayFallbackY = _b[1];
        var _c = tslib_1.__read([overlayY, overlayFallbackY], 2), originY = _c[0], originFallbackY = _c[1];
        var _d = tslib_1.__read([originX, originFallbackX], 2), overlayX = _d[0], overlayFallbackX = _d[1];
        /** @type {?} */
        var offsetY = 0;
        if (!this.menu.overlapTrigger) {
            originY = overlayY === 'top' ? 'bottom' : 'top';
            originFallbackY = overlayFallbackY === 'top' ? 'bottom' : 'top';
        }
        // Positions from most to least desirable
        positionStrategy.withPositions([
            { originX: originX, originY: originY, overlayX: overlayX, overlayY: overlayY, offsetY: offsetY },
            {
                originX: originFallbackX,
                originY: originY,
                overlayX: overlayFallbackX,
                overlayY: overlayY,
                offsetY: offsetY
            },
            {
                originX: originX,
                originY: originFallbackY,
                overlayX: overlayX,
                overlayY: overlayFallbackY,
                offsetY: -offsetY
            },
            {
                originX: originFallbackX,
                originY: originFallbackY,
                overlayX: overlayFallbackX,
                overlayY: overlayFallbackY,
                offsetY: -offsetY
            }
        ]);
    };
    /** Returns a stream that emits whenever an action that should close the menu occurs. */
    /**
     * Returns a stream that emits whenever an action that should close the menu occurs.
     * @private
     * @return {?}
     */
    SdsMenuTriggerForDirective.prototype._menuClosingActions = /**
     * Returns a stream that emits whenever an action that should close the menu occurs.
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var backdrop = this._overlayRef.backdropClick();
        /** @type {?} */
        var detachments = this._overlayRef.detachments();
        return merge(backdrop, detachments);
    };
    /** Gets the portal that should be attached to the overlay. */
    /**
     * Gets the portal that should be attached to the overlay.
     * @private
     * @return {?}
     */
    SdsMenuTriggerForDirective.prototype._getPortal = /**
     * Gets the portal that should be attached to the overlay.
     * @private
     * @return {?}
     */
    function () {
        if (!this._portal || this._portal.templateRef !== this.menu.templateRef) {
            this._portal = new TemplatePortal(this.menu.templateRef, this._viewContainerRef);
        }
        return this._portal;
    };
    SdsMenuTriggerForDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[sdsMenuTriggerFor]'
                },] }
    ];
    /** @nocollapse */
    SdsMenuTriggerForDirective.ctorParameters = function () { return [
        { type: Overlay },
        { type: ElementRef },
        { type: ViewContainerRef },
        { type: FocusMonitor }
    ]; };
    SdsMenuTriggerForDirective.propDecorators = {
        ariaHasPopup: [{ type: HostBinding, args: ['attr.aria-haspopup',] }],
        menuOpen: [{ type: HostBinding, args: ['attr.aria-expanded',] }],
        menu: [{ type: Input, args: ['sdsMenuTriggerFor',] }],
        menuOpened: [{ type: Output }],
        menuClosed: [{ type: Output }],
        _handleMousedown: [{ type: HostListener, args: ['mousedown', ['$event'],] }],
        toggleMenu: [{ type: HostListener, args: ['click',] }]
    };
    return SdsMenuTriggerForDirective;
}());
export { SdsMenuTriggerForDirective };
if (false) {
    /**
     * ARIA haspopup for the menu trigger.
     * @type {?}
     */
    SdsMenuTriggerForDirective.prototype.ariaHasPopup;
    /**
     * Holds the menu instance
     * @type {?}
     * @private
     */
    SdsMenuTriggerForDirective.prototype._menu;
    /**
     * Holds value for menuOpen variable
     * @type {?}
     * @private
     */
    SdsMenuTriggerForDirective.prototype._menuOpen;
    /**
     * CDK Portal for menu panel
     * @type {?}
     * @private
     */
    SdsMenuTriggerForDirective.prototype._portal;
    /**
     * PortalOutlet
     * @type {?}
     * @private
     */
    SdsMenuTriggerForDirective.prototype._overlayRef;
    /**
     * Tracks input type
     * @type {?}
     * @private
     */
    SdsMenuTriggerForDirective.prototype._openedBy;
    /**
     * @type {?}
     * @private
     */
    SdsMenuTriggerForDirective.prototype._closingActionsSubscription;
    /**
     * @type {?}
     * @private
     */
    SdsMenuTriggerForDirective.prototype._menuCloseSubscription;
    /**
     * Event emitted when the associated menu is opened.
     * @type {?}
     */
    SdsMenuTriggerForDirective.prototype.menuOpened;
    /**
     * Event emitted when the associated menu is closed.
     * @type {?}
     */
    SdsMenuTriggerForDirective.prototype.menuClosed;
    /**
     * @type {?}
     * @private
     */
    SdsMenuTriggerForDirective.prototype._overlay;
    /**
     * @type {?}
     * @private
     */
    SdsMenuTriggerForDirective.prototype._element;
    /**
     * @type {?}
     * @private
     */
    SdsMenuTriggerForDirective.prototype._viewContainerRef;
    /**
     * @type {?}
     * @private
     */
    SdsMenuTriggerForDirective.prototype._focusMonitor;
}
//# sourceMappingURL=data:application/json;base64,