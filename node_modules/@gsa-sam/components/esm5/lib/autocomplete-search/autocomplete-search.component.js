/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component, Input, ViewChild, TemplateRef, ElementRef, forwardRef, ChangeDetectorRef } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { KeyHelper, KEYS } from '../key-helper/key-helper';
import { SDSSelectedItemModel } from '../selected-result/models/sds-selectedItem.model';
import { SelectionMode, SDSSelectedItemModelHelper } from '../selected-result/models/sds-selected-item-model-helper';
import { SDSAutocompleteSearchConfiguration } from './models/SDSAutocompleteConfiguration';
/** @type {?} */
var Autocomplete_Autocomplete_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef((/**
     * @return {?}
     */
    function () { return SDSAutocompleteSearchComponent; })),
    multi: true
};
var SDSAutocompleteSearchComponent = /** @class */ (function () {
    function SDSAutocompleteSearchComponent(_changeDetectorRef) {
        this._changeDetectorRef = _changeDetectorRef;
        /**
         * selected index
         */
        this.highlightedIndex = 0;
        /**
         * value of the input field
         */
        this.inputValue = '';
        /**
         * Proprty being set on the object is highlighted
         */
        this.HighlightedPropertyName = 'highlighted';
        this.showLoad = true;
        /**
         * Search string
         */
        this.searchString = null;
        /**
         * To make input readonly
         */
        this.inputReadOnly = false;
        /**
         * Used to store selected items
         */
        this.items = [];
        /**
         * Stored Event for ControlValueAccessor
         */
        this.onTouchedCallback = (/**
         * @return {?}
         */
        function () { return null; });
        /**
         * Stored Event for ControlValueAccessor
         */
        this.propogateChange = (/**
         * @param {?} _
         * @return {?}
         */
        function (_) { return null; });
        this.resultsAvailableMessage = ' results available. Use up and down arrows\
  to scroll through results. Hit enter to select.';
        this.index = 0;
        /**
         * Determines if the dropdown should be shown
         */
        this.showResults = false;
    }
    /**
     * Gets the string value from the specifed properties of an object
     * @param object
     * @param propertyFields comma seperated list with periods depth of object
     */
    /**
     * Gets the string value from the specifed properties of an object
     * @param {?} object
     * @param {?} propertyFields comma seperated list with periods depth of object
     * @return {?}
     */
    SDSAutocompleteSearchComponent.prototype.getObjectValue = /**
     * Gets the string value from the specifed properties of an object
     * @param {?} object
     * @param {?} propertyFields comma seperated list with periods depth of object
     * @return {?}
     */
    function (object, propertyFields) {
        /** @type {?} */
        var value = '';
        /** @type {?} */
        var current = object;
        /** @type {?} */
        var fieldSplit = propertyFields.split(',');
        for (var i = 0; i < fieldSplit.length; i++) {
            /** @type {?} */
            var fieldValue = fieldSplit[i];
            /** @type {?} */
            var fieldPartSplit = fieldValue.split('.');
            for (var j = 0; j < fieldPartSplit.length; j++) {
                /** @type {?} */
                var fieldCheckValue = fieldPartSplit[j];
                if (current) {
                    current = current[fieldCheckValue];
                }
            }
            if (current) {
                value += current.toString() + ' ';
            }
            current = object;
        }
        return value.trim();
    };
    /**
     * Clears the input fields and value
     */
    /**
     * Clears the input fields and value
     * @return {?}
     */
    SDSAutocompleteSearchComponent.prototype.clearInput = /**
     * Clears the input fields and value
     * @return {?}
     */
    function () {
        this.inputValue = '';
        this.onTouchedCallback();
        this.clearAndHideResults();
    };
    /**
     *
     * @param event
     */
    /**
     *
     * @param {?} event
     * @return {?}
     */
    SDSAutocompleteSearchComponent.prototype.checkForFocus = /**
     *
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.focusRemoved();
        this.showResults = false;
    };
    /**
     *
     */
    /**
     *
     * @private
     * @return {?}
     */
    SDSAutocompleteSearchComponent.prototype.focusRemoved = /**
     *
     * @private
     * @return {?}
     */
    function () {
        if (this.configuration) {
            if (this.configuration.selectionMode === SelectionMode.SINGLE) {
                if (this.model.items.length > 0) {
                    if (this.inputValue.length === 0) {
                        SDSSelectedItemModelHelper.clearItems(this.model.items);
                        this.propogateChange(this.model);
                    }
                    else {
                        this.inputValue = this.getObjectValue(this.model.items[0], this.configuration.primaryTextField);
                    }
                }
            }
            else {
                this.inputValue = '';
            }
        }
        else {
            this.inputValue = '';
        }
    };
    /**
     * @param {?} ev
     * @return {?}
     */
    SDSAutocompleteSearchComponent.prototype.onkeypress = /**
     * @param {?} ev
     * @return {?}
     */
    function (ev) {
        return this.configuration.inputReadOnly ? false : true;
    };
    /**
     * @param {?} event
     * @return {?}
     */
    SDSAutocompleteSearchComponent.prototype.textChange = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (!this.configuration.isTagModeEnabled) {
            // ie 11 placeholders will incorrectly trigger input events (known bug)
            // if input isn't active element then don't do anything
            if (event.target != document.activeElement) {
                event.preventDefault();
                return;
            }
            /** @type {?} */
            var searchString = event.target.value || '';
            this.getResults(searchString);
        }
    };
    /**
     * Event method used when focus is gained to the input
     */
    /**
     * Event method used when focus is gained to the input
     * @return {?}
     */
    SDSAutocompleteSearchComponent.prototype.inputFocusHandler = /**
     * Event method used when focus is gained to the input
     * @return {?}
     */
    function () {
        if (!this.configuration.isTagModeEnabled) {
            if (this.configuration.focusInSearch) {
                this.getResults(this.inputValue || '');
            }
            this.onTouchedCallback();
        }
    };
    /**
     * Key event
     * @param event
     */
    /**
     * Key event
     * @param {?} event
     * @return {?}
     */
    SDSAutocompleteSearchComponent.prototype.onKeydown = /**
     * Key event
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (KeyHelper.is(KEYS.TAB, event)) {
            return;
        }
        else if (KeyHelper.is(KEYS.BACKSPACE, event)) {
            if (this.configuration.inputReadOnly) {
                event.preventDefault();
            }
        }
        else if (KeyHelper.is(KEYS.DOWN, event)) {
            this.onArrowDown();
        }
        else if (KeyHelper.is(KEYS.UP, event)) {
            event.preventDefault();
            this.onArrowUp();
        }
        else if (KeyHelper.is(KEYS.ENTER, event) && this.highlightedIndex >= 0) {
            if (this.configuration.isTagModeEnabled) {
                /** @type {?} */
                var val = this.createFreeTextItem();
                this.selectItem(val);
            }
            else {
                this.selectItem(this.highlightedItem);
            }
        }
        else if (KeyHelper.is(KEYS.ENTER, event) && this.highlightedIndex < 0) {
            /** @type {?} */
            var val = this.createFreeTextItem();
            this.selectItem(val);
        }
        else if (KeyHelper.is(KEYS.ESC, event)) {
            if (this.showResults) {
                this.clearAndHideResults();
                if (event.stopPropagation) {
                    event.stopPropagation();
                }
            }
        }
    };
    /**
     * selects the item adding it to the model and closes the results
     * @param item
     */
    /**
     * selects the item adding it to the model and closes the results
     * @param {?} item
     * @return {?}
     */
    SDSAutocompleteSearchComponent.prototype.selectItem = /**
     * selects the item adding it to the model and closes the results
     * @param {?} item
     * @return {?}
     */
    function (item) {
        var _this = this;
        SDSSelectedItemModelHelper.addItem(item, this.configuration.primaryKeyField, this.configuration.selectionMode, this.items);
        setTimeout((/**
         * @return {?}
         */
        function () {
            _this.model.items = tslib_1.__spread(_this.items);
            _this.propogateChange(_this.model);
        }), 0);
        /** @type {?} */
        var message = this.getObjectValue(item, this.configuration.primaryTextField);
        this.inputValue = message;
        this.focusRemoved();
        this.showResults = false;
    };
    /**
     *  clears the results and closes result drop down
     */
    /**
     *  clears the results and closes result drop down
     * @private
     * @return {?}
     */
    SDSAutocompleteSearchComponent.prototype.clearAndHideResults = /**
     *  clears the results and closes result drop down
     * @private
     * @return {?}
     */
    function () {
        this.results = [];
        this.showResults = false;
        this.focusRemoved();
    };
    /**
     *  handles the arrow up key event
     */
    /**
     *  handles the arrow up key event
     * @private
     * @return {?}
     */
    SDSAutocompleteSearchComponent.prototype.onArrowUp = /**
     *  handles the arrow up key event
     * @private
     * @return {?}
     */
    function () {
        if (this.results && this.results.length > 0) {
            if (this.highlightedIndex >= 0) {
                this.highlightedIndex--;
                this.setHighlightedItem(this.results[this.highlightedIndex]);
                this.scrollSelectedItemIntoView();
            }
        }
    };
    /**
     *  handles the arrow down key event
     */
    /**
     *  handles the arrow down key event
     * @private
     * @return {?}
     */
    SDSAutocompleteSearchComponent.prototype.onArrowDown = /**
     *  handles the arrow down key event
     * @private
     * @return {?}
     */
    function () {
        if (this.results && this.results.length > 0) {
            if (this.highlightedIndex < this.results.length - 1) {
                this.highlightedIndex++;
                this.setHighlightedItem(this.results[this.highlightedIndex]);
                this.scrollSelectedItemIntoView();
            }
        }
    };
    /**
     * @return {?}
     */
    SDSAutocompleteSearchComponent.prototype.showFreeText = /**
     * @return {?}
     */
    function () {
        if (this.configuration.isFreeTextEnabled) {
            if (this.inputValue) {
                if (this.inputValue.length !== 0) {
                    /** @type {?} */
                    var foundItem = false;
                    if (this.results) {
                        for (var i = 0; i < this.results.length && !foundItem; i++) {
                            /** @type {?} */
                            var item = this.results[i];
                            foundItem =
                                item[this.configuration.primaryTextField] === this.inputValue;
                        }
                    }
                    if (this.model.items.length > 0 && !foundItem) {
                        for (var i = 0; i < this.model.items.length && !foundItem; i++) {
                            /** @type {?} */
                            var item = this.model.items[i];
                            foundItem =
                                item[this.configuration.primaryTextField] === this.inputValue;
                        }
                    }
                    return !foundItem;
                }
                else {
                    return false;
                }
            }
            else {
                return false;
            }
        }
        else {
            return this.configuration.isFreeTextEnabled;
        }
    };
    /**
     * @private
     * @return {?}
     */
    SDSAutocompleteSearchComponent.prototype.createFreeTextItem = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var item = { type: 'custom' };
        item[this.configuration.primaryTextField] = this.inputValue;
        item[this.configuration.primaryKeyField] = this.inputValue;
        return item;
    };
    /**
     *  gets the inital results
     * @param searchString
     */
    /**
     *  gets the inital results
     * @private
     * @param {?} searchString
     * @return {?}
     */
    SDSAutocompleteSearchComponent.prototype.getResults = /**
     *  gets the inital results
     * @private
     * @param {?} searchString
     * @return {?}
     */
    function (searchString) {
        var _this = this;
        if (searchString.length >= this.configuration.minimumCharacterCountSearch) {
            if (!this.matchPastSearchString(searchString) ||
                (this.matchPastSearchString(searchString) && !this.showResults) ||
                this.matchPastSearchString('')) {
                this.searchString = searchString;
                window.clearTimeout(this.timeoutNumber);
                this.timeoutNumber = window.setTimeout((/**
                 * @return {?}
                 */
                function () {
                    _this.showLoad = true;
                    _this.service.getDataByText(0, searchString).subscribe((/**
                     * @param {?} result
                     * @return {?}
                     */
                    function (result) {
                        _this.results = result.items;
                        _this.showLoad = false;
                        _this.maxResults = result.totalItems;
                        _this.highlightedIndex = _this.configuration.isFreeTextEnabled
                            ? -1
                            : 0;
                        if (!_this.configuration.isFreeTextEnabled) {
                            _this.setHighlightedItem(_this.results[_this.highlightedIndex]);
                        }
                        _this.showResults = true;
                        _this.addScreenReaderMessage(_this.maxResults + ' ' + _this.resultsAvailableMessage);
                        _this._changeDetectorRef.markForCheck();
                    }));
                }), this.configuration.debounceTime);
            }
        }
    };
    /**
     * Checks if the new search string matches the old search string
     * @param searchString
     */
    /**
     * Checks if the new search string matches the old search string
     * @private
     * @param {?} searchString
     * @return {?}
     */
    SDSAutocompleteSearchComponent.prototype.matchPastSearchString = /**
     * Checks if the new search string matches the old search string
     * @private
     * @param {?} searchString
     * @return {?}
     */
    function (searchString) {
        return this.searchString === searchString;
    };
    /**
     * highlights the index being hovered
     * @param index
     */
    /**
     * highlights the index being hovered
     * @param {?} index
     * @return {?}
     */
    SDSAutocompleteSearchComponent.prototype.listItemHover = /**
     * highlights the index being hovered
     * @param {?} index
     * @return {?}
     */
    function (index) {
        this.highlightedIndex = index;
        this.setHighlightedItem(this.results[this.highlightedIndex]);
    };
    /**
     * Scroll Event Handler (Calculates if mpre items should be asked for from service on scrolling down)
     */
    /**
     * Scroll Event Handler (Calculates if mpre items should be asked for from service on scrolling down)
     * @return {?}
     */
    SDSAutocompleteSearchComponent.prototype.onScroll = /**
     * Scroll Event Handler (Calculates if mpre items should be asked for from service on scrolling down)
     * @return {?}
     */
    function () {
        if (this.maxResults > this.results.length) {
            /** @type {?} */
            var scrollAreaHeight = this.resultsListElement.nativeElement.offsetHeight;
            /** @type {?} */
            var scrollTopPos = this.resultsListElement.nativeElement.scrollTop;
            /** @type {?} */
            var scrollAreaMaxHeight = this.resultsListElement.nativeElement
                .scrollHeight;
            if (scrollTopPos + scrollAreaHeight * 2 >= scrollAreaMaxHeight) {
                this.getAdditionalResults();
            }
        }
    };
    /**
     * gets more results based when scrolling and adds the items
     */
    /**
     * gets more results based when scrolling and adds the items
     * @private
     * @return {?}
     */
    SDSAutocompleteSearchComponent.prototype.getAdditionalResults = /**
     * gets more results based when scrolling and adds the items
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        this.showLoad = true;
        this.service
            .getDataByText(this.results.length, this.searchString)
            .subscribe((/**
         * @param {?} result
         * @return {?}
         */
        function (result) {
            for (var i = 0; i < result.items.length; i++) {
                _this.addResult(result.items[i]);
            }
            _this.showLoad = false;
            _this.maxResults = result.totalItems;
        }));
    };
    /**
     * adds a single item to the list
     * @param item
     */
    /**
     * adds a single item to the list
     * @private
     * @param {?} item
     * @return {?}
     */
    SDSAutocompleteSearchComponent.prototype.addResult = /**
     * adds a single item to the list
     * @private
     * @param {?} item
     * @return {?}
     */
    function (item) {
        //add check to make sure item does not exist
        this.results.push(item);
    };
    /**
     * When paging up and down with arrow key it sets the highlighted item into view
     */
    /**
     * When paging up and down with arrow key it sets the highlighted item into view
     * @private
     * @return {?}
     */
    SDSAutocompleteSearchComponent.prototype.scrollSelectedItemIntoView = /**
     * When paging up and down with arrow key it sets the highlighted item into view
     * @private
     * @return {?}
     */
    function () {
        if (this.highlightedIndex >= 0) {
            /** @type {?} */
            var selectedChild = this.resultsListElement.nativeElement.children[this.highlightedIndex];
            selectedChild.scrollIntoView({
                behavior: 'smooth',
                block: 'nearest',
                inline: 'start'
            });
        }
    };
    /**
     * Sets the highlighted item by keyboard or mouseover
     * @param item
     */
    /**
     * Sets the highlighted item by keyboard or mouseover
     * @private
     * @param {?} item
     * @return {?}
     */
    SDSAutocompleteSearchComponent.prototype.setHighlightedItem = /**
     * Sets the highlighted item by keyboard or mouseover
     * @private
     * @param {?} item
     * @return {?}
     */
    function (item) {
        if (this.results && this.results.length > 0) {
            if (this.highlightedItem) {
                this.highlightedItem[this.HighlightedPropertyName] = false;
            }
            /** @type {?} */
            var message = '';
            if (item) {
                this.highlightedItem = item;
                this.highlightedItem[this.HighlightedPropertyName] = true;
                message = item[this.configuration.primaryTextField];
                if (this.configuration.secondaryTextField &&
                    item[this.configuration.secondaryTextField]) {
                    message += ': ' + item[this.configuration.secondaryTextField];
                }
            }
            else {
                this.highlightedItem = undefined;
                message = 'No item selected';
            }
            this.addScreenReaderMessage(message);
        }
    };
    /**
     * Adds message to be read by screen reader
     * @param message
     */
    /**
     * Adds message to be read by screen reader
     * @private
     * @param {?} message
     * @return {?}
     */
    SDSAutocompleteSearchComponent.prototype.addScreenReaderMessage = /**
     * Adds message to be read by screen reader
     * @private
     * @param {?} message
     * @return {?}
     */
    function (message) {
        this.srOnlyText = message;
    };
    /**
     * @param {?} obj
     * @return {?}
     */
    SDSAutocompleteSearchComponent.prototype.writeValue = /**
     * @param {?} obj
     * @return {?}
     */
    function (obj) {
        if (obj instanceof SDSSelectedItemModel) {
            this.model = (/** @type {?} */ (obj));
            this._changeDetectorRef.markForCheck();
            if (this.model.items.length === 0) {
                this.inputValue = '';
            }
            else {
                if (this.configuration.selectionMode === SelectionMode.SINGLE) {
                    this.inputValue = this.getObjectValue(this.model.items[0], this.configuration.primaryTextField);
                }
            }
        }
    };
    /**
     * @return {?}
     */
    SDSAutocompleteSearchComponent.prototype.getClass = /**
     * @return {?}
     */
    function () {
        return this.configuration.inputReadOnly &&
            this.configuration.selectionMode === SelectionMode.MULTIPLE
            ? 'hide-cursor'
            : '';
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    SDSAutocompleteSearchComponent.prototype.registerOnChange = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.propogateChange = fn;
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    SDSAutocompleteSearchComponent.prototype.registerOnTouched = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.onTouchedCallback = fn;
    };
    /**
     * @param {?} isDisabled
     * @return {?}
     */
    SDSAutocompleteSearchComponent.prototype.setDisabledState = /**
     * @param {?} isDisabled
     * @return {?}
     */
    function (isDisabled) {
        this.disabled = isDisabled;
    };
    SDSAutocompleteSearchComponent.decorators = [
        { type: Component, args: [{
                    selector: 'sds-search-autocomplete',
                    template: "<div sds-click-outside (clickOutside)=\"checkForFocus($event)\" sds-tab-outside (tabOutside)=\"checkForFocus($event)\">\n  <div class=\"maxw-mobile-lg position-relative\">\n    <div role=\"combobox\" [attr.id]=\"configuration.id+'-container'\" [attr.aria-expanded]=\"showResults\" [attr.aria-owns]=\"showResults? configuration.id+ '-listbox' : undefined\"\n      aria-haspopup=\"listbox\">\n      <input [disabled]=\"disabled\" (keypress)=\"onkeypress($event)\" (input)=\"textChange($event)\" class=\"usa-input padding-right-3\"\n        [ngClass]=\"getClass()\" #input [attr.aria-label]=\"configuration.ariaLabelText\" [attr.id]=\"configuration.id\" type=\"text\"\n        (focus)=\"inputFocusHandler()\" (keydown)=\"onKeydown($event)\" [(ngModel)]=\"inputValue\" aria-autocomplete=\"list\"\n        [attr.placeholder]=\"configuration.autocompletePlaceHolderText\" [attr.aria-activedescendant]=\"showResults? configuration.id+'-resultItem-'+highlightedIndex :''\"\n        [attr.aria-controls]=\"showResults? configuration.id+ '-listbox' : undefined\" autocomplete=\"off\">\n    </div>\n    <ul #resultsList *ngIf=\"showResults\" [attr.id]=\"configuration.id+ '-listbox'\" role=\"listbox\" class=\"usa-list usa-list--unstyled sds-autocomplete\"\n      (scroll)=\"onScroll()\">\n      <ng-container *ngIf=\"(results && results.length > 0)\">\n        <li [attr.id]=\"configuration.id+'-resultItem-'+i\" role=\"option\" *ngFor=\"let result of results; let i = index\"\n          (mouseenter)=\"listItemHover(i)\" [class]=\"result['highlighted'] ? 'sds-autocomplete__item sds-autocomplete__item--selected' : 'sds-autocomplete__item' \"\n          (click)=\"selectItem(result)\">\n          <ng-container *ngIf=\"itemTemplate\" [ngTemplateOutlet]=\"itemTemplate\" [ngTemplateOutletContext]=\"{$implicit:result}\">\n          </ng-container>\n\n          <ng-container *ngIf=\"!itemTemplate\">\n            <span class=\"display-block text-semibold\">\n              {{ getObjectValue(result, configuration.primaryTextField) }}\n              <span *ngIf=\"result.type === 'custom'\">\n                - {{configuration.freeTextSubtext}}\n              </span>\n            </span>\n            <ng-container *ngIf=\"configuration.secondaryTextField &&  result[configuration.secondaryTextField] \">\n              <span class=\"description\">{{ result[configuration.secondaryTextField] }}</span>\n            </ng-container>\n          </ng-container>\n        </li>\n      </ng-container>\n      <ng-container *ngIf=\"(!results || results.length == 0)\">\n        <li class=\"emptyResults margin-1\">No results found</li>\n      </ng-container>\n      <ng-container *ngIf=\"showLoad\">\n        <li class=\"autoLoading\">\n          <div class=\"lightToGrayBackgroundGradiate\">\n\n          </div>\n          <div class=\"grayToLightBackgroundGradiate\">\n\n          </div>\n        </li>\n        <li class=\"autoLoading\">\n          <div class=\"lightToGrayBackgroundGradiate\">\n\n          </div>\n          <div class=\"grayToLightBackgroundGradiate\">\n\n          </div>\n        </li>\n      </ng-container>\n    </ul>\n\n    <ng-container *ngIf=\"!input.disabled\">\n      <span class=\"position-absolute right-105 top-1 cursor-pointer\">\n        <span *ngIf=\"(inputValue && !disabled)\" tabindex=\"0\" role=\"button\" aria-label=\"Clear input\" aria-hidden=\"false\"\n          (click)=\"clearInput()\" (keyup.enter)=\"clearInput()\">\n          <fa-icon [icon]=\"['fas', 'times']\" size=\"xs\"></fa-icon>\n        </span>\n        <span *ngIf=\"!configuration.isTagModeEnabled\" tabindex=\"1\" role=\"button\" aria-label=\"Clear input\" aria-hidden=\"false\"\n          class=\"margin-left-1\">\n          <fa-icon *ngIf=\"(!showResults && !disabled)\" (click)=\"inputFocusHandler()\" [icon]=\"['fas', 'caret-down']\"\n            size=\"sm\"></fa-icon>\n          <fa-icon *ngIf=\"(showResults && !disabled)\" (click)=\"checkForFocus($event)\" [icon]=\"['fas', 'caret-up']\" size=\"sm\"></fa-icon>\n        </span>\n      </span>\n    </ng-container>\n    <ul class=\"usa-sr-only\" aria-live=\"assertive\">\n      <li>{{srOnlyText}}</li>\n    </ul>\n  </div>",
                    providers: [Autocomplete_Autocomplete_VALUE_ACCESSOR],
                    styles: [".grayToLightBackgroundGradiate{background:linear-gradient(to right,#c4c4c4,#f7f7f7);background-size:400% 400%;height:10px;padding:2.5px 0;text-align:center;color:#888;font-size:15px;font-weight:700;margin:7px 10px 0;-webkit-animation:5s infinite gradiantShiftGray;animation:5s infinite gradiantShiftGray}@-webkit-keyframes gradiantShiftGray{0%,100%{background-position:0 50%}50%{background-position:100% 50%}}@keyframes gradiantShiftGray{0%,100%{background-position:0 50%}50%{background-position:100% 50%}}.lightToGrayBackgroundGradiate{background:linear-gradient(to right,#f7f7f7,#c4c4c4);background-size:400% 400%;height:15px;padding:2.5px 0;text-align:center;color:#888;font-size:15px;font-weight:700;margin:10px 10px 0;-webkit-animation:5s infinite gradiantShift;animation:5s infinite gradiantShift}@-webkit-keyframes gradiantShift{0%,100%{background-position:0 50%}50%{background-position:100% 50%}}@keyframes gradiantShift{0%,100%{background-position:0 50%}50%{background-position:100% 50%}}.autoLoading{height:60px}.hide-cursor{color:transparent;text-shadow:0 0 0}"]
                }] }
    ];
    /** @nocollapse */
    SDSAutocompleteSearchComponent.ctorParameters = function () { return [
        { type: ChangeDetectorRef }
    ]; };
    SDSAutocompleteSearchComponent.propDecorators = {
        resultsListElement: [{ type: ViewChild, args: ['resultsList',] }],
        input: [{ type: ViewChild, args: ['input',] }],
        itemTemplate: [{ type: Input }],
        configuration: [{ type: Input }],
        service: [{ type: Input }],
        inputReadOnly: [{ type: Input }],
        disabled: [{ type: Input }]
    };
    return SDSAutocompleteSearchComponent;
}());
export { SDSAutocompleteSearchComponent };
if (false) {
    /**
     * Ul list of elements
     * @type {?}
     */
    SDSAutocompleteSearchComponent.prototype.resultsListElement;
    /**
     * input control
     * @type {?}
     */
    SDSAutocompleteSearchComponent.prototype.input;
    /**
     * Allow to insert a customized template for suggestions to use
     * @type {?}
     */
    SDSAutocompleteSearchComponent.prototype.itemTemplate;
    /**
     * The data model that has the selected item
     * @type {?}
     */
    SDSAutocompleteSearchComponent.prototype.model;
    /**
     * Configuration for the Autocomplete control
     * @type {?}
     */
    SDSAutocompleteSearchComponent.prototype.configuration;
    /**
     * Instance of the SamHiercarchicalServiceInterface provided
     * @type {?}
     */
    SDSAutocompleteSearchComponent.prototype.service;
    /**
     * Timer id for the timer awaiting the service call for more typeing
     * @type {?}
     * @private
     */
    SDSAutocompleteSearchComponent.prototype.timeoutNumber;
    /**
     *  result set to be rendered
     * @type {?}
     */
    SDSAutocompleteSearchComponent.prototype.results;
    /**
     * max number of results to be shown
     * @type {?}
     * @private
     */
    SDSAutocompleteSearchComponent.prototype.maxResults;
    /**
     * selected index
     * @type {?}
     */
    SDSAutocompleteSearchComponent.prototype.highlightedIndex;
    /**
     * highlighted object in drop down
     * @type {?}
     * @private
     */
    SDSAutocompleteSearchComponent.prototype.highlightedItem;
    /**
     * value of the input field
     * @type {?}
     */
    SDSAutocompleteSearchComponent.prototype.inputValue;
    /**
     * Proprty being set on the object is highlighted
     * @type {?}
     * @private
     */
    SDSAutocompleteSearchComponent.prototype.HighlightedPropertyName;
    /** @type {?} */
    SDSAutocompleteSearchComponent.prototype.showLoad;
    /**
     * Search string
     * @type {?}
     * @private
     */
    SDSAutocompleteSearchComponent.prototype.searchString;
    /**
     * Message announced by screen readers when
     * autocomplete results are updated or new item
     * is highlighted
     * @type {?}
     */
    SDSAutocompleteSearchComponent.prototype.srOnlyText;
    /**
     * To make input readonly
     * @type {?}
     */
    SDSAutocompleteSearchComponent.prototype.inputReadOnly;
    /**
     * Used to store selected items
     * @type {?}
     */
    SDSAutocompleteSearchComponent.prototype.items;
    /**
     * Stored Event for ControlValueAccessor
     * @type {?}
     */
    SDSAutocompleteSearchComponent.prototype.onTouchedCallback;
    /**
     * Stored Event for ControlValueAccessor
     * @type {?}
     */
    SDSAutocompleteSearchComponent.prototype.propogateChange;
    /** @type {?} */
    SDSAutocompleteSearchComponent.prototype.disabled;
    /**
     * @type {?}
     * @private
     */
    SDSAutocompleteSearchComponent.prototype.resultsAvailableMessage;
    /**
     * @type {?}
     * @private
     */
    SDSAutocompleteSearchComponent.prototype.index;
    /**
     * Determines if the dropdown should be shown
     * @type {?}
     */
    SDSAutocompleteSearchComponent.prototype.showResults;
    /**
     * @type {?}
     * @private
     */
    SDSAutocompleteSearchComponent.prototype._changeDetectorRef;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXV0b2NvbXBsZXRlLXNlYXJjaC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZ3NhLXNhbS9jb21wb25lbnRzLyIsInNvdXJjZXMiOlsibGliL2F1dG9jb21wbGV0ZS1zZWFyY2gvYXV0b2NvbXBsZXRlLXNlYXJjaC5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQ0wsU0FBUyxFQUNULEtBQUssRUFDTCxTQUFTLEVBQ1QsV0FBVyxFQUNYLFVBQVUsRUFDVixVQUFVLEVBQ1YsaUJBQWlCLEVBQ2xCLE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sRUFBRSxpQkFBaUIsRUFBd0IsTUFBTSxnQkFBZ0IsQ0FBQztBQUV6RSxPQUFPLEVBQUUsU0FBUyxFQUFFLElBQUksRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBQzNELE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLGtEQUFrRCxDQUFDO0FBQ3hGLE9BQU8sRUFDTCxhQUFhLEVBQ2IsMEJBQTBCLEVBQzNCLE1BQU0sMERBQTBELENBQUM7QUFDbEUsT0FBTyxFQUFFLGtDQUFrQyxFQUFFLE1BQU0sdUNBQXVDLENBQUM7O0lBQ3JGLHdDQUF3QyxHQUFRO0lBQ3BELE9BQU8sRUFBRSxpQkFBaUI7SUFDMUIsV0FBVyxFQUFFLFVBQVU7OztJQUFDLGNBQU0sT0FBQSw4QkFBOEIsRUFBOUIsQ0FBOEIsRUFBQztJQUM3RCxLQUFLLEVBQUUsSUFBSTtDQUNaO0FBRUQ7SUFPRSx3Q0FBb0Isa0JBQXFDO1FBQXJDLHVCQUFrQixHQUFsQixrQkFBa0IsQ0FBbUI7Ozs7UUFtRGxELHFCQUFnQixHQUFXLENBQUMsQ0FBQzs7OztRQVU3QixlQUFVLEdBQVcsRUFBRSxDQUFDOzs7O1FBS3ZCLDRCQUF1QixHQUFHLGFBQWEsQ0FBQztRQUV6QyxhQUFRLEdBQVksSUFBSSxDQUFDOzs7O1FBS3hCLGlCQUFZLEdBQVcsSUFBSSxDQUFDOzs7O1FBWXBCLGtCQUFhLEdBQUcsS0FB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RSx5QkFBeUI7b0JBQ25DLHdsSUFBbUQ7b0JBRW5ELFNBQVMsRUFBRSxDQUFDLHdDQUF3QyxDQUFDOztpQkFDdEQ7Ozs7Z0JBdEJDLGlCQUFpQjs7O3FDQTRCaEIsU0FBUyxTQUFDLGFBQWE7d0JBS3ZCLFNBQVMsU0FBQyxPQUFPOytCQUtqQixLQUFLO2dDQVVMLEtBQUs7MEJBTUwsS0FBSztnQ0F1REwsS0FBSzsyQkFnQkwsS0FBSzs7SUEwYVIscUNBQUM7Q0FBQSxBQXRoQkQsSUFzaEJDO1NBaGhCWSw4QkFBOEI7Ozs7OztJQUt6Qyw0REFBeUQ7Ozs7O0lBS3pELCtDQUFzQzs7Ozs7SUFLdEMsc0RBQXdDOzs7OztJQUt4QywrQ0FBbUM7Ozs7O0lBS25DLHVEQUN5RDs7Ozs7SUFLekQsaURBQ2dEOzs7Ozs7SUFLaEQsdURBQThCOzs7OztJQUs5QixpREFBa0I7Ozs7OztJQUtsQixvREFBMkI7Ozs7O0lBSzNCLDBEQUFvQzs7Ozs7O0lBS3BDLHlEQUFnQzs7Ozs7SUFLaEMsb0RBQStCOzs7Ozs7SUFLL0IsaUVBQWdEOztJQUVoRCxrREFBZ0M7Ozs7OztJQUtoQyxzREFBb0M7Ozs7Ozs7SUFPcEMsb0RBQTBCOzs7OztJQUsxQix1REFBc0M7Ozs7O0lBS3RDLCtDQUFXOzs7OztJQUlYLDJEQUFrRDs7Ozs7SUFLbEQseURBQTREOztJQUU1RCxrREFDeUI7Ozs7O0lBRXpCLGlFQUVpRDs7Ozs7SUFFakQsK0NBQWtCOzs7OztJQStCbEIscURBQTJCOzs7OztJQTNJZiw0REFBNkMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBDb21wb25lbnQsXG4gIElucHV0LFxuICBWaWV3Q2hpbGQsXG4gIFRlbXBsYXRlUmVmLFxuICBFbGVtZW50UmVmLFxuICBmb3J3YXJkUmVmLFxuICBDaGFuZ2VEZXRlY3RvclJlZlxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE5HX1ZBTFVFX0FDQ0VTU09SLCBDb250cm9sVmFsdWVBY2Nlc3NvciB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcbmltcG9ydCB7IFNEU0F1dG9jb21wbGV0ZVNlcnZpY2VJbnRlcmZhY2UgfSBmcm9tICcuL21vZGVscy9TRFNBdXRvY29tcGxldGVTZXJ2aWNlSW50ZXJmYWNlJztcbmltcG9ydCB7IEtleUhlbHBlciwgS0VZUyB9IGZyb20gJy4uL2tleS1oZWxwZXIva2V5LWhlbHBlcic7XG5pbXBvcnQgeyBTRFNTZWxlY3RlZEl0ZW1Nb2RlbCB9IGZyb20gJy4uL3NlbGVjdGVkLXJlc3VsdC9tb2RlbHMvc2RzLXNlbGVjdGVkSXRlbS5tb2RlbCc7XG5pbXBvcnQge1xuICBTZWxlY3Rpb25Nb2RlLFxuICBTRFNTZWxlY3RlZEl0ZW1Nb2RlbEhlbHBlclxufSBmcm9tICcuLi9zZWxlY3RlZC1yZXN1bHQvbW9kZWxzL3Nkcy1zZWxlY3RlZC1pdGVtLW1vZGVsLWhlbHBlcic7XG5pbXBvcnQgeyBTRFNBdXRvY29tcGxldGVTZWFyY2hDb25maWd1cmF0aW9uIH0gZnJvbSAnLi9tb2RlbHMvU0RTQXV0b2NvbXBsZXRlQ29uZmlndXJhdGlvbic7XG5jb25zdCBBdXRvY29tcGxldGVfQXV0b2NvbXBsZXRlX1ZBTFVFX0FDQ0VTU09SOiBhbnkgPSB7XG4gIHByb3ZpZGU6IE5HX1ZBTFVFX0FDQ0VTU09SLFxuICB1c2VFeGlzdGluZzogZm9yd2FyZFJlZigoKSA9PiBTRFNBdXRvY29tcGxldGVTZWFyY2hDb21wb25lbnQpLFxuICBtdWx0aTogdHJ1ZVxufTtcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnc2RzLXNlYXJjaC1hdXRvY29tcGxldGUnLFxuICB0ZW1wbGF0ZVVybDogJy4vYXV0b2NvbXBsZXRlLXNlYXJjaC5jb21wb25lbnQuaHRtbCcsXG4gIHN0eWxlVXJsczogWycuL2F1dG9jb21wbGV0ZS1zZWFyY2guY29tcG9uZW50LnNjc3MnXSxcbiAgcHJvdmlkZXJzOiBbQXV0b2NvbXBsZXRlX0F1dG9jb21wbGV0ZV9WQUxVRV9BQ0NFU1NPUl1cbn0pXG5leHBvcnQgY2xhc3MgU0RTQXV0b2NvbXBsZXRlU2VhcmNoQ29tcG9uZW50IGltcGxlbWVudHMgQ29udHJvbFZhbHVlQWNjZXNzb3Ige1xuICBjb25zdHJ1Y3Rvcihwcml2YXRlIF9jaGFuZ2VEZXRlY3RvclJlZjogQ2hhbmdlRGV0ZWN0b3JSZWYpIHt9XG4gIC8qKlxuICAgKiBVbCBsaXN0IG9mIGVsZW1lbnRzXG4gICAqL1xuICBAVmlld0NoaWxkKCdyZXN1bHRzTGlzdCcpIHJlc3VsdHNMaXN0RWxlbWVudDogRWxlbWVudFJlZjtcblxuICAvKipcbiAgICogaW5wdXQgY29udHJvbFxuICAgKi9cbiAgQFZpZXdDaGlsZCgnaW5wdXQnKSBpbnB1dDogRWxlbWVudFJlZjtcblxuICAvKipcbiAgICogQWxsb3cgdG8gaW5zZXJ0IGEgY3VzdG9taXplZCB0ZW1wbGF0ZSBmb3Igc3VnZ2VzdGlvbnMgdG8gdXNlXG4gICAqL1xuICBASW5wdXQoKSBpdGVtVGVtcGxhdGU6IFRlbXBsYXRlUmVmPGFueT47XG5cbiAgLyoqXG4gICAqIFRoZSBkYXRhIG1vZGVsIHRoYXQgaGFzIHRoZSBzZWxlY3RlZCBpdGVtXG4gICAqL1xuICBwdWJsaWMgbW9kZWw6IFNEU1NlbGVjdGVkSXRlbU1vZGVsO1xuXG4gIC8qKlxuICAgKiBDb25maWd1cmF0aW9uIGZvciB0aGUgQXV0b2NvbXBsZXRlIGNvbnRyb2xcbiAgICovXG4gIEBJbnB1dCgpXG4gIHB1YmxpYyBjb25maWd1cmF0aW9uOiBTRFNBdXRvY29tcGxldGVTZWFyY2hDb25maWd1cmF0aW9uO1xuXG4gIC8qKlxuICAgKiBJbnN0YW5jZSBvZiB0aGUgU2FtSGllcmNhcmNoaWNhbFNlcnZpY2VJbnRlcmZhY2UgcHJvdmlkZWRcbiAgICovXG4gIEBJbnB1dCgpXG4gIHB1YmxpYyBzZXJ2aWNlOiBTRFNBdXRvY29tcGxldGVTZXJ2aWNlSW50ZXJmYWNlO1xuXG4gIC8qKlxuICAgKiBUaW1lciBpZCBmb3IgdGhlIHRpbWVyIGF3YWl0aW5nIHRoZSBzZXJ2aWNlIGNhbGwgZm9yIG1vcmUgdHlwZWluZ1xuICAgKi9cbiAgcHJpdmF0ZSB0aW1lb3V0TnVtYmVyOiBudW1iZXI7XG5cbiAgLyoqXG4gICAqICByZXN1bHQgc2V0IHRvIGJlIHJlbmRlcmVkXG4gICAqL1xuICByZXN1bHRzOiBvYmplY3RbXTtcblxuICAvKipcbiAgICogbWF4IG51bWJlciBvZiByZXN1bHRzIHRvIGJlIHNob3duXG4gICAqL1xuICBwcml2YXRlIG1heFJlc3VsdHM6IG51bWJlcjtcblxuICAvKipcbiAgICogc2VsZWN0ZWQgaW5kZXhcbiAgICovXG4gIHB1YmxpYyBoaWdobGlnaHRlZEluZGV4OiBudW1iZXIgPSAwO1xuXG4gIC8qKlxuICAgKiBoaWdobGlnaHRlZCBvYmplY3QgaW4gZHJvcCBkb3duXG4gICAqL1xuICBwcml2YXRlIGhpZ2hsaWdodGVkSXRlbTogb2JqZWN0O1xuXG4gIC8qKlxuICAgKiB2YWx1ZSBvZiB0aGUgaW5wdXQgZmllbGRcbiAgICovXG4gIHB1YmxpYyBpbnB1dFZhbHVlOiBzdHJpbmcgPSAnJztcblxuICAvKipcbiAgICogUHJvcHJ0eSBiZWluZyBzZXQgb24gdGhlIG9iamVjdCBpcyBoaWdobGlnaHRlZFxuICAgKi9cbiAgcHJpdmF0ZSBIaWdobGlnaHRlZFByb3BlcnR5TmFtZSA9ICdoaWdobGlnaHRlZCc7XG5cbiAgcHVibGljIHNob3dMb2FkOiBib29sZWFuID0gdHJ1ZTtcblxuICAvKipcbiAgICogU2VhcmNoIHN0cmluZ1xuICAgKi9cbiAgcHJpdmF0ZSBzZWFyY2hTdHJpbmc6IHN0cmluZyA9IG51bGw7XG5cbiAgLyoqXG4gICAqIE1lc3NhZ2UgYW5ub3VuY2VkIGJ5IHNjcmVlbiByZWFkZXJzIHdoZW5cbiAgICogYXV0b2NvbXBsZXRlIHJlc3VsdHMgYXJlIHVwZGF0ZWQgb3IgbmV3IGl0ZW1cbiAgICogaXMgaGlnaGxpZ2h0ZWRcbiAgICovXG4gIHB1YmxpYyBzck9ubHlUZXh0OiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIFRvIG1ha2UgaW5wdXQgcmVhZG9ubHlcbiAgICovXG4gIEBJbnB1dCgpIHB1YmxpYyBpbnB1dFJlYWRPbmx5ID0gZmFsc2U7XG5cbiAgLyoqXG4gICAqIFVzZWQgdG8gc3RvcmUgc2VsZWN0ZWQgaXRlbXNcbiAgICovXG4gIGl0ZW1zID0gW107XG4gIC8qKlxuICAgKiBTdG9yZWQgRXZlbnQgZm9yIENvbnRyb2xWYWx1ZUFjY2Vzc29yXG4gICAqL1xuICBwdWJsaWMgb25Ub3VjaGVkQ2FsbGJhY2s6ICgpID0+IHZvaWQgPSAoKSA9PiBudWxsO1xuXG4gIC8qKlxuICAgKiBTdG9yZWQgRXZlbnQgZm9yIENvbnRyb2xWYWx1ZUFjY2Vzc29yXG4gICAqL1xuICBwdWJsaWMgcHJvcG9nYXRlQ2hhbmdlOiAoXzogYW55KSA9PiB2b2lkID0gKF86IGFueSkgPT4gbnVsbDtcblxuICBASW5wdXQoKVxuICBwdWJsaWMgZGlzYWJsZWQ6IGJvb2xlYW47XG5cbiAgcHJpdmF0ZSByZXN1bHRzQXZhaWxhYmxlTWVzc2FnZTogc3RyaW5nID1cbiAgICAnIHJlc3VsdHMgYXZhaWxhYmxlLiBVc2UgdXAgYW5kIGRvd24gYXJyb3dzXFxcbiAgdG8gc2Nyb2xsIHRocm91Z2ggcmVzdWx0cy4gSGl0IGVudGVyIHRvIHNlbGVjdC4nO1xuXG4gIHByaXZhdGUgaW5kZXggPSAwO1xuICAvKipcbiAgICogR2V0cyB0aGUgc3RyaW5nIHZhbHVlIGZyb20gdGhlIHNwZWNpZmVkIHByb3BlcnRpZXMgb2YgYW4gb2JqZWN0XG4gICAqIEBwYXJhbSBvYmplY3RcbiAgICogQHBhcmFtIHByb3BlcnR5RmllbGRzIGNvbW1hIHNlcGVyYXRlZCBsaXN0IHdpdGggcGVyaW9kcyBkZXB0aCBvZiBvYmplY3RcbiAgICovXG4gIGdldE9iamVjdFZhbHVlKG9iamVjdDogT2JqZWN0LCBwcm9wZXJ0eUZpZWxkczogc3RyaW5nKTogc3RyaW5nIHtcbiAgICBsZXQgdmFsdWUgPSAnJztcbiAgICBsZXQgY3VycmVudCA9IG9iamVjdDtcbiAgICBsZXQgZmllbGRTcGxpdCA9IHByb3BlcnR5RmllbGRzLnNwbGl0KCcsJyk7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBmaWVsZFNwbGl0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICBsZXQgZmllbGRWYWx1ZSA9IGZpZWxkU3BsaXRbaV07XG4gICAgICBsZXQgZmllbGRQYXJ0U3BsaXQgPSBmaWVsZFZhbHVlLnNwbGl0KCcuJyk7XG4gICAgICBmb3IgKGxldCBqID0gMDsgaiA8IGZpZWxkUGFydFNwbGl0Lmxlbmd0aDsgaisrKSB7XG4gICAgICAgIGxldCBmaWVsZENoZWNrVmFsdWUgPSBmaWVsZFBhcnRTcGxpdFtqXTtcbiAgICAgICAgaWYgKGN1cnJlbnQpIHtcbiAgICAgICAgICBjdXJyZW50ID0gY3VycmVudFtmaWVsZENoZWNrVmFsdWVdO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChjdXJyZW50KSB7XG4gICAgICAgIHZhbHVlICs9IGN1cnJlbnQudG9TdHJpbmcoKSArICcgJztcbiAgICAgIH1cbiAgICAgIGN1cnJlbnQgPSBvYmplY3Q7XG4gICAgfVxuICAgIHJldHVybiB2YWx1ZS50cmltKCk7XG4gIH1cblxuICAvKipcbiAgICogRGV0ZXJtaW5lcyBpZiB0aGUgZHJvcGRvd24gc2hvdWxkIGJlIHNob3duXG4gICAqL1xuICBwdWJsaWMgc2hvd1Jlc3VsdHMgPSBmYWxzZTtcblxuICAvKipcbiAgICogQ2xlYXJzIHRoZSBpbnB1dCBmaWVsZHMgYW5kIHZhbHVlXG4gICAqL1xuICBwdWJsaWMgY2xlYXJJbnB1dCgpOiB2b2lkIHtcbiAgICB0aGlzLmlucHV0VmFsdWUgPSAnJztcbiAgICB0aGlzLm9uVG91Y2hlZENhbGxiYWNrKCk7XG4gICAgdGhpcy5jbGVhckFuZEhpZGVSZXN1bHRzKCk7XG4gIH1cblxuICAvKipcbiAgICpcbiAgICogQHBhcmFtIGV2ZW50XG4gICAqL1xuICBjaGVja0ZvckZvY3VzKGV2ZW50KTogdm9pZCB7XG4gICAgdGhpcy5mb2N1c1JlbW92ZWQoKTtcbiAgICB0aGlzLnNob3dSZXN1bHRzID0gZmFsc2U7XG4gIH1cblxuICAvKipcbiAgICpcbiAgICovXG4gIHByaXZhdGUgZm9jdXNSZW1vdmVkKCkge1xuICAgIGlmICh0aGlzLmNvbmZpZ3VyYXRpb24pIHtcbiAgICAgIGlmICh0aGlzLmNvbmZpZ3VyYXRpb24uc2VsZWN0aW9uTW9kZSA9PT0gU2VsZWN0aW9uTW9kZS5TSU5HTEUpIHtcbiAgICAgICAgaWYgKHRoaXMubW9kZWwuaXRlbXMubGVuZ3RoID4gMCkge1xuICAgICAgICAgIGlmICh0aGlzLmlucHV0VmFsdWUubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICBTRFNTZWxlY3RlZEl0ZW1Nb2RlbEhlbHBlci5jbGVhckl0ZW1zKHRoaXMubW9kZWwuaXRlbXMpO1xuICAgICAgICAgICAgdGhpcy5wcm9wb2dhdGVDaGFuZ2UodGhpcy5tb2RlbCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuaW5wdXRWYWx1ZSA9IHRoaXMuZ2V0T2JqZWN0VmFsdWUoXG4gICAgICAgICAgICAgIHRoaXMubW9kZWwuaXRlbXNbMF0sXG4gICAgICAgICAgICAgIHRoaXMuY29uZmlndXJhdGlvbi5wcmltYXJ5VGV4dEZpZWxkXG4gICAgICAgICAgICApO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5pbnB1dFZhbHVlID0gJyc7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuaW5wdXRWYWx1ZSA9ICcnO1xuICAgIH1cbiAgfVxuXG4gIG9ua2V5cHJlc3MoZXYpIHtcbiAgICByZXR1cm4gdGhpcy5jb25maWd1cmF0aW9uLmlucHV0UmVhZE9ubHkgPyBmYWxzZSA6IHRydWU7XG4gIH1cbiAgdGV4dENoYW5nZShldmVudCkge1xuICAgIGlmICghdGhpcy5jb25maWd1cmF0aW9uLmlzVGFnTW9kZUVuYWJsZWQpIHtcbiAgICAgIC8vIGllIDExIHBsYWNlaG9sZGVycyB3aWxsIGluY29ycmVjdGx5IHRyaWdnZXIgaW5wdXQgZXZlbnRzIChrbm93biBidWcpXG4gICAgICAvLyBpZiBpbnB1dCBpc24ndCBhY3RpdmUgZWxlbWVudCB0aGVuIGRvbid0IGRvIGFueXRoaW5nXG4gICAgICBpZiAoZXZlbnQudGFyZ2V0ICE9IGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQpIHtcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgY29uc3Qgc2VhcmNoU3RyaW5nID0gZXZlbnQudGFyZ2V0LnZhbHVlIHx8ICcnO1xuICAgICAgdGhpcy5nZXRSZXN1bHRzKHNlYXJjaFN0cmluZyk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEV2ZW50IG1ldGhvZCB1c2VkIHdoZW4gZm9jdXMgaXMgZ2FpbmVkIHRvIHRoZSBpbnB1dFxuICAgKi9cbiAgaW5wdXRGb2N1c0hhbmRsZXIoKTogdm9pZCB7XG4gICAgaWYgKCF0aGlzLmNvbmZpZ3VyYXRpb24uaXNUYWdNb2RlRW5hYmxlZCkge1xuICAgICAgaWYgKHRoaXMuY29uZmlndXJhdGlvbi5mb2N1c0luU2VhcmNoKSB7XG4gICAgICAgIHRoaXMuZ2V0UmVzdWx0cyh0aGlzLmlucHV0VmFsdWUgfHwgJycpO1xuICAgICAgfVxuICAgICAgdGhpcy5vblRvdWNoZWRDYWxsYmFjaygpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBLZXkgZXZlbnRcbiAgICogQHBhcmFtIGV2ZW50XG4gICAqL1xuICBvbktleWRvd24oZXZlbnQpOiB2b2lkIHtcbiAgICBpZiAoS2V5SGVscGVyLmlzKEtFWVMuVEFCLCBldmVudCkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9IGVsc2UgaWYgKEtleUhlbHBlci5pcyhLRVlTLkJBQ0tTUEFDRSwgZXZlbnQpKSB7XG4gICAgICBpZiAodGhpcy5jb25maWd1cmF0aW9uLmlucHV0UmVhZE9ubHkpIHtcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKEtleUhlbHBlci5pcyhLRVlTLkRPV04sIGV2ZW50KSkge1xuICAgICAgdGhpcy5vbkFycm93RG93bigpO1xuICAgIH0gZWxzZSBpZiAoS2V5SGVscGVyLmlzKEtFWVMuVVAsIGV2ZW50KSkge1xuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgIHRoaXMub25BcnJvd1VwKCk7XG4gICAgfSBlbHNlIGlmIChLZXlIZWxwZXIuaXMoS0VZUy5FTlRFUiwgZXZlbnQpICYmIHRoaXMuaGlnaGxpZ2h0ZWRJbmRleCA+PSAwKSB7XG4gICAgICBpZiAodGhpcy5jb25maWd1cmF0aW9uLmlzVGFnTW9kZUVuYWJsZWQpIHtcbiAgICAgICAgY29uc3QgdmFsID0gdGhpcy5jcmVhdGVGcmVlVGV4dEl0ZW0oKTtcbiAgICAgICAgdGhpcy5zZWxlY3RJdGVtKHZhbCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLnNlbGVjdEl0ZW0odGhpcy5oaWdobGlnaHRlZEl0ZW0pO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoS2V5SGVscGVyLmlzKEtFWVMuRU5URVIsIGV2ZW50KSAmJiB0aGlzLmhpZ2hsaWdodGVkSW5kZXggPCAwKSB7XG4gICAgICBjb25zdCB2YWwgPSB0aGlzLmNyZWF0ZUZyZWVUZXh0SXRlbSgpO1xuICAgICAgdGhpcy5zZWxlY3RJdGVtKHZhbCk7XG4gICAgfSBlbHNlIGlmIChLZXlIZWxwZXIuaXMoS0VZUy5FU0MsIGV2ZW50KSkge1xuICAgICAgaWYgKHRoaXMuc2hvd1Jlc3VsdHMpIHtcbiAgICAgICAgdGhpcy5jbGVhckFuZEhpZGVSZXN1bHRzKCk7XG4gICAgICAgIGlmIChldmVudC5zdG9wUHJvcGFnYXRpb24pIHtcbiAgICAgICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBzZWxlY3RzIHRoZSBpdGVtIGFkZGluZyBpdCB0byB0aGUgbW9kZWwgYW5kIGNsb3NlcyB0aGUgcmVzdWx0c1xuICAgKiBAcGFyYW0gaXRlbVxuICAgKi9cbiAgcHVibGljIHNlbGVjdEl0ZW0oaXRlbTogb2JqZWN0KTogdm9pZCB7XG4gICAgU0RTU2VsZWN0ZWRJdGVtTW9kZWxIZWxwZXIuYWRkSXRlbShcbiAgICAgIGl0ZW0sXG4gICAgICB0aGlzLmNvbmZpZ3VyYXRpb24ucHJpbWFyeUtleUZpZWxkLFxuICAgICAgdGhpcy5jb25maWd1cmF0aW9uLnNlbGVjdGlvbk1vZGUsXG4gICAgICB0aGlzLml0ZW1zXG4gICAgKTtcblxuICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgdGhpcy5tb2RlbC5pdGVtcyA9IFsuLi50aGlzLml0ZW1zXTtcbiAgICAgIHRoaXMucHJvcG9nYXRlQ2hhbmdlKHRoaXMubW9kZWwpO1xuICAgIH0sIDApO1xuICAgIGxldCBtZXNzYWdlID0gdGhpcy5nZXRPYmplY3RWYWx1ZShcbiAgICAgIGl0ZW0sXG4gICAgICB0aGlzLmNvbmZpZ3VyYXRpb24ucHJpbWFyeVRleHRGaWVsZFxuICAgICk7XG4gICAgdGhpcy5pbnB1dFZhbHVlID0gbWVzc2FnZTtcbiAgICB0aGlzLmZvY3VzUmVtb3ZlZCgpO1xuICAgIHRoaXMuc2hvd1Jlc3VsdHMgPSBmYWxzZTtcbiAgfVxuXG4gIC8qKlxuICAgKiAgY2xlYXJzIHRoZSByZXN1bHRzIGFuZCBjbG9zZXMgcmVzdWx0IGRyb3AgZG93blxuICAgKi9cbiAgcHJpdmF0ZSBjbGVhckFuZEhpZGVSZXN1bHRzKCk6IHZvaWQge1xuICAgIHRoaXMucmVzdWx0cyA9IFtdO1xuICAgIHRoaXMuc2hvd1Jlc3VsdHMgPSBmYWxzZTtcbiAgICB0aGlzLmZvY3VzUmVtb3ZlZCgpO1xuICB9XG5cbiAgLyoqXG4gICAqICBoYW5kbGVzIHRoZSBhcnJvdyB1cCBrZXkgZXZlbnRcbiAgICovXG4gIHByaXZhdGUgb25BcnJvd1VwKCk6IHZvaWQge1xuICAgIGlmICh0aGlzLnJlc3VsdHMgJiYgdGhpcy5yZXN1bHRzLmxlbmd0aCA+IDApIHtcbiAgICAgIGlmICh0aGlzLmhpZ2hsaWdodGVkSW5kZXggPj0gMCkge1xuICAgICAgICB0aGlzLmhpZ2hsaWdodGVkSW5kZXgtLTtcbiAgICAgICAgdGhpcy5zZXRIaWdobGlnaHRlZEl0ZW0odGhpcy5yZXN1bHRzW3RoaXMuaGlnaGxpZ2h0ZWRJbmRleF0pO1xuICAgICAgICB0aGlzLnNjcm9sbFNlbGVjdGVkSXRlbUludG9WaWV3KCk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqICBoYW5kbGVzIHRoZSBhcnJvdyBkb3duIGtleSBldmVudFxuICAgKi9cbiAgcHJpdmF0ZSBvbkFycm93RG93bigpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5yZXN1bHRzICYmIHRoaXMucmVzdWx0cy5sZW5ndGggPiAwKSB7XG4gICAgICBpZiAodGhpcy5oaWdobGlnaHRlZEluZGV4IDwgdGhpcy5yZXN1bHRzLmxlbmd0aCAtIDEpIHtcbiAgICAgICAgdGhpcy5oaWdobGlnaHRlZEluZGV4Kys7XG4gICAgICAgIHRoaXMuc2V0SGlnaGxpZ2h0ZWRJdGVtKHRoaXMucmVzdWx0c1t0aGlzLmhpZ2hsaWdodGVkSW5kZXhdKTtcbiAgICAgICAgdGhpcy5zY3JvbGxTZWxlY3RlZEl0ZW1JbnRvVmlldygpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHNob3dGcmVlVGV4dCgpIHtcbiAgICBpZiAodGhpcy5jb25maWd1cmF0aW9uLmlzRnJlZVRleHRFbmFibGVkKSB7XG4gICAgICBpZiAodGhpcy5pbnB1dFZhbHVlKSB7XG4gICAgICAgIGlmICh0aGlzLmlucHV0VmFsdWUubGVuZ3RoICE9PSAwKSB7XG4gICAgICAgICAgbGV0IGZvdW5kSXRlbSA9IGZhbHNlO1xuICAgICAgICAgIGlmICh0aGlzLnJlc3VsdHMpIHtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5yZXN1bHRzLmxlbmd0aCAmJiAhZm91bmRJdGVtOyBpKyspIHtcbiAgICAgICAgICAgICAgbGV0IGl0ZW0gPSB0aGlzLnJlc3VsdHNbaV07XG4gICAgICAgICAgICAgIGZvdW5kSXRlbSA9XG4gICAgICAgICAgICAgICAgaXRlbVt0aGlzLmNvbmZpZ3VyYXRpb24ucHJpbWFyeVRleHRGaWVsZF0gPT09IHRoaXMuaW5wdXRWYWx1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHRoaXMubW9kZWwuaXRlbXMubGVuZ3RoID4gMCAmJiAhZm91bmRJdGVtKSB7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubW9kZWwuaXRlbXMubGVuZ3RoICYmICFmb3VuZEl0ZW07IGkrKykge1xuICAgICAgICAgICAgICBsZXQgaXRlbSA9IHRoaXMubW9kZWwuaXRlbXNbaV07XG4gICAgICAgICAgICAgIGZvdW5kSXRlbSA9XG4gICAgICAgICAgICAgICAgaXRlbVt0aGlzLmNvbmZpZ3VyYXRpb24ucHJpbWFyeVRleHRGaWVsZF0gPT09IHRoaXMuaW5wdXRWYWx1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4gIWZvdW5kSXRlbTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHRoaXMuY29uZmlndXJhdGlvbi5pc0ZyZWVUZXh0RW5hYmxlZDtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIGNyZWF0ZUZyZWVUZXh0SXRlbSgpIHtcbiAgICBsZXQgaXRlbSA9IHsgdHlwZTogJ2N1c3RvbScgfTtcbiAgICBpdGVtW3RoaXMuY29uZmlndXJhdGlvbi5wcmltYXJ5VGV4dEZpZWxkXSA9IHRoaXMuaW5wdXRWYWx1ZTtcbiAgICBpdGVtW3RoaXMuY29uZmlndXJhdGlvbi5wcmltYXJ5S2V5RmllbGRdID0gdGhpcy5pbnB1dFZhbHVlO1xuICAgIHJldHVybiBpdGVtO1xuICB9XG5cbiAgLyoqXG4gICAqICBnZXRzIHRoZSBpbml0YWwgcmVzdWx0c1xuICAgKiBAcGFyYW0gc2VhcmNoU3RyaW5nXG4gICAqL1xuICBwcml2YXRlIGdldFJlc3VsdHMoc2VhcmNoU3RyaW5nOiBzdHJpbmcpOiB2b2lkIHtcbiAgICBpZiAoc2VhcmNoU3RyaW5nLmxlbmd0aCA+PSB0aGlzLmNvbmZpZ3VyYXRpb24ubWluaW11bUNoYXJhY3RlckNvdW50U2VhcmNoKSB7XG4gICAgICBpZiAoXG4gICAgICAgICF0aGlzLm1hdGNoUGFzdFNlYXJjaFN0cmluZyhzZWFyY2hTdHJpbmcpIHx8XG4gICAgICAgICh0aGlzLm1hdGNoUGFzdFNlYXJjaFN0cmluZyhzZWFyY2hTdHJpbmcpICYmICF0aGlzLnNob3dSZXN1bHRzKSB8fFxuICAgICAgICB0aGlzLm1hdGNoUGFzdFNlYXJjaFN0cmluZygnJylcbiAgICAgICkge1xuICAgICAgICB0aGlzLnNlYXJjaFN0cmluZyA9IHNlYXJjaFN0cmluZztcbiAgICAgICAgd2luZG93LmNsZWFyVGltZW91dCh0aGlzLnRpbWVvdXROdW1iZXIpO1xuICAgICAgICB0aGlzLnRpbWVvdXROdW1iZXIgPSB3aW5kb3cuc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgdGhpcy5zaG93TG9hZCA9IHRydWU7XG4gICAgICAgICAgdGhpcy5zZXJ2aWNlLmdldERhdGFCeVRleHQoMCwgc2VhcmNoU3RyaW5nKS5zdWJzY3JpYmUocmVzdWx0ID0+IHtcbiAgICAgICAgICAgIHRoaXMucmVzdWx0cyA9IHJlc3VsdC5pdGVtcztcbiAgICAgICAgICAgIHRoaXMuc2hvd0xvYWQgPSBmYWxzZTtcbiAgICAgICAgICAgIHRoaXMubWF4UmVzdWx0cyA9IHJlc3VsdC50b3RhbEl0ZW1zO1xuXG4gICAgICAgICAgICB0aGlzLmhpZ2hsaWdodGVkSW5kZXggPSB0aGlzLmNvbmZpZ3VyYXRpb24uaXNGcmVlVGV4dEVuYWJsZWRcbiAgICAgICAgICAgICAgPyAtMVxuICAgICAgICAgICAgICA6IDA7XG4gICAgICAgICAgICBpZiAoIXRoaXMuY29uZmlndXJhdGlvbi5pc0ZyZWVUZXh0RW5hYmxlZCkge1xuICAgICAgICAgICAgICB0aGlzLnNldEhpZ2hsaWdodGVkSXRlbSh0aGlzLnJlc3VsdHNbdGhpcy5oaWdobGlnaHRlZEluZGV4XSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLnNob3dSZXN1bHRzID0gdHJ1ZTtcbiAgICAgICAgICAgIHRoaXMuYWRkU2NyZWVuUmVhZGVyTWVzc2FnZShcbiAgICAgICAgICAgICAgdGhpcy5tYXhSZXN1bHRzICsgJyAnICsgdGhpcy5yZXN1bHRzQXZhaWxhYmxlTWVzc2FnZVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIHRoaXMuX2NoYW5nZURldGVjdG9yUmVmLm1hcmtGb3JDaGVjaygpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9LCB0aGlzLmNvbmZpZ3VyYXRpb24uZGVib3VuY2VUaW1lKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQ2hlY2tzIGlmIHRoZSBuZXcgc2VhcmNoIHN0cmluZyBtYXRjaGVzIHRoZSBvbGQgc2VhcmNoIHN0cmluZ1xuICAgKiBAcGFyYW0gc2VhcmNoU3RyaW5nXG4gICAqL1xuICBwcml2YXRlIG1hdGNoUGFzdFNlYXJjaFN0cmluZyhzZWFyY2hTdHJpbmc6IHN0cmluZykge1xuICAgIHJldHVybiB0aGlzLnNlYXJjaFN0cmluZyA9PT0gc2VhcmNoU3RyaW5nO1xuICB9XG5cbiAgLyoqXG4gICAqIGhpZ2hsaWdodHMgdGhlIGluZGV4IGJlaW5nIGhvdmVyZWRcbiAgICogQHBhcmFtIGluZGV4XG4gICAqL1xuICBsaXN0SXRlbUhvdmVyKGluZGV4OiBudW1iZXIpOiB2b2lkIHtcbiAgICB0aGlzLmhpZ2hsaWdodGVkSW5kZXggPSBpbmRleDtcbiAgICB0aGlzLnNldEhpZ2hsaWdodGVkSXRlbSh0aGlzLnJlc3VsdHNbdGhpcy5oaWdobGlnaHRlZEluZGV4XSk7XG4gIH1cblxuICAvKipcbiAgICogU2Nyb2xsIEV2ZW50IEhhbmRsZXIgKENhbGN1bGF0ZXMgaWYgbXByZSBpdGVtcyBzaG91bGQgYmUgYXNrZWQgZm9yIGZyb20gc2VydmljZSBvbiBzY3JvbGxpbmcgZG93bilcbiAgICovXG4gIG9uU2Nyb2xsKCkge1xuICAgIGlmICh0aGlzLm1heFJlc3VsdHMgPiB0aGlzLnJlc3VsdHMubGVuZ3RoKSB7XG4gICAgICBsZXQgc2Nyb2xsQXJlYUhlaWdodCA9IHRoaXMucmVzdWx0c0xpc3RFbGVtZW50Lm5hdGl2ZUVsZW1lbnQub2Zmc2V0SGVpZ2h0O1xuICAgICAgbGV0IHNjcm9sbFRvcFBvcyA9IHRoaXMucmVzdWx0c0xpc3RFbGVtZW50Lm5hdGl2ZUVsZW1lbnQuc2Nyb2xsVG9wO1xuICAgICAgbGV0IHNjcm9sbEFyZWFNYXhIZWlnaHQgPSB0aGlzLnJlc3VsdHNMaXN0RWxlbWVudC5uYXRpdmVFbGVtZW50XG4gICAgICAgIC5zY3JvbGxIZWlnaHQ7XG4gICAgICBpZiAoc2Nyb2xsVG9wUG9zICsgc2Nyb2xsQXJlYUhlaWdodCAqIDIgPj0gc2Nyb2xsQXJlYU1heEhlaWdodCkge1xuICAgICAgICB0aGlzLmdldEFkZGl0aW9uYWxSZXN1bHRzKCk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIGdldHMgbW9yZSByZXN1bHRzIGJhc2VkIHdoZW4gc2Nyb2xsaW5nIGFuZCBhZGRzIHRoZSBpdGVtc1xuICAgKi9cbiAgcHJpdmF0ZSBnZXRBZGRpdGlvbmFsUmVzdWx0cygpIHtcbiAgICB0aGlzLnNob3dMb2FkID0gdHJ1ZTtcbiAgICB0aGlzLnNlcnZpY2VcbiAgICAgIC5nZXREYXRhQnlUZXh0KHRoaXMucmVzdWx0cy5sZW5ndGgsIHRoaXMuc2VhcmNoU3RyaW5nKVxuICAgICAgLnN1YnNjcmliZShyZXN1bHQgPT4ge1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHJlc3VsdC5pdGVtcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIHRoaXMuYWRkUmVzdWx0KHJlc3VsdC5pdGVtc1tpXSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5zaG93TG9hZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLm1heFJlc3VsdHMgPSByZXN1bHQudG90YWxJdGVtcztcbiAgICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIGFkZHMgYSBzaW5nbGUgaXRlbSB0byB0aGUgbGlzdFxuICAgKiBAcGFyYW0gaXRlbVxuICAgKi9cbiAgcHJpdmF0ZSBhZGRSZXN1bHQoaXRlbTogb2JqZWN0KSB7XG4gICAgLy9hZGQgY2hlY2sgdG8gbWFrZSBzdXJlIGl0ZW0gZG9lcyBub3QgZXhpc3RcbiAgICB0aGlzLnJlc3VsdHMucHVzaChpdGVtKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBXaGVuIHBhZ2luZyB1cCBhbmQgZG93biB3aXRoIGFycm93IGtleSBpdCBzZXRzIHRoZSBoaWdobGlnaHRlZCBpdGVtIGludG8gdmlld1xuICAgKi9cbiAgcHJpdmF0ZSBzY3JvbGxTZWxlY3RlZEl0ZW1JbnRvVmlldygpIHtcbiAgICBpZiAodGhpcy5oaWdobGlnaHRlZEluZGV4ID49IDApIHtcbiAgICAgIGNvbnN0IHNlbGVjdGVkQ2hpbGQgPSB0aGlzLnJlc3VsdHNMaXN0RWxlbWVudC5uYXRpdmVFbGVtZW50LmNoaWxkcmVuW1xuICAgICAgICB0aGlzLmhpZ2hsaWdodGVkSW5kZXhcbiAgICAgIF07XG4gICAgICBzZWxlY3RlZENoaWxkLnNjcm9sbEludG9WaWV3KHtcbiAgICAgICAgYmVoYXZpb3I6ICdzbW9vdGgnLFxuICAgICAgICBibG9jazogJ25lYXJlc3QnLFxuICAgICAgICBpbmxpbmU6ICdzdGFydCdcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBTZXRzIHRoZSBoaWdobGlnaHRlZCBpdGVtIGJ5IGtleWJvYXJkIG9yIG1vdXNlb3ZlclxuICAgKiBAcGFyYW0gaXRlbVxuICAgKi9cbiAgcHJpdmF0ZSBzZXRIaWdobGlnaHRlZEl0ZW0oaXRlbTogT2JqZWN0KTogdm9pZCB7XG4gICAgaWYgKHRoaXMucmVzdWx0cyAmJiB0aGlzLnJlc3VsdHMubGVuZ3RoID4gMCkge1xuICAgICAgaWYgKHRoaXMuaGlnaGxpZ2h0ZWRJdGVtKSB7XG4gICAgICAgIHRoaXMuaGlnaGxpZ2h0ZWRJdGVtW3RoaXMuSGlnaGxpZ2h0ZWRQcm9wZXJ0eU5hbWVdID0gZmFsc2U7XG4gICAgICB9XG4gICAgICBsZXQgbWVzc2FnZSA9ICcnO1xuICAgICAgaWYgKGl0ZW0pIHtcbiAgICAgICAgdGhpcy5oaWdobGlnaHRlZEl0ZW0gPSBpdGVtO1xuICAgICAgICB0aGlzLmhpZ2hsaWdodGVkSXRlbVt0aGlzLkhpZ2hsaWdodGVkUHJvcGVydHlOYW1lXSA9IHRydWU7XG4gICAgICAgIG1lc3NhZ2UgPSBpdGVtW3RoaXMuY29uZmlndXJhdGlvbi5wcmltYXJ5VGV4dEZpZWxkXTtcbiAgICAgICAgaWYgKFxuICAgICAgICAgIHRoaXMuY29uZmlndXJhdGlvbi5zZWNvbmRhcnlUZXh0RmllbGQgJiZcbiAgICAgICAgICBpdGVtW3RoaXMuY29uZmlndXJhdGlvbi5zZWNvbmRhcnlUZXh0RmllbGRdXG4gICAgICAgICkge1xuICAgICAgICAgIG1lc3NhZ2UgKz0gJzogJyArIGl0ZW1bdGhpcy5jb25maWd1cmF0aW9uLnNlY29uZGFyeVRleHRGaWVsZF07XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuaGlnaGxpZ2h0ZWRJdGVtID0gdW5kZWZpbmVkO1xuICAgICAgICBtZXNzYWdlID0gJ05vIGl0ZW0gc2VsZWN0ZWQnO1xuICAgICAgfVxuICAgICAgdGhpcy5hZGRTY3JlZW5SZWFkZXJNZXNzYWdlKG1lc3NhZ2UpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBBZGRzIG1lc3NhZ2UgdG8gYmUgcmVhZCBieSBzY3JlZW4gcmVhZGVyXG4gICAqIEBwYXJhbSBtZXNzYWdlXG4gICAqL1xuICBwcml2YXRlIGFkZFNjcmVlblJlYWRlck1lc3NhZ2UobWVzc2FnZTogc3RyaW5nKSB7XG4gICAgdGhpcy5zck9ubHlUZXh0ID0gbWVzc2FnZTtcbiAgfVxuXG4gIHdyaXRlVmFsdWUob2JqOiBhbnkpOiB2b2lkIHtcbiAgICBpZiAob2JqIGluc3RhbmNlb2YgU0RTU2VsZWN0ZWRJdGVtTW9kZWwpIHtcbiAgICAgIHRoaXMubW9kZWwgPSBvYmogYXMgU0RTU2VsZWN0ZWRJdGVtTW9kZWw7XG4gICAgICB0aGlzLl9jaGFuZ2VEZXRlY3RvclJlZi5tYXJrRm9yQ2hlY2soKTtcbiAgICAgIGlmICh0aGlzLm1vZGVsLml0ZW1zLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICB0aGlzLmlucHV0VmFsdWUgPSAnJztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmICh0aGlzLmNvbmZpZ3VyYXRpb24uc2VsZWN0aW9uTW9kZSA9PT0gU2VsZWN0aW9uTW9kZS5TSU5HTEUpIHtcbiAgICAgICAgICB0aGlzLmlucHV0VmFsdWUgPSB0aGlzLmdldE9iamVjdFZhbHVlKFxuICAgICAgICAgICAgdGhpcy5tb2RlbC5pdGVtc1swXSxcbiAgICAgICAgICAgIHRoaXMuY29uZmlndXJhdGlvbi5wcmltYXJ5VGV4dEZpZWxkXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuICBnZXRDbGFzcygpIHtcbiAgICByZXR1cm4gdGhpcy5jb25maWd1cmF0aW9uLmlucHV0UmVhZE9ubHkgJiZcbiAgICAgIHRoaXMuY29uZmlndXJhdGlvbi5zZWxlY3Rpb25Nb2RlID09PSBTZWxlY3Rpb25Nb2RlLk1VTFRJUExFXG4gICAgICA/ICdoaWRlLWN1cnNvcidcbiAgICAgIDogJyc7XG4gIH1cblxuICByZWdpc3Rlck9uQ2hhbmdlKGZuOiBhbnkpOiB2b2lkIHtcbiAgICB0aGlzLnByb3BvZ2F0ZUNoYW5nZSA9IGZuO1xuICB9XG5cbiAgcmVnaXN0ZXJPblRvdWNoZWQoZm46IGFueSk6IHZvaWQge1xuICAgIHRoaXMub25Ub3VjaGVkQ2FsbGJhY2sgPSBmbjtcbiAgfVxuXG4gIHNldERpc2FibGVkU3RhdGUoaXNEaXNhYmxlZDogYm9vbGVhbik6IHZvaWQge1xuICAgIHRoaXMuZGlzYWJsZWQgPSBpc0Rpc2FibGVkO1xuICB9XG59XG4iXX0=