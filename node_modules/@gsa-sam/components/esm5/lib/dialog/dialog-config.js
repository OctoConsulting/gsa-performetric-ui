/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * Possible overrides for a dialog's position.
 * @record
 */
export function DialogPosition() { }
if (false) {
    /**
     * Override for the dialog's top position.
     * @type {?|undefined}
     */
    DialogPosition.prototype.top;
    /**
     * Override for the dialog's bottom position.
     * @type {?|undefined}
     */
    DialogPosition.prototype.bottom;
    /**
     * Override for the dialog's left position.
     * @type {?|undefined}
     */
    DialogPosition.prototype.left;
    /**
     * Override for the dialog's right position.
     * @type {?|undefined}
     */
    DialogPosition.prototype.right;
}
/**
 * Configuration for opening a modal dialog with the SdsDialog service.
 * @template D
 */
var /**
 * Configuration for opening a modal dialog with the SdsDialog service.
 * @template D
 */
SdsDialogConfig = /** @class */ (function () {
    function SdsDialogConfig() {
        /**
         * The ARIA role of the dialog element.
         */
        this.role = 'dialog';
        /**
         * Custom class for the overlay pane.
         */
        this.panelClass = '';
        /**
         * Whether the dialog has a backdrop.
         */
        this.hasBackdrop = true;
        /**
         * Custom class for the backdrop,
         */
        this.backdropClass = '';
        /**
         * Whether the user can use escape or clicking on the backdrop to close the modal.
         */
        this.disableClose = false;
        /**
         * Width of the dialog.
         */
        this.width = '';
        /**
         * Height of the dialog.
         */
        this.height = '';
        /**
         * Max-width of the dialog. If a number is provided, pixel units are assumed. Defaults to 80vw
         */
        this.maxWidth = '80vw';
        /**
         * Data being injected into the child component.
         */
        this.data = null;
        /**
         * ID of the element that describes the dialog.
         */
        this.ariaDescribedBy = null;
        /**
         * Aria label to assign to the dialog element
         */
        this.ariaLabel = null;
        /**
         * Whether the dialog should focus the first focusable element on open.
         */
        this.autoFocus = true;
        /**
         * Whether the dialog should restore focus to the
         * previously-focused element, after it's closed.
         */
        this.restoreFocus = true;
        /**
         * Whether the dialog should close when the user goes backwards/forwards in history.
         * Note that this usually doesn't include clicking on links (unless the user is using
         * the `HashLocationStrategy`).
         */
        this.closeOnNavigation = true;
    }
    return SdsDialogConfig;
}());
/**
 * Configuration for opening a modal dialog with the SdsDialog service.
 * @template D
 */
export { SdsDialogConfig };
if (false) {
    /**
     * Where the attached component should live in Angular's *logical* component tree.
     * This affects what is available for injection and the change detection order for the
     * component instantiated inside of the dialog. This does not affect where the dialog
     * content will be rendered.
     * @type {?}
     */
    SdsDialogConfig.prototype.viewContainerRef;
    /**
     * ID for the dialog. If omitted, a unique one will be generated.
     * @type {?}
     */
    SdsDialogConfig.prototype.id;
    /**
     * The ARIA role of the dialog element.
     * @type {?}
     */
    SdsDialogConfig.prototype.role;
    /**
     * Custom class for the overlay pane.
     * @type {?}
     */
    SdsDialogConfig.prototype.panelClass;
    /**
     * Whether the dialog has a backdrop.
     * @type {?}
     */
    SdsDialogConfig.prototype.hasBackdrop;
    /**
     * Custom class for the backdrop,
     * @type {?}
     */
    SdsDialogConfig.prototype.backdropClass;
    /**
     * Whether the user can use escape or clicking on the backdrop to close the modal.
     * @type {?}
     */
    SdsDialogConfig.prototype.disableClose;
    /**
     * Width of the dialog.
     * @type {?}
     */
    SdsDialogConfig.prototype.width;
    /**
     * Height of the dialog.
     * @type {?}
     */
    SdsDialogConfig.prototype.height;
    /**
     * Min-width of the dialog. If a number is provided, pixel units are assumed.
     * @type {?}
     */
    SdsDialogConfig.prototype.minWidth;
    /**
     * Min-height of the dialog. If a number is provided, pixel units are assumed.
     * @type {?}
     */
    SdsDialogConfig.prototype.minHeight;
    /**
     * Max-width of the dialog. If a number is provided, pixel units are assumed. Defaults to 80vw
     * @type {?}
     */
    SdsDialogConfig.prototype.maxWidth;
    /**
     * Max-height of the dialog. If a number is provided, pixel units are assumed.
     * @type {?}
     */
    SdsDialogConfig.prototype.maxHeight;
    /**
     * Position overrides.
     * @type {?}
     */
    SdsDialogConfig.prototype.position;
    /**
     * Data being injected into the child component.
     * @type {?}
     */
    SdsDialogConfig.prototype.data;
    /**
     * Layout direction for the dialog's content.
     * @type {?}
     */
    SdsDialogConfig.prototype.direction;
    /**
     * ID of the element that describes the dialog.
     * @type {?}
     */
    SdsDialogConfig.prototype.ariaDescribedBy;
    /**
     * Aria label to assign to the dialog element
     * @type {?}
     */
    SdsDialogConfig.prototype.ariaLabel;
    /**
     * Whether the dialog should focus the first focusable element on open.
     * @type {?}
     */
    SdsDialogConfig.prototype.autoFocus;
    /**
     * Whether the dialog should restore focus to the
     * previously-focused element, after it's closed.
     * @type {?}
     */
    SdsDialogConfig.prototype.restoreFocus;
    /**
     * Scroll strategy to be used for the dialog.
     * @type {?}
     */
    SdsDialogConfig.prototype.scrollStrategy;
    /**
     * Whether the dialog should close when the user goes backwards/forwards in history.
     * Note that this usually doesn't include clicking on links (unless the user is using
     * the `HashLocationStrategy`).
     * @type {?}
     */
    SdsDialogConfig.prototype.closeOnNavigation;
    /**
     * Wheter the dialog its an alert
     * @type {?}
     */
    SdsDialogConfig.prototype.alert;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGlhbG9nLWNvbmZpZy5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Bnc2Etc2FtL2NvbXBvbmVudHMvIiwic291cmNlcyI6WyJsaWIvZGlhbG9nL2RpYWxvZy1jb25maWcudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFRQSxvQ0FZQzs7Ozs7O0lBVkMsNkJBQWE7Ozs7O0lBR2IsZ0NBQWdCOzs7OztJQUdoQiw4QkFBYzs7Ozs7SUFHZCwrQkFBZTs7Ozs7O0FBTWpCOzs7OztJQUFBOzs7O1FBY0UsU0FBSSxHQUFnQixRQUFRLENBQUM7Ozs7UUFHN0IsZUFBVSxHQUF1QixFQUFFLENBQUM7Ozs7UUFHcEMsZ0JBQVcsR0FBSSxJQUFJLENBQUM7Ozs7UUFHcEIsa0JBQWEsR0FBSSxFQUFFLENBQUM7Ozs7UUFHcEIsaUJBQVksR0FBSSxLQUFLLENBQUM7Ozs7UUFHdEIsVUFBSyxHQUFJLEVBQUUsQ0FBQzs7OztRQUdaLFdBQU0sR0FBSSxFQUFFLENBQUM7Ozs7UUFTYixhQUFRLEdBQXFCLE1BQU0sQ0FBQzs7OztRQVNwQyxTQUFJLEdBQWMsSUFBSSxDQUFDOzs7O1FBTXZCLG9CQUFlLEdBQW1CLElBQUksQ0FBQzs7OztRQUd2QyxjQUFTLEdBQW1CLElBQUksQ0FBQzs7OztRQUdqQyxjQUFTLEdBQUksSUFBSSxDQUFDOzs7OztRQU1sQixpQkFBWSxHQUFJLElBQUksQ0FBQzs7Ozs7O1FBVXJCLHNCQUFpQixHQUFJLElBQUksQ0FBQztJQU01QixDQUFDO0lBQUQsc0JBQUM7QUFBRCxDQUFDLEFBcEZELElBb0ZDOzs7Ozs7Ozs7Ozs7OztJQTVFQywyQ0FBb0M7Ozs7O0lBR3BDLDZCQUFZOzs7OztJQUdaLCtCQUE2Qjs7Ozs7SUFHN0IscUNBQW9DOzs7OztJQUdwQyxzQ0FBb0I7Ozs7O0lBR3BCLHdDQUFvQjs7Ozs7SUFHcEIsdUNBQXNCOzs7OztJQUd0QixnQ0FBWTs7Ozs7SUFHWixpQ0FBYTs7Ozs7SUFHYixtQ0FBMkI7Ozs7O0lBRzNCLG9DQUE0Qjs7Ozs7SUFHNUIsbUNBQW9DOzs7OztJQUdwQyxvQ0FBNEI7Ozs7O0lBRzVCLG1DQUEwQjs7Ozs7SUFHMUIsK0JBQXVCOzs7OztJQUd2QixvQ0FBc0I7Ozs7O0lBR3RCLDBDQUF1Qzs7Ozs7SUFHdkMsb0NBQWlDOzs7OztJQUdqQyxvQ0FBa0I7Ozs7OztJQU1sQix1Q0FBcUI7Ozs7O0lBR3JCLHlDQUFnQzs7Ozs7OztJQU9oQyw0Q0FBMEI7Ozs7O0lBSzFCLGdDQUFxQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7Vmlld0NvbnRhaW5lclJlZn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge0RpcmVjdGlvbn0gZnJvbSAnQGFuZ3VsYXIvY2RrL2JpZGknO1xuaW1wb3J0IHtTY3JvbGxTdHJhdGVneX0gZnJvbSAnQGFuZ3VsYXIvY2RrL292ZXJsYXknO1xuXG4vKiogVmFsaWQgQVJJQSByb2xlcyBmb3IgYSBkaWFsb2cgZWxlbWVudC4gKi9cbmV4cG9ydCB0eXBlIERpYWxvZ1JvbGUgPSAnZGlhbG9nJyB8ICdhbGVydGRpYWxvZyc7XG5cbi8qKiBQb3NzaWJsZSBvdmVycmlkZXMgZm9yIGEgZGlhbG9nJ3MgcG9zaXRpb24uICovXG5leHBvcnQgaW50ZXJmYWNlIERpYWxvZ1Bvc2l0aW9uIHtcbiAgLyoqIE92ZXJyaWRlIGZvciB0aGUgZGlhbG9nJ3MgdG9wIHBvc2l0aW9uLiAqL1xuICB0b3A/OiBzdHJpbmc7XG5cbiAgLyoqIE92ZXJyaWRlIGZvciB0aGUgZGlhbG9nJ3MgYm90dG9tIHBvc2l0aW9uLiAqL1xuICBib3R0b20/OiBzdHJpbmc7XG5cbiAgLyoqIE92ZXJyaWRlIGZvciB0aGUgZGlhbG9nJ3MgbGVmdCBwb3NpdGlvbi4gKi9cbiAgbGVmdD86IHN0cmluZztcblxuICAvKiogT3ZlcnJpZGUgZm9yIHRoZSBkaWFsb2cncyByaWdodCBwb3NpdGlvbi4gKi9cbiAgcmlnaHQ/OiBzdHJpbmc7XG59XG5cbi8qKlxuICogQ29uZmlndXJhdGlvbiBmb3Igb3BlbmluZyBhIG1vZGFsIGRpYWxvZyB3aXRoIHRoZSBTZHNEaWFsb2cgc2VydmljZS5cbiAqL1xuZXhwb3J0IGNsYXNzIFNkc0RpYWxvZ0NvbmZpZzxEID0gYW55PiB7XG5cbiAgLyoqXG4gICAqIFdoZXJlIHRoZSBhdHRhY2hlZCBjb21wb25lbnQgc2hvdWxkIGxpdmUgaW4gQW5ndWxhcidzICpsb2dpY2FsKiBjb21wb25lbnQgdHJlZS5cbiAgICogVGhpcyBhZmZlY3RzIHdoYXQgaXMgYXZhaWxhYmxlIGZvciBpbmplY3Rpb24gYW5kIHRoZSBjaGFuZ2UgZGV0ZWN0aW9uIG9yZGVyIGZvciB0aGVcbiAgICogY29tcG9uZW50IGluc3RhbnRpYXRlZCBpbnNpZGUgb2YgdGhlIGRpYWxvZy4gVGhpcyBkb2VzIG5vdCBhZmZlY3Qgd2hlcmUgdGhlIGRpYWxvZ1xuICAgKiBjb250ZW50IHdpbGwgYmUgcmVuZGVyZWQuXG4gICAqL1xuICB2aWV3Q29udGFpbmVyUmVmPzogVmlld0NvbnRhaW5lclJlZjtcblxuICAvKiogSUQgZm9yIHRoZSBkaWFsb2cuIElmIG9taXR0ZWQsIGEgdW5pcXVlIG9uZSB3aWxsIGJlIGdlbmVyYXRlZC4gKi9cbiAgaWQ/OiBzdHJpbmc7XG5cbiAgLyoqIFRoZSBBUklBIHJvbGUgb2YgdGhlIGRpYWxvZyBlbGVtZW50LiAqL1xuICByb2xlPzogRGlhbG9nUm9sZSA9ICdkaWFsb2cnO1xuXG4gIC8qKiBDdXN0b20gY2xhc3MgZm9yIHRoZSBvdmVybGF5IHBhbmUuICovXG4gIHBhbmVsQ2xhc3M/OiBzdHJpbmcgfCBzdHJpbmdbXSA9ICcnO1xuXG4gIC8qKiBXaGV0aGVyIHRoZSBkaWFsb2cgaGFzIGEgYmFja2Ryb3AuICovXG4gIGhhc0JhY2tkcm9wPyA9IHRydWU7XG5cbiAgLyoqIEN1c3RvbSBjbGFzcyBmb3IgdGhlIGJhY2tkcm9wLCAqL1xuICBiYWNrZHJvcENsYXNzPyA9ICcnO1xuXG4gIC8qKiBXaGV0aGVyIHRoZSB1c2VyIGNhbiB1c2UgZXNjYXBlIG9yIGNsaWNraW5nIG9uIHRoZSBiYWNrZHJvcCB0byBjbG9zZSB0aGUgbW9kYWwuICovXG4gIGRpc2FibGVDbG9zZT8gPSBmYWxzZTtcblxuICAvKiogV2lkdGggb2YgdGhlIGRpYWxvZy4gKi9cbiAgd2lkdGg/ID0gJyc7XG5cbiAgLyoqIEhlaWdodCBvZiB0aGUgZGlhbG9nLiAqL1xuICBoZWlnaHQ/ID0gJyc7XG5cbiAgLyoqIE1pbi13aWR0aCBvZiB0aGUgZGlhbG9nLiBJZiBhIG51bWJlciBpcyBwcm92aWRlZCwgcGl4ZWwgdW5pdHMgYXJlIGFzc3VtZWQuICovXG4gIG1pbldpZHRoPzogbnVtYmVyIHwgc3RyaW5nO1xuXG4gIC8qKiBNaW4taGVpZ2h0IG9mIHRoZSBkaWFsb2cuIElmIGEgbnVtYmVyIGlzIHByb3ZpZGVkLCBwaXhlbCB1bml0cyBhcmUgYXNzdW1lZC4gKi9cbiAgbWluSGVpZ2h0PzogbnVtYmVyIHwgc3RyaW5nO1xuXG4gIC8qKiBNYXgtd2lkdGggb2YgdGhlIGRpYWxvZy4gSWYgYSBudW1iZXIgaXMgcHJvdmlkZWQsIHBpeGVsIHVuaXRzIGFyZSBhc3N1bWVkLiBEZWZhdWx0cyB0byA4MHZ3ICovXG4gIG1heFdpZHRoPzogbnVtYmVyIHwgc3RyaW5nID0gJzgwdncnO1xuXG4gIC8qKiBNYXgtaGVpZ2h0IG9mIHRoZSBkaWFsb2cuIElmIGEgbnVtYmVyIGlzIHByb3ZpZGVkLCBwaXhlbCB1bml0cyBhcmUgYXNzdW1lZC4gKi9cbiAgbWF4SGVpZ2h0PzogbnVtYmVyIHwgc3RyaW5nO1xuXG4gIC8qKiBQb3NpdGlvbiBvdmVycmlkZXMuICovXG4gIHBvc2l0aW9uPzogRGlhbG9nUG9zaXRpb247XG5cbiAgLyoqIERhdGEgYmVpbmcgaW5qZWN0ZWQgaW50byB0aGUgY2hpbGQgY29tcG9uZW50LiAqL1xuICBkYXRhPzogRCB8IG51bGwgPSBudWxsO1xuXG4gIC8qKiBMYXlvdXQgZGlyZWN0aW9uIGZvciB0aGUgZGlhbG9nJ3MgY29udGVudC4gKi9cbiAgZGlyZWN0aW9uPzogRGlyZWN0aW9uO1xuXG4gIC8qKiBJRCBvZiB0aGUgZWxlbWVudCB0aGF0IGRlc2NyaWJlcyB0aGUgZGlhbG9nLiAqL1xuICBhcmlhRGVzY3JpYmVkQnk/OiBzdHJpbmcgfCBudWxsID0gbnVsbDtcblxuICAvKiogQXJpYSBsYWJlbCB0byBhc3NpZ24gdG8gdGhlIGRpYWxvZyBlbGVtZW50ICovXG4gIGFyaWFMYWJlbD86IHN0cmluZyB8IG51bGwgPSBudWxsO1xuXG4gIC8qKiBXaGV0aGVyIHRoZSBkaWFsb2cgc2hvdWxkIGZvY3VzIHRoZSBmaXJzdCBmb2N1c2FibGUgZWxlbWVudCBvbiBvcGVuLiAqL1xuICBhdXRvRm9jdXM/ID0gdHJ1ZTtcblxuICAvKipcbiAgICogV2hldGhlciB0aGUgZGlhbG9nIHNob3VsZCByZXN0b3JlIGZvY3VzIHRvIHRoZVxuICAgKiBwcmV2aW91c2x5LWZvY3VzZWQgZWxlbWVudCwgYWZ0ZXIgaXQncyBjbG9zZWQuXG4gICAqL1xuICByZXN0b3JlRm9jdXM/ID0gdHJ1ZTtcblxuICAvKiogU2Nyb2xsIHN0cmF0ZWd5IHRvIGJlIHVzZWQgZm9yIHRoZSBkaWFsb2cuICovXG4gIHNjcm9sbFN0cmF0ZWd5PzogU2Nyb2xsU3RyYXRlZ3k7XG5cbiAgLyoqXG4gICAqIFdoZXRoZXIgdGhlIGRpYWxvZyBzaG91bGQgY2xvc2Ugd2hlbiB0aGUgdXNlciBnb2VzIGJhY2t3YXJkcy9mb3J3YXJkcyBpbiBoaXN0b3J5LlxuICAgKiBOb3RlIHRoYXQgdGhpcyB1c3VhbGx5IGRvZXNuJ3QgaW5jbHVkZSBjbGlja2luZyBvbiBsaW5rcyAodW5sZXNzIHRoZSB1c2VyIGlzIHVzaW5nXG4gICAqIHRoZSBgSGFzaExvY2F0aW9uU3RyYXRlZ3lgKS5cbiAgICovXG4gIGNsb3NlT25OYXZpZ2F0aW9uPyA9IHRydWU7XG5cbiAgLyoqXG4gICAqIFdoZXRlciB0aGUgZGlhbG9nIGl0cyBhbiBhbGVydFxuICAgKi9cbiAgYWxlcnQ/OiAnd2FybmluZycgfCAnaW5mbycgfCAnZXJyb3InO1xufVxuIl19