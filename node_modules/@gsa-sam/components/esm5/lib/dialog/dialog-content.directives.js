/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, Input, Optional, ElementRef, } from '@angular/core';
import { SdsDialogService } from './dialog';
import { SdsDialogRef } from './dialog-ref';
/**
 * Counter used to generate unique IDs for dialog elements.
 * @type {?}
 */
var dialogElementUid = 0;
/**
 * Button that will close the current dialog.
 */
var SdsDialogCloseDirective = /** @class */ (function () {
    function SdsDialogCloseDirective(dialogRef, _elementRef, _dialog) {
        this.dialogRef = dialogRef;
        this._elementRef = _elementRef;
        this._dialog = _dialog;
    }
    /**
     * @return {?}
     */
    SdsDialogCloseDirective.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        if (!this.dialogRef) {
            // When this directive is included in a dialog via TemplateRef (rather than being
            // in a Component), the DialogRef isn't available via injection because embedded
            // views cannot be given a custom injector. Instead, we look up the DialogRef by
            // ID. This must occur in `onInit`, as the ID binding for the dialog container won't
            // be resolved at constructor time.
            this.dialogRef = (/** @type {?} */ (getClosestDialog(this._elementRef, this._dialog.openDialogs)));
        }
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    SdsDialogCloseDirective.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        /** @type {?} */
        var proxiedChange = changes['_sdsDialogClose'] || changes['_sdsDialogCloseResult'];
        if (proxiedChange) {
            this.dialogResult = proxiedChange.currentValue;
        }
    };
    SdsDialogCloseDirective.decorators = [
        { type: Directive, args: [{
                    selector: "button[sds-dialog-close], button[sdsDialogClose]",
                    exportAs: 'sdsDialogClose',
                    // tslint:disable-next-line: use-host-property-decorator
                    host: {
                        '(click)': 'dialogRef.close(dialogResult)',
                        '[attr.aria-label]': 'ariaLabel || null',
                        'type': 'button',
                    }
                },] }
    ];
    /** @nocollapse */
    SdsDialogCloseDirective.ctorParameters = function () { return [
        { type: SdsDialogRef, decorators: [{ type: Optional }] },
        { type: ElementRef },
        { type: SdsDialogService }
    ]; };
    SdsDialogCloseDirective.propDecorators = {
        ariaLabel: [{ type: Input, args: ['aria-label',] }],
        dialogResult: [{ type: Input, args: ['sds-dialog-close',] }],
        _sdsDialogClose: [{ type: Input, args: ['sdsDialogClose',] }]
    };
    return SdsDialogCloseDirective;
}());
export { SdsDialogCloseDirective };
if (false) {
    /**
     * Screenreader label for the button.
     * @type {?}
     */
    SdsDialogCloseDirective.prototype.ariaLabel;
    /**
     * Dialog close input.
     * @type {?}
     */
    SdsDialogCloseDirective.prototype.dialogResult;
    /** @type {?} */
    SdsDialogCloseDirective.prototype._sdsDialogClose;
    /** @type {?} */
    SdsDialogCloseDirective.prototype.dialogRef;
    /**
     * @type {?}
     * @private
     */
    SdsDialogCloseDirective.prototype._elementRef;
    /**
     * @type {?}
     * @private
     */
    SdsDialogCloseDirective.prototype._dialog;
}
/**
 * Title of a dialog element. Stays fixed to the top of the dialog when scrolling.
 */
var SdsDialogTitleDirective = /** @class */ (function () {
    function SdsDialogTitleDirective(_dialogRef, _elementRef, _dialog) {
        this._dialogRef = _dialogRef;
        this._elementRef = _elementRef;
        this._dialog = _dialog;
        this.id = "sds-dialog-title-" + dialogElementUid++;
    }
    /**
     * @return {?}
     */
    SdsDialogTitleDirective.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (!this._dialogRef) {
            this._dialogRef = (/** @type {?} */ (getClosestDialog(this._elementRef, this._dialog.openDialogs)));
        }
        if (this._dialogRef) {
            Promise.resolve().then((/**
             * @return {?}
             */
            function () {
                /** @type {?} */
                var container = _this._dialogRef._containerInstance;
                if (container && !container._ariaLabelledBy) {
                    container._ariaLabelledBy = _this.id;
                }
            }));
        }
    };
    SdsDialogTitleDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[sds-dialog-title], [sdsDialogTitle]',
                    exportAs: 'sdsDialogTitle',
                    // tslint:disable-next-line: use-host-property-decorator
                    host: {
                        '[class.sds-dialog-title]': 'true',
                        '[id]': 'id',
                    },
                },] }
    ];
    /** @nocollapse */
    SdsDialogTitleDirective.ctorParameters = function () { return [
        { type: SdsDialogRef, decorators: [{ type: Optional }] },
        { type: ElementRef },
        { type: SdsDialogService }
    ]; };
    SdsDialogTitleDirective.propDecorators = {
        id: [{ type: Input }]
    };
    return SdsDialogTitleDirective;
}());
export { SdsDialogTitleDirective };
if (false) {
    /** @type {?} */
    SdsDialogTitleDirective.prototype.id;
    /**
     * @type {?}
     * @private
     */
    SdsDialogTitleDirective.prototype._dialogRef;
    /**
     * @type {?}
     * @private
     */
    SdsDialogTitleDirective.prototype._elementRef;
    /**
     * @type {?}
     * @private
     */
    SdsDialogTitleDirective.prototype._dialog;
}
/**
 * SubTitle of a dialog element
 */
var SdsDialogSubtitleDirective = /** @class */ (function () {
    function SdsDialogSubtitleDirective() {
    }
    SdsDialogSubtitleDirective.decorators = [
        { type: Directive, args: [{
                    selector: "[sds-dialog-subtitle], sds-dialog-subtitle, [sdsDialogSubtitle]",
                    // tslint:disable-next-line: use-host-property-decorator
                    host: { '[class.sds-dialog-subtitle]': 'true' }
                },] }
    ];
    return SdsDialogSubtitleDirective;
}());
export { SdsDialogSubtitleDirective };
/**
 * Scrollable content container of a dialog.
 */
var SdsDialogContentDirective = /** @class */ (function () {
    function SdsDialogContentDirective() {
    }
    SdsDialogContentDirective.decorators = [
        { type: Directive, args: [{
                    selector: "[sds-dialog-content], sds-dialog-content, [sdsDialogContent]",
                    // tslint:disable-next-line: use-host-property-decorator
                    host: { '[class.sds-dialog-content]': 'true' }
                },] }
    ];
    return SdsDialogContentDirective;
}());
export { SdsDialogContentDirective };
/**
 * Container for the bottom action buttons in a dialog.
 * Stays fixed to the bottom when scrolling.
 */
var SdsDialogActionsDirective = /** @class */ (function () {
    function SdsDialogActionsDirective() {
    }
    SdsDialogActionsDirective.decorators = [
        { type: Directive, args: [{
                    selector: "[sds-dialog-actions], sds-dialog-actions, [sdsDialogActions]",
                    // tslint:disable-next-line: use-host-property-decorator
                    host: { '[class.sds-dialog-actions]': 'true' }
                },] }
    ];
    return SdsDialogActionsDirective;
}());
export { SdsDialogActionsDirective };
/**
 * Finds the closest SdsDialogRef to an element by looking at the DOM.
 * @param {?} element Element relative to which to look for a dialog.
 * @param {?} openDialogs References to the currently-open dialogs.
 * @return {?}
 */
function getClosestDialog(element, openDialogs) {
    /** @type {?} */
    var parent = element.nativeElement.parentElement;
    while (parent && !parent.classList.contains('sds-dialog__container')) {
        parent = parent.parentElement;
    }
    return parent ? openDialogs.find((/**
     * @param {?} dialog
     * @return {?}
     */
    function (dialog) { return dialog.id === (/** @type {?} */ (parent)).id; })) : null;
}
//# sourceMappingURL=data:application/json;base64,