/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, ElementRef, Input, HostListener, Injector, ViewContainerRef } from '@angular/core';
import { coerceNumberProperty } from '@angular/cdk/coercion';
import { ViewportRuler, OverlayConfig, Overlay } from '@angular/cdk/overlay';
import { Subscription, merge } from 'rxjs';
import { startWith } from 'rxjs/operators';
import { PortalInjector, ComponentPortal } from '@angular/cdk/portal';
import { SdsTruncatedTextContainerComponent } from './truncate-text-container.component';
import { SDS_TRUNCATED_TEXT_DATA } from './truncates-text-base';
var SdsTruncateTextByLineDirective = /** @class */ (function () {
    function SdsTruncateTextByLineDirective(_overlay, _injector, _element, _viewportRuler, _viewContainerRef) {
        this._overlay = _overlay;
        this._injector = _injector;
        this._element = _element;
        this._viewportRuler = _viewportRuler;
        this._viewContainerRef = _viewContainerRef;
        /**
         * PortalOutlet
         */
        this._overlayRef = null;
        /**
         * Holds subscription to stream of overlay closing events
         */
        this._closingActionsSubscription = Subscription.EMPTY;
    }
    Object.defineProperty(SdsTruncateTextByLineDirective.prototype, "textLinesLimit", {
        /** Maximum lines of text limit */
        get: /**
         * Maximum lines of text limit
         * @return {?}
         */
        function () {
            return this._textLinesLimit;
        },
        set: /**
         * @param {?} _textLinesLimit
         * @return {?}
         */
        function (_textLinesLimit) {
            _textLinesLimit = coerceNumberProperty(_textLinesLimit);
            if (this._textLinesLimit !== _textLinesLimit) {
                this._textLinesLimit = _textLinesLimit;
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    SdsTruncateTextByLineDirective.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.initialText = this._element.nativeElement.innerText.trim();
        // Clone element to facilitate calculations
        /** @type {?} */
        var hostCloneEl = (/** @type {?} */ (this._element.nativeElement.cloneNode()));
        // Add 1 character to calculate character width
        hostCloneEl.innerHTML = 'x';
        // Render the clone to get character width
        this._element.nativeElement.parentElement.appendChild(hostCloneEl);
        // Set the clone to inline to prevent cases where the clone
        // expands to 100% width of the container
        hostCloneEl.setAttribute('style', 'display: inline');
        // These are close approximations that are used to better guess
        // how many characters fit in X number of lines
        this.approximatedCharacterWidth = hostCloneEl.offsetWidth;
        // Remove clone after calculations
        hostCloneEl.remove();
    };
    /**
     * @return {?}
     */
    SdsTruncateTextByLineDirective.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.windowResize$ = this._viewportRuler
            .change(0)
            .pipe(startWith('Start'))
            .subscribe((/**
         * @return {?}
         */
        function () { return _this.updateUI(); }));
    };
    /**
     * @return {?}
     */
    SdsTruncateTextByLineDirective.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        if (this._overlayRef) {
            this._overlayRef.dispose();
        }
        this._closingActionsSubscription.unsubscribe();
        this.windowResize$.unsubscribe();
    };
    /** Configures and creates the CDK overlay */
    /**
     * Configures and creates the CDK overlay
     * @private
     * @return {?}
     */
    SdsTruncateTextByLineDirective.prototype._createOverlay = /**
     * Configures and creates the CDK overlay
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var overlayPositions = {
            originX: 'start',
            originY: 'bottom',
            overlayX: 'start',
            overlayY: 'top'
        };
        /** @type {?} */
        var config = new OverlayConfig({
            positionStrategy: this._overlay
                .position()
                .flexibleConnectedTo(this._element)
                .withLockedPosition()
                .withPositions([overlayPositions])
                .withTransformOriginOn('.sds-overlay'),
            hasBackdrop: true,
            backdropClass: 'cdk-overlay-transparent-backdrop',
            scrollStrategy: this._overlay.scrollStrategies.close()
        });
        return this._overlay.create(config);
    };
    /** Attach a ComponentPortal to the overlay **/
    /**
     * Attach a ComponentPortal to the overlay *
     * @private
     * @param {?} overlay
     * @return {?}
     */
    SdsTruncateTextByLineDirective.prototype._attachContainer = /**
     * Attach a ComponentPortal to the overlay *
     * @private
     * @param {?} overlay
     * @return {?}
     */
    function (overlay) {
        /** @type {?} */
        var injector = new PortalInjector(this._injector, new WeakMap([[SDS_TRUNCATED_TEXT_DATA, { text: this.initialText }]]));
        /** @type {?} */
        var containerPortal = new ComponentPortal(SdsTruncatedTextContainerComponent, this._viewContainerRef, injector);
        /** @type {?} */
        var containerRef = overlay.attach(containerPortal);
        return containerRef.instance;
    };
    /** Returns a stream that emits whenever an action that should close the overlay occurs. */
    /**
     * Returns a stream that emits whenever an action that should close the overlay occurs.
     * @private
     * @return {?}
     */
    SdsTruncateTextByLineDirective.prototype._overlayClosingActions = /**
     * Returns a stream that emits whenever an action that should close the overlay occurs.
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var backdrop = this._overlayRef.backdropClick();
        /** @type {?} */
        var detachments = this._overlayRef.detachments();
        return merge(backdrop, detachments);
    };
    /** Width of host element */
    /**
     * Width of host element
     * @private
     * @return {?}
     */
    SdsTruncateTextByLineDirective.prototype._getHostWidth = /**
     * Width of host element
     * @private
     * @return {?}
     */
    function () {
        return this._element.nativeElement.offsetWidth;
    };
    /** Approximated number of characters that are visible in the container */
    /**
     * Approximated number of characters that are visible in the container
     * @private
     * @return {?}
     */
    SdsTruncateTextByLineDirective.prototype._getVisibleCharacters = /**
     * Approximated number of characters that are visible in the container
     * @private
     * @return {?}
     */
    function () {
        return Math.floor((this._getHostWidth() / this.approximatedCharacterWidth) *
            this.textLinesLimit);
    };
    /**
     * @private
     * @return {?}
     */
    SdsTruncateTextByLineDirective.prototype._isNotLongEnough = /**
     * @private
     * @return {?}
     */
    function () {
        return this._getVisibleCharacters() > this.initialText.length;
    };
    /**
     * @return {?}
     */
    SdsTruncateTextByLineDirective.prototype.openOverlay = /**
     * @return {?}
     */
    function () {
        var _this = this;
        // Exit if all text can be visible in container
        if (this._isNotLongEnough())
            return;
        this._overlayRef = this._createOverlay();
        /** @type {?} */
        var container = this._attachContainer(this._overlayRef);
        this._closingActionsSubscription = this._overlayClosingActions().subscribe((/**
         * @return {?}
         */
        function () { return _this.closeOverlay(); }));
        // Wait for the next event loop tick to start the animation
        setTimeout((/**
         * @return {?}
         */
        function () {
            container.startAnimation();
        }));
    };
    /**
     * @return {?}
     */
    SdsTruncateTextByLineDirective.prototype.updateUI = /**
     * @return {?}
     */
    function () {
        // Exit if all text can be visible in container
        if (this._isNotLongEnough())
            return;
        /** @type {?} */
        var wordCut = false;
        /** @type {?} */
        var ellipsis = '...';
        /** @type {?} */
        var limit = this._getVisibleCharacters() - ellipsis.length;
        /** @type {?} */
        var visibleText = this.initialText.slice(0, limit);
        if (!wordCut) {
            /** @type {?} */
            var isEndofWord = this.initialText.substr(limit, limit + 1) === ' ';
            if (!isEndofWord) {
                /** @type {?} */
                var previousWord = visibleText.lastIndexOf(' ');
                visibleText = visibleText.slice(0, previousWord);
            }
        }
        this._element.nativeElement.innerText = visibleText + ellipsis;
    };
    /**
     * @return {?}
     */
    SdsTruncateTextByLineDirective.prototype.closeOverlay = /**
     * @return {?}
     */
    function () {
        this._closingActionsSubscription.unsubscribe();
        this._overlayRef.detach();
    };
    SdsTruncateTextByLineDirective.decorators = [
        { type: Directive, args: [{ selector: '[sdsTruncateTextByLine]' },] }
    ];
    /** @nocollapse */
    SdsTruncateTextByLineDirective.ctorParameters = function () { return [
        { type: Overlay },
        { type: Injector },
        { type: ElementRef },
        { type: ViewportRuler },
        { type: ViewContainerRef }
    ]; };
    SdsTruncateTextByLineDirective.propDecorators = {
        textLinesLimit: [{ type: Input, args: ['sdsTruncateTextByLine',] }],
        openOverlay: [{ type: HostListener, args: ['click',] }]
    };
    return SdsTruncateTextByLineDirective;
}());
export { SdsTruncateTextByLineDirective };
if (false) {
    /**
     * @type {?}
     * @private
     */
    SdsTruncateTextByLineDirective.prototype._textLinesLimit;
    /**
     * PortalOutlet
     * @type {?}
     * @private
     */
    SdsTruncateTextByLineDirective.prototype._overlayRef;
    /**
     * Holds subscription to stream of overlay closing events
     * @type {?}
     * @private
     */
    SdsTruncateTextByLineDirective.prototype._closingActionsSubscription;
    /**
     * Holds initial text
     * @type {?}
     * @private
     */
    SdsTruncateTextByLineDirective.prototype.initialText;
    /**
     * Subscription to window resize stream
     * @type {?}
     */
    SdsTruncateTextByLineDirective.prototype.windowResize$;
    /**
     * Approximated character width of the host text
     * @type {?}
     * @private
     */
    SdsTruncateTextByLineDirective.prototype.approximatedCharacterWidth;
    /**
     * @type {?}
     * @private
     */
    SdsTruncateTextByLineDirective.prototype._overlay;
    /**
     * @type {?}
     * @private
     */
    SdsTruncateTextByLineDirective.prototype._injector;
    /**
     * @type {?}
     * @private
     */
    SdsTruncateTextByLineDirective.prototype._element;
    /**
     * @type {?}
     * @private
     */
    SdsTruncateTextByLineDirective.prototype._viewportRuler;
    /**
     * @type {?}
     * @private
     */
    SdsTruncateTextByLineDirective.prototype._viewContainerRef;
}
//# sourceMappingURL=data:application/json;base64,