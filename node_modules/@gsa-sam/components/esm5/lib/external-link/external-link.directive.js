/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, ElementRef, Renderer2, Input, ComponentFactoryResolver, ViewContainerRef } from '@angular/core';
import { FaIconComponent } from '@fortawesome/angular-fontawesome';
var ExternalLinkDirective = /** @class */ (function () {
    function ExternalLinkDirective(el, renderer, cfr, vc) {
        this.el = el;
        this.renderer = renderer;
        this.cfr = cfr;
        this.vc = vc;
        this.hideIcon = false;
    }
    Object.defineProperty(ExternalLinkDirective.prototype, "isExternalLink", {
        get: /**
         * @private
         * @return {?}
         */
        function () {
            return this.href.replace(/^https?:\/\//, '').replace(/^www\./, '').split('/')[0] != location.hostname;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    ExternalLinkDirective.prototype.ngOnChanges = /**
     * @return {?}
     */
    function () {
        if (!this.isExternalLink) {
            return;
        }
        if (!this.hideIcon) {
            this.createIcon();
        }
    };
    /**
     * @private
     * @return {?}
     */
    ExternalLinkDirective.prototype.createIcon = /**
     * @private
     * @return {?}
     */
    function () {
        // tslint:disable-next-line:no-unused-expression
        this.vc.constructor.name === "ViewContainerRef_";
        /** @type {?} */
        var factory = this.cfr.resolveComponentFactory(FaIconComponent);
        /** @type {?} */
        var component = this.vc.createComponent(factory);
        component.instance.iconProp = ['fas', 'external-link-alt'];
        /** @type {?} */
        var spanElement = document.createElement('span');
        spanElement.classList.add('margin-left-2px');
        /** @type {?} */
        var supElement = document.createElement('sup');
        supElement.appendChild(component.location.nativeElement);
        spanElement.appendChild(supElement);
        this.el.nativeElement.appendChild(spanElement);
        component.instance.ngOnChanges({});
    };
    ExternalLinkDirective.decorators = [
        { type: Directive, args: [{
                    selector: 'a[href]'
                },] }
    ];
    /** @nocollapse */
    ExternalLinkDirective.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Renderer2 },
        { type: ComponentFactoryResolver },
        { type: ViewContainerRef }
    ]; };
    ExternalLinkDirective.propDecorators = {
        href: [{ type: Input }],
        hideIcon: [{ type: Input }]
    };
    return ExternalLinkDirective;
}());
export { ExternalLinkDirective };
if (false) {
    /**
     * @type {?}
     * @private
     */
    ExternalLinkDirective.prototype.vcRef;
    /** @type {?} */
    ExternalLinkDirective.prototype.href;
    /** @type {?} */
    ExternalLinkDirective.prototype.hideIcon;
    /**
     * @type {?}
     * @private
     */
    ExternalLinkDirective.prototype.el;
    /**
     * @type {?}
     * @private
     */
    ExternalLinkDirective.prototype.renderer;
    /**
     * @type {?}
     * @private
     */
    ExternalLinkDirective.prototype.cfr;
    /**
     * @type {?}
     * @private
     */
    ExternalLinkDirective.prototype.vc;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXh0ZXJuYWwtbGluay5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZ3NhLXNhbS9jb21wb25lbnRzLyIsInNvdXJjZXMiOlsibGliL2V4dGVybmFsLWxpbmsvZXh0ZXJuYWwtbGluay5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFDTCxTQUFTLEVBRVQsVUFBVSxFQUNWLFNBQVMsRUFDVCxLQUFLLEVBQ0wsd0JBQXdCLEVBQ3hCLGdCQUFnQixFQUVqQixNQUFNLGVBQWUsQ0FBQztBQUV2QixPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sa0NBQWtDLENBQUM7QUFDbkU7SUFjRSwrQkFDVSxFQUFjLEVBQ2QsUUFBbUIsRUFBVSxHQUE2QixFQUFXLEVBQXFCO1FBRDFGLE9BQUUsR0FBRixFQUFFLENBQVk7UUFDZCxhQUFRLEdBQVIsUUFBUSxDQUFXO1FBQVUsUUFBRyxHQUFILEdBQUcsQ0FBMEI7UUFBVyxPQUFFLEdBQUYsRUFBRSxDQUFtQjtRQVRwRixhQUFRLEdBQVksS0FBSyxDQUFDO0lBVXhDLENBQUM7SUFQSCxzQkFBWSxpREFBYzs7Ozs7UUFBMUI7WUFDRSxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLGNBQWMsRUFBQyxFQUFFLENBQUMsQ0FBQyxPQUFPLENBQUMsUUFBUSxFQUFFLEVBQUUsQ0FBQyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxRQUFRLENBQUMsUUFBUSxDQUFDO1FBQ3ZHLENBQUM7OztPQUFBOzs7O0lBT1EsMkNBQVc7OztJQUFsQjtRQUNBLElBQUksQ0FBQyxJQUFJLENBQUMsY0FBYyxFQUFDO1lBQ3ZCLE9BQU87U0FDUjtRQUNELElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFO1lBQ2xCLElBQUksQ0FBQyxVQUFVLEVBQUUsQ0FBQztTQUVuQjtJQUNILENBQUM7Ozs7O0lBRU8sMENBQVU7Ozs7SUFBbEI7UUFDRSxnREFBZ0Q7UUFDaEQsSUFBSSxDQUFDLEVBQUUsQ0FBQyxXQUFXLENBQUMsSUFBSSxLQUFLLG1CQUFtQixDQUFDOztZQUMzQyxPQUFPLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyx1QkFBdUIsQ0FBQyxlQUFlLENBQUM7O1lBQzNELFNBQVMsR0FBRyxJQUFJLENBQUMsRUFBRSxDQUFDLGVBQWUsQ0FBQyxPQUFPLENBQUM7UUFDbEQsU0FBUyxDQUFDLFFBQVEsQ0FBQyxRQUFRLEdBQUksQ0FBQyxLQUFLLEVBQUMsbUJBQW1CLENBQUMsQ0FBQzs7WUFDckQsV0FBVyxHQUFHLFFBQVEsQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDO1FBQ2xELFdBQVcsQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLGlCQUFpQixDQUFDLENBQUM7O1lBQ3ZDLFVBQVUsR0FBRyxRQUFRLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQztRQUNoRCxVQUFVLENBQUMsV0FBVyxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsYUFBYSxDQUFDLENBQUM7UUFDekQsV0FBVyxDQUFDLFdBQVcsQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUNwQyxJQUFJLENBQUMsRUFBRSxDQUFDLGFBQWEsQ0FBQyxXQUFXLENBQUMsV0FBVyxDQUFDLENBQUM7UUFDL0MsU0FBUyxDQUFDLFFBQVEsQ0FBQyxXQUFXLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDckMsQ0FBQzs7Z0JBMUNGLFNBQVMsU0FBQztvQkFDVCxRQUFRLEVBQUUsU0FBUztpQkFDcEI7Ozs7Z0JBWEMsVUFBVTtnQkFDVixTQUFTO2dCQUVULHdCQUF3QjtnQkFDeEIsZ0JBQWdCOzs7dUJBV2YsS0FBSzsyQkFDTCxLQUFLOztJQXFDUiw0QkFBQztDQUFBLEFBNUNELElBNENDO1NBekNZLHFCQUFxQjs7Ozs7O0lBRTlCLHNDQUFnQzs7SUFDbEMscUNBQXNCOztJQUN0Qix5Q0FBMEM7Ozs7O0lBUXhDLG1DQUFzQjs7Ozs7SUFDdEIseUNBQTJCOzs7OztJQUFFLG9DQUFxQzs7Ozs7SUFBRyxtQ0FBNkIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBEaXJlY3RpdmUsXG4gIEFmdGVyVmlld0NoZWNrZWQsXG4gIEVsZW1lbnRSZWYsXG4gIFJlbmRlcmVyMixcbiAgSW5wdXQsXG4gIENvbXBvbmVudEZhY3RvcnlSZXNvbHZlcixcbiAgVmlld0NvbnRhaW5lclJlZixcbiAgT25DaGFuZ2VzXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgZmFDb2ZmZWUsIGZhRXh0ZXJuYWxMaW5rQWx0IH0gZnJvbSAnQGZvcnRhd2Vzb21lL2ZyZWUtc29saWQtc3ZnLWljb25zJztcbmltcG9ydCB7IEZhSWNvbkNvbXBvbmVudCB9IGZyb20gJ0Bmb3J0YXdlc29tZS9hbmd1bGFyLWZvbnRhd2Vzb21lJztcbkBEaXJlY3RpdmUoe1xuICBzZWxlY3RvcjogJ2FbaHJlZl0nXG59KVxuZXhwb3J0IGNsYXNzIEV4dGVybmFsTGlua0RpcmVjdGl2ZVxuICBpbXBsZW1lbnRzIE9uQ2hhbmdlcyB7XG4gICAgcHJpdmF0ZSB2Y1JlZjogVmlld0NvbnRhaW5lclJlZjtcbiAgQElucHV0KCkgaHJlZjogc3RyaW5nO1xuICBASW5wdXQoKSBwdWJsaWMgaGlkZUljb246IGJvb2xlYW4gPSBmYWxzZTtcblxuIFxuICBwcml2YXRlIGdldCBpc0V4dGVybmFsTGluayAoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuaHJlZi5yZXBsYWNlKC9eaHR0cHM/OlxcL1xcLy8sJycpLnJlcGxhY2UoL153d3dcXC4vLCAnJykuc3BsaXQoJy8nKVswXSAhPSBsb2NhdGlvbi5ob3N0bmFtZTtcbiAgfVxuXG4gIGNvbnN0cnVjdG9yIChcbiAgICBwcml2YXRlIGVsOiBFbGVtZW50UmVmLFxuICAgIHByaXZhdGUgcmVuZGVyZXI6IFJlbmRlcmVyMiwgcHJpdmF0ZSBjZnI6IENvbXBvbmVudEZhY3RvcnlSZXNvbHZlciAsIHByaXZhdGUgdmMgOiBWaWV3Q29udGFpbmVyUmVmKSB7ICAgXG4gICAgfVxuXG4gICAgcHVibGljIG5nT25DaGFuZ2VzICgpIHtcbiAgICBpZiAoIXRoaXMuaXNFeHRlcm5hbExpbmspe1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoIXRoaXMuaGlkZUljb24pIHtcbiAgICAgIHRoaXMuY3JlYXRlSWNvbigpO1xuICAgICAgXG4gICAgfVxuICB9XG4gXG4gIHByaXZhdGUgY3JlYXRlSWNvbiAoKSB7XG4gICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm5vLXVudXNlZC1leHByZXNzaW9uXG4gICAgdGhpcy52Yy5jb25zdHJ1Y3Rvci5uYW1lID09PSBcIlZpZXdDb250YWluZXJSZWZfXCI7XG4gICAgY29uc3QgZmFjdG9yeSA9IHRoaXMuY2ZyLnJlc29sdmVDb21wb25lbnRGYWN0b3J5KEZhSWNvbkNvbXBvbmVudCk7XG4gICAgY29uc3QgY29tcG9uZW50ID0gdGhpcy52Yy5jcmVhdGVDb21wb25lbnQoZmFjdG9yeSk7XG4gICAgY29tcG9uZW50Lmluc3RhbmNlLmljb25Qcm9wID0gIFsnZmFzJywnZXh0ZXJuYWwtbGluay1hbHQnXTtcbiAgICBjb25zdCBzcGFuRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NwYW4nKTtcbiAgICBzcGFuRWxlbWVudC5jbGFzc0xpc3QuYWRkKCdtYXJnaW4tbGVmdC0ycHgnKTtcbiAgICBjb25zdCBzdXBFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3VwJyk7XG4gICAgc3VwRWxlbWVudC5hcHBlbmRDaGlsZChjb21wb25lbnQubG9jYXRpb24ubmF0aXZlRWxlbWVudCk7XG4gICAgc3BhbkVsZW1lbnQuYXBwZW5kQ2hpbGQoc3VwRWxlbWVudCk7XG4gICAgdGhpcy5lbC5uYXRpdmVFbGVtZW50LmFwcGVuZENoaWxkKHNwYW5FbGVtZW50KTtcbiAgICBjb21wb25lbnQuaW5zdGFuY2UubmdPbkNoYW5nZXMoe30pO1xuICB9XG4gXG59XG4iXX0=