/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, Output, EventEmitter, ElementRef } from '@angular/core';
import { ViewportRuler } from '@angular/cdk/overlay';
import { startWith } from 'rxjs/operators';
/**
 * Directive that triggers a callback whenever the width of
 * its associated element has changed.
 */
var SdsObserveWidthDirective = /** @class */ (function () {
    function SdsObserveWidthDirective(_elementRef, viewportRuler) {
        this._elementRef = _elementRef;
        this.viewportRuler = viewportRuler;
        /**
         * Event emitted for each change in the element's width.
         */
        this.elementWidth = new EventEmitter();
    }
    /**
     * @return {?}
     */
    SdsObserveWidthDirective.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.windowResize$ = this.viewportRuler
            .change(0)
            .pipe(startWith(this._getElementWidth()))
            .subscribe((/**
         * @return {?}
         */
        function () { return _this._emitEvent(); }));
    };
    /**
     * @return {?}
     */
    SdsObserveWidthDirective.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.windowResize$.unsubscribe();
    };
    /**
     * @return {?}
     */
    SdsObserveWidthDirective.prototype._emitEvent = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var width = this._getElementWidth();
        this.elementWidth.emit(width);
    };
    /**
     * @return {?}
     */
    SdsObserveWidthDirective.prototype._getElementWidth = /**
     * @return {?}
     */
    function () {
        return this._elementRef.nativeElement.offsetWidth;
    };
    SdsObserveWidthDirective.decorators = [
        { type: Directive, args: [{ selector: '[sdsObserveWidth]' },] }
    ];
    /** @nocollapse */
    SdsObserveWidthDirective.ctorParameters = function () { return [
        { type: ElementRef },
        { type: ViewportRuler }
    ]; };
    SdsObserveWidthDirective.propDecorators = {
        elementWidth: [{ type: Output, args: ['sdsObserveWidth',] }]
    };
    return SdsObserveWidthDirective;
}());
export { SdsObserveWidthDirective };
if (false) {
    /**
     * Event emitted for each change in the element's width.
     * @type {?}
     */
    SdsObserveWidthDirective.prototype.elementWidth;
    /**
     * Subscription to window resize stream
     * @type {?}
     */
    SdsObserveWidthDirective.prototype.windowResize$;
    /**
     * @type {?}
     * @private
     */
    SdsObserveWidthDirective.prototype._elementRef;
    /**
     * @type {?}
     * @private
     */
    SdsObserveWidthDirective.prototype.viewportRuler;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib2JzZXJ2ZS13aWR0aC5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZ3NhLXNhbS9jb21wb25lbnRzLyIsInNvdXJjZXMiOlsibGliL29ic2VydmVycy9vYnNlcnZlLXdpZHRoLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUNMLFNBQVMsRUFDVCxNQUFNLEVBQ04sWUFBWSxFQUNaLFVBQVUsRUFHWCxNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFDckQsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLGdCQUFnQixDQUFDOzs7OztBQU8zQztJQVFFLGtDQUNVLFdBQW9DLEVBQ3BDLGFBQTRCO1FBRDVCLGdCQUFXLEdBQVgsV0FBVyxDQUF5QjtRQUNwQyxrQkFBYSxHQUFiLGFBQWEsQ0FBZTs7OztRQVBYLGlCQUFZLEdBQUcsSUFBSSxZQUFZLEVBQVUsQ0FBQztJQVFsRSxDQUFDOzs7O0lBRUosMkNBQVE7OztJQUFSO1FBQUEsaUJBS0M7UUFKQyxJQUFJLENBQUMsYUFBYSxHQUFHLElBQUksQ0FBQyxhQUFhO2FBQ3BDLE1BQU0sQ0FBQyxDQUFDLENBQUM7YUFDVCxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDLENBQUM7YUFDeEMsU0FBUzs7O1FBQUMsY0FBTSxPQUFBLEtBQUksQ0FBQyxVQUFVLEVBQUUsRUFBakIsQ0FBaUIsRUFBQyxDQUFDO0lBQ3hDLENBQUM7Ozs7SUFFRCw4Q0FBVzs7O0lBQVg7UUFDRSxJQUFJLENBQUMsYUFBYSxDQUFDLFdBQVcsRUFBRSxDQUFDO0lBQ25DLENBQUM7Ozs7SUFFRCw2Q0FBVTs7O0lBQVY7O1lBQ1EsS0FBSyxHQUFHLElBQUksQ0FBQyxnQkFBZ0IsRUFBRTtRQUNyQyxJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNoQyxDQUFDOzs7O0lBRUQsbURBQWdCOzs7SUFBaEI7UUFDRSxPQUFPLElBQUksQ0FBQyxXQUFXLENBQUMsYUFBYSxDQUFDLFdBQVcsQ0FBQztJQUNwRCxDQUFDOztnQkEvQkYsU0FBUyxTQUFDLEVBQUUsUUFBUSxFQUFFLG1CQUFtQixFQUFFOzs7O2dCQVoxQyxVQUFVO2dCQUlILGFBQWE7OzsrQkFXbkIsTUFBTSxTQUFDLGlCQUFpQjs7SUE2QjNCLCtCQUFDO0NBQUEsQUFoQ0QsSUFnQ0M7U0EvQlksd0JBQXdCOzs7Ozs7SUFFbkMsZ0RBQXFFOzs7OztJQUdyRSxpREFBNEI7Ozs7O0lBRzFCLCtDQUE0Qzs7Ozs7SUFDNUMsaURBQW9DIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgRGlyZWN0aXZlLFxuICBPdXRwdXQsXG4gIEV2ZW50RW1pdHRlcixcbiAgRWxlbWVudFJlZixcbiAgT25Jbml0LFxuICBPbkRlc3Ryb3lcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBWaWV3cG9ydFJ1bGVyIH0gZnJvbSAnQGFuZ3VsYXIvY2RrL292ZXJsYXknO1xuaW1wb3J0IHsgc3RhcnRXaXRoIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHsgU3Vic2NyaXB0aW9uIH0gZnJvbSAncnhqcyc7XG5cbi8qKlxuICogRGlyZWN0aXZlIHRoYXQgdHJpZ2dlcnMgYSBjYWxsYmFjayB3aGVuZXZlciB0aGUgd2lkdGggb2ZcbiAqIGl0cyBhc3NvY2lhdGVkIGVsZW1lbnQgaGFzIGNoYW5nZWQuXG4gKi9cbkBEaXJlY3RpdmUoeyBzZWxlY3RvcjogJ1tzZHNPYnNlcnZlV2lkdGhdJyB9KVxuZXhwb3J0IGNsYXNzIFNkc09ic2VydmVXaWR0aERpcmVjdGl2ZSBpbXBsZW1lbnRzIE9uSW5pdCwgT25EZXN0cm95IHtcbiAgLyoqIEV2ZW50IGVtaXR0ZWQgZm9yIGVhY2ggY2hhbmdlIGluIHRoZSBlbGVtZW50J3Mgd2lkdGguICovXG4gIEBPdXRwdXQoJ3Nkc09ic2VydmVXaWR0aCcpIGVsZW1lbnRXaWR0aCA9IG5ldyBFdmVudEVtaXR0ZXI8bnVtYmVyPigpO1xuXG4gIC8qKiBTdWJzY3JpcHRpb24gdG8gd2luZG93IHJlc2l6ZSBzdHJlYW0gKi9cbiAgd2luZG93UmVzaXplJDogU3Vic2NyaXB0aW9uO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgX2VsZW1lbnRSZWY6IEVsZW1lbnRSZWY8SFRNTEVsZW1lbnQ+LFxuICAgIHByaXZhdGUgdmlld3BvcnRSdWxlcjogVmlld3BvcnRSdWxlclxuICApIHt9XG5cbiAgbmdPbkluaXQoKSB7XG4gICAgdGhpcy53aW5kb3dSZXNpemUkID0gdGhpcy52aWV3cG9ydFJ1bGVyXG4gICAgICAuY2hhbmdlKDApXG4gICAgICAucGlwZShzdGFydFdpdGgodGhpcy5fZ2V0RWxlbWVudFdpZHRoKCkpKVxuICAgICAgLnN1YnNjcmliZSgoKSA9PiB0aGlzLl9lbWl0RXZlbnQoKSk7XG4gIH1cblxuICBuZ09uRGVzdHJveSgpIHtcbiAgICB0aGlzLndpbmRvd1Jlc2l6ZSQudW5zdWJzY3JpYmUoKTtcbiAgfVxuXG4gIF9lbWl0RXZlbnQoKSB7XG4gICAgY29uc3Qgd2lkdGggPSB0aGlzLl9nZXRFbGVtZW50V2lkdGgoKTtcbiAgICB0aGlzLmVsZW1lbnRXaWR0aC5lbWl0KHdpZHRoKTtcbiAgfVxuXG4gIF9nZXRFbGVtZW50V2lkdGgoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5fZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50Lm9mZnNldFdpZHRoO1xuICB9XG59XG4iXX0=