/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, EventEmitter, Input, Output } from "@angular/core";
import { coerceBooleanProperty } from "@angular/cdk/coercion";
import { sdsToolbarAnimations } from "./toolbar-animations";
/**
 * Counter for generating unique element ids.
 * @type {?}
 */
var uniqueId = 0;
var SdsToolbarComponent = /** @class */ (function () {
    function SdsToolbarComponent() {
        /**
         * The unique Toolbar id.
         */
        this.id = uniqueId++;
        /**
         * ID for the header element. Used for a11y labelling.
         */
        this._headerId = "sds-toolbar-header-" + this.id;
        /**
         * ID for the content element. Used for a11y labelling.
         */
        this._contentId = "sds-toolbar-content-" + this.id;
        /**
         * Emits whenever the expanded state of the toolbar changes.
         */
        this.expandedChange = new EventEmitter();
        this._expanded = false;
        this._disabled = false;
        /**
         * Width of the toolbar when is expanded.
         */
        this.expandedWidth = "300px";
        // Elements that surround the toolbar need to make space for the expanded toolbar.
        // Adding 20 more pixes to provide padding
        this.expandedSpace = "20px";
    }
    Object.defineProperty(SdsToolbarComponent.prototype, "expanded", {
        /** Whether the toolbar is expanded. */
        get: /**
         * Whether the toolbar is expanded.
         * @return {?}
         */
        function () {
            return this._expanded;
        },
        set: /**
         * @param {?} expanded
         * @return {?}
         */
        function (expanded) {
            expanded = coerceBooleanProperty(expanded);
            // Only emit events and update the internal value if the value changes.
            if (this._expanded !== expanded) {
                this._expanded = expanded;
                this.expandedChange.emit(expanded);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SdsToolbarComponent.prototype, "disabled", {
        /** Whether the toolbar is disabled. */
        get: /**
         * Whether the toolbar is disabled.
         * @return {?}
         */
        function () {
            return this._disabled;
        },
        set: /**
         * @param {?} disabled
         * @return {?}
         */
        function (disabled) {
            this._disabled = coerceBooleanProperty(disabled);
        },
        enumerable: true,
        configurable: true
    });
    /** Toggles the expanded state of the toolbar. */
    /**
     * Toggles the expanded state of the toolbar.
     * @return {?}
     */
    SdsToolbarComponent.prototype.toggle = /**
     * Toggles the expanded state of the toolbar.
     * @return {?}
     */
    function () {
        this.expanded = !this.expanded;
    };
    /** Gets the expanded state string. */
    /**
     * Gets the expanded state string.
     * @return {?}
     */
    SdsToolbarComponent.prototype._getExpandedState = /**
     * Gets the expanded state string.
     * @return {?}
     */
    function () {
        return this.expanded ? "expanded" : "collapsed";
    };
    SdsToolbarComponent.decorators = [
        { type: Component, args: [{
                    selector: "sds-toolbar",
                    exportAs: "sdsToolbar",
                    template: "<sds-toolbar-header></sds-toolbar-header>\n<div\n  class=\"sds-toolbar__content\"\n  role=\"region\"\n  [@bodyExpansion]=\"{\n    value: _getExpandedState(),\n    params: { expandedWidth: expandedWidth }\n  }\"\n  [attr.aria-labelledby]=\"_headerId\"\n  [id]=\"_contentId\"\n>\n  <ng-content></ng-content>\n</div>\n",
                    animations: [sdsToolbarAnimations.bodyExpansion],
                    host: {
                        class: "sds-toolbar",
                        "[class.sds-toolbar--expanded]": "expanded"
                    }
                }] }
    ];
    /** @nocollapse */
    SdsToolbarComponent.ctorParameters = function () { return []; };
    SdsToolbarComponent.propDecorators = {
        expandedChange: [{ type: Output }],
        expanded: [{ type: Input }],
        disabled: [{ type: Input }],
        expandedWidth: [{ type: Input }],
        expandedSpace: [{ type: Input }]
    };
    return SdsToolbarComponent;
}());
export { SdsToolbarComponent };
if (false) {
    /**
     * The unique Toolbar id.
     * @type {?}
     */
    SdsToolbarComponent.prototype.id;
    /**
     * ID for the header element. Used for a11y labelling.
     * @type {?}
     */
    SdsToolbarComponent.prototype._headerId;
    /**
     * ID for the content element. Used for a11y labelling.
     * @type {?}
     */
    SdsToolbarComponent.prototype._contentId;
    /**
     * Emits whenever the expanded state of the toolbar changes.
     * @type {?}
     */
    SdsToolbarComponent.prototype.expandedChange;
    /**
     * @type {?}
     * @private
     */
    SdsToolbarComponent.prototype._expanded;
    /**
     * @type {?}
     * @private
     */
    SdsToolbarComponent.prototype._disabled;
    /**
     * Width of the toolbar when is expanded.
     * @type {?}
     */
    SdsToolbarComponent.prototype.expandedWidth;
    /** @type {?} */
    SdsToolbarComponent.prototype.expandedSpace;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG9vbGJhci5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZ3NhLXNhbS9jb21wb25lbnRzLyIsInNvdXJjZXMiOlsibGliL3Rvb2xiYXIvdG9vbGJhci5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsWUFBWSxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDdkUsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFDOUQsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sc0JBQXNCLENBQUM7Ozs7O0lBTXhELFFBQVEsR0FBRyxDQUFDO0FBRWhCO0lBb0JFOzs7O1FBUlMsT0FBRSxHQUFHLFFBQVEsRUFBRSxDQUFDOzs7O1FBR2hCLGNBQVMsR0FBVyx3QkFBc0IsSUFBSSxDQUFDLEVBQUksQ0FBQzs7OztRQUdwRCxlQUFVLEdBQVcseUJBQXVCLElBQUksQ0FBQyxFQUFJLENBQUM7Ozs7UUFLckQsbUJBQWMsR0FBMEIsSUFBSSxZQUFZLEVBQVcsQ0FBQztRQWdCdEUsY0FBUyxHQUFHLEtBQUssQ0FBQztRQVVsQixjQUFTLEdBQVksS0FBSyxDQUFDOzs7O1FBRzFCLGtCQUFhLEdBQVcsT0FBTyxDQUFDOzs7UUFJaEMsa0JBQWEsR0FBVyxNQUFNLENBQUM7SUFwQ3pCLENBQUM7SUFNaEIsc0JBQ0kseUNBQVE7UUFGWix1Q0FBdUM7Ozs7O1FBQ3ZDO1lBRUUsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDO1FBQ3hCLENBQUM7Ozs7O1FBQ0QsVUFBYSxRQUFhO1lBQ3hCLFFBQVEsR0FBRyxxQkFBcUIsQ0FBQyxRQUFRLENBQUMsQ0FBQztZQUUzQyx1RUFBdUU7WUFDdkUsSUFBSSxJQUFJLENBQUMsU0FBUyxLQUFLLFFBQVEsRUFBRTtnQkFDL0IsSUFBSSxDQUFDLFNBQVMsR0FBRyxRQUFRLENBQUM7Z0JBQzFCLElBQUksQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO2FBQ3BDO1FBQ0gsQ0FBQzs7O09BVEE7SUFhRCxzQkFDSSx5Q0FBUTtRQUZaLHVDQUF1Qzs7Ozs7UUFDdkM7WUFFRSxPQUFPLElBQUksQ0FBQyxTQUFTLENBQUM7UUFDeEIsQ0FBQzs7Ozs7UUFDRCxVQUFhLFFBQWE7WUFDeEIsSUFBSSxDQUFDLFNBQVMsR0FBRyxxQkFBcUIsQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUNuRCxDQUFDOzs7T0FIQTtJQWFELGlEQUFpRDs7Ozs7SUFDakQsb0NBQU07Ozs7SUFBTjtRQUNFLElBQUksQ0FBQyxRQUFRLEdBQUcsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDO0lBQ2pDLENBQUM7SUFFRCxzQ0FBc0M7Ozs7O0lBQ3RDLCtDQUFpQjs7OztJQUFqQjtRQUNFLE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxXQUFXLENBQUM7SUFDbEQsQ0FBQzs7Z0JBbEVGLFNBQVMsU0FBQztvQkFDVCxRQUFRLEVBQUUsYUFBYTtvQkFDdkIsUUFBUSxFQUFFLFlBQVk7b0JBQ3RCLHVVQUFxQztvQkFDckMsVUFBVSxFQUFFLENBQUMsb0JBQW9CLENBQUMsYUFBYSxDQUFDO29CQUNoRCxJQUFJLEVBQUU7d0JBQ0osS0FBSyxFQUFFLGFBQWE7d0JBQ3BCLCtCQUErQixFQUFFLFVBQVU7cUJBQzVDO2lCQUNGOzs7OztpQ0FjRSxNQUFNOzJCQUdOLEtBQUs7MkJBZ0JMLEtBQUs7Z0NBVUwsS0FBSztnQ0FJTCxLQUFLOztJQVdSLDBCQUFDO0NBQUEsQUFuRUQsSUFtRUM7U0F6RFksbUJBQW1COzs7Ozs7SUFFOUIsaUNBQXlCOzs7OztJQUd6Qix3Q0FBNkQ7Ozs7O0lBRzdELHlDQUErRDs7Ozs7SUFLL0QsNkNBQThFOzs7OztJQWdCOUUsd0NBQTBCOzs7OztJQVUxQix3Q0FBbUM7Ozs7O0lBR25DLDRDQUF5Qzs7SUFJekMsNENBQXdDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBFdmVudEVtaXR0ZXIsIElucHV0LCBPdXRwdXQgfSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xuaW1wb3J0IHsgY29lcmNlQm9vbGVhblByb3BlcnR5IH0gZnJvbSBcIkBhbmd1bGFyL2Nkay9jb2VyY2lvblwiO1xuaW1wb3J0IHsgc2RzVG9vbGJhckFuaW1hdGlvbnMgfSBmcm9tIFwiLi90b29sYmFyLWFuaW1hdGlvbnNcIjtcblxuLyoqIFRvb2xiYXIncyBzdGF0ZXMuICovXG5leHBvcnQgdHlwZSBTZHNUb29sYmFyU3RhdGUgPSBcImV4cGFuZGVkXCIgfCBcImNvbGxhcHNlZFwiO1xuXG4vKiogQ291bnRlciBmb3IgZ2VuZXJhdGluZyB1bmlxdWUgZWxlbWVudCBpZHMuICovXG5sZXQgdW5pcXVlSWQgPSAwO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6IFwic2RzLXRvb2xiYXJcIixcbiAgZXhwb3J0QXM6IFwic2RzVG9vbGJhclwiLFxuICB0ZW1wbGF0ZVVybDogXCJ0b29sYmFyLmNvbXBvbmVudC5odG1sXCIsXG4gIGFuaW1hdGlvbnM6IFtzZHNUb29sYmFyQW5pbWF0aW9ucy5ib2R5RXhwYW5zaW9uXSxcbiAgaG9zdDoge1xuICAgIGNsYXNzOiBcInNkcy10b29sYmFyXCIsXG4gICAgXCJbY2xhc3Muc2RzLXRvb2xiYXItLWV4cGFuZGVkXVwiOiBcImV4cGFuZGVkXCJcbiAgfVxufSlcbmV4cG9ydCBjbGFzcyBTZHNUb29sYmFyQ29tcG9uZW50IHtcbiAgLyoqIFRoZSB1bmlxdWUgVG9vbGJhciBpZC4gKi9cbiAgcmVhZG9ubHkgaWQgPSB1bmlxdWVJZCsrO1xuXG4gIC8qKiBJRCBmb3IgdGhlIGhlYWRlciBlbGVtZW50LiBVc2VkIGZvciBhMTF5IGxhYmVsbGluZy4gKi9cbiAgcmVhZG9ubHkgX2hlYWRlcklkOiBzdHJpbmcgPSBgc2RzLXRvb2xiYXItaGVhZGVyLSR7dGhpcy5pZH1gO1xuXG4gIC8qKiBJRCBmb3IgdGhlIGNvbnRlbnQgZWxlbWVudC4gVXNlZCBmb3IgYTExeSBsYWJlbGxpbmcuICovXG4gIHJlYWRvbmx5IF9jb250ZW50SWQ6IHN0cmluZyA9IGBzZHMtdG9vbGJhci1jb250ZW50LSR7dGhpcy5pZH1gO1xuXG4gIGNvbnN0cnVjdG9yKCkge31cblxuICAvKiogRW1pdHMgd2hlbmV2ZXIgdGhlIGV4cGFuZGVkIHN0YXRlIG9mIHRoZSB0b29sYmFyIGNoYW5nZXMuICovXG4gIEBPdXRwdXQoKSBleHBhbmRlZENoYW5nZTogRXZlbnRFbWl0dGVyPGJvb2xlYW4+ID0gbmV3IEV2ZW50RW1pdHRlcjxib29sZWFuPigpO1xuXG4gIC8qKiBXaGV0aGVyIHRoZSB0b29sYmFyIGlzIGV4cGFuZGVkLiAqL1xuICBASW5wdXQoKVxuICBnZXQgZXhwYW5kZWQoKTogYW55IHtcbiAgICByZXR1cm4gdGhpcy5fZXhwYW5kZWQ7XG4gIH1cbiAgc2V0IGV4cGFuZGVkKGV4cGFuZGVkOiBhbnkpIHtcbiAgICBleHBhbmRlZCA9IGNvZXJjZUJvb2xlYW5Qcm9wZXJ0eShleHBhbmRlZCk7XG5cbiAgICAvLyBPbmx5IGVtaXQgZXZlbnRzIGFuZCB1cGRhdGUgdGhlIGludGVybmFsIHZhbHVlIGlmIHRoZSB2YWx1ZSBjaGFuZ2VzLlxuICAgIGlmICh0aGlzLl9leHBhbmRlZCAhPT0gZXhwYW5kZWQpIHtcbiAgICAgIHRoaXMuX2V4cGFuZGVkID0gZXhwYW5kZWQ7XG4gICAgICB0aGlzLmV4cGFuZGVkQ2hhbmdlLmVtaXQoZXhwYW5kZWQpO1xuICAgIH1cbiAgfVxuICBwcml2YXRlIF9leHBhbmRlZCA9IGZhbHNlO1xuXG4gIC8qKiBXaGV0aGVyIHRoZSB0b29sYmFyIGlzIGRpc2FibGVkLiAqL1xuICBASW5wdXQoKVxuICBnZXQgZGlzYWJsZWQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2Rpc2FibGVkO1xuICB9XG4gIHNldCBkaXNhYmxlZChkaXNhYmxlZDogYW55KSB7XG4gICAgdGhpcy5fZGlzYWJsZWQgPSBjb2VyY2VCb29sZWFuUHJvcGVydHkoZGlzYWJsZWQpO1xuICB9XG4gIHByaXZhdGUgX2Rpc2FibGVkOiBib29sZWFuID0gZmFsc2U7XG5cbiAgLyoqIFdpZHRoIG9mIHRoZSB0b29sYmFyIHdoZW4gaXMgZXhwYW5kZWQuICovXG4gIEBJbnB1dCgpIGV4cGFuZGVkV2lkdGg6IHN0cmluZyA9IFwiMzAwcHhcIjtcblxuICAvLyBFbGVtZW50cyB0aGF0IHN1cnJvdW5kIHRoZSB0b29sYmFyIG5lZWQgdG8gbWFrZSBzcGFjZSBmb3IgdGhlIGV4cGFuZGVkIHRvb2xiYXIuXG4gIC8vIEFkZGluZyAyMCBtb3JlIHBpeGVzIHRvIHByb3ZpZGUgcGFkZGluZ1xuICBASW5wdXQoKSBleHBhbmRlZFNwYWNlOiBzdHJpbmcgPSBcIjIwcHhcIjtcblxuICAvKiogVG9nZ2xlcyB0aGUgZXhwYW5kZWQgc3RhdGUgb2YgdGhlIHRvb2xiYXIuICovXG4gIHRvZ2dsZSgpIHtcbiAgICB0aGlzLmV4cGFuZGVkID0gIXRoaXMuZXhwYW5kZWQ7XG4gIH1cblxuICAvKiogR2V0cyB0aGUgZXhwYW5kZWQgc3RhdGUgc3RyaW5nLiAqL1xuICBfZ2V0RXhwYW5kZWRTdGF0ZSgpOiBTZHNUb29sYmFyU3RhdGUge1xuICAgIHJldHVybiB0aGlzLmV4cGFuZGVkID8gXCJleHBhbmRlZFwiIDogXCJjb2xsYXBzZWRcIjtcbiAgfVxufVxuIl19