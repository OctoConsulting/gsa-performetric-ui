/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, ElementRef, Input, Renderer2 } from "@angular/core";
import { SdsToolbarComponent } from "./toolbar.component";
var SdsToolbarExpandDirective = /** @class */ (function () {
    function SdsToolbarExpandDirective(renderer, _element) {
        this.renderer = renderer;
        this._element = _element;
    }
    Object.defineProperty(SdsToolbarExpandDirective.prototype, "toolbar", {
        /** References the toolbar instance that the element its associated with. */
        get: /**
         * References the toolbar instance that the element its associated with.
         * @return {?}
         */
        function () {
            return this._toolbar;
        },
        set: /**
         * @param {?} toolbar
         * @return {?}
         */
        function (toolbar) {
            if (toolbar === this._toolbar) {
                return;
            }
            this._toolbar = toolbar;
            /** Sets toolbar expanded width */
            this._expandedWidth = this._toolbar.expandedSpace;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    SdsToolbarExpandDirective.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.setStyle(this.toolbar.expanded);
        this.toolbar.expandedChange.subscribe((/**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            _this.setStyle(value);
        }));
    };
    /**
     * @private
     * @param {?} value
     * @return {?}
     */
    SdsToolbarExpandDirective.prototype.setStyle = /**
     * @private
     * @param {?} value
     * @return {?}
     */
    function (value) {
        if (value) {
            this.renderer.setStyle(this._element.nativeElement, "margin-left", "" + this._expandedWidth);
        }
        else {
            this.renderer.removeStyle(this._element.nativeElement, "margin-left");
        }
    };
    SdsToolbarExpandDirective.decorators = [
        { type: Directive, args: [{
                    selector: "[sdsToolbarExpand]"
                },] }
    ];
    /** @nocollapse */
    SdsToolbarExpandDirective.ctorParameters = function () { return [
        { type: Renderer2 },
        { type: ElementRef }
    ]; };
    SdsToolbarExpandDirective.propDecorators = {
        toolbar: [{ type: Input, args: ["sdsToolbarExpand",] }]
    };
    return SdsToolbarExpandDirective;
}());
export { SdsToolbarExpandDirective };
if (false) {
    /**
     * Width of the toolbar while expanded.
     * @type {?}
     */
    SdsToolbarExpandDirective.prototype._expandedWidth;
    /**
     * @type {?}
     * @private
     */
    SdsToolbarExpandDirective.prototype._toolbar;
    /**
     * @type {?}
     * @private
     */
    SdsToolbarExpandDirective.prototype.renderer;
    /**
     * @type {?}
     * @private
     */
    SdsToolbarExpandDirective.prototype._element;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG9vbGJhci1leHBhbmQuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGdzYS1zYW0vY29tcG9uZW50cy8iLCJzb3VyY2VzIjpbImxpYi90b29sYmFyL3Rvb2xiYXItZXhwYW5kLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQUUsS0FBSyxFQUFFLFNBQVMsRUFBVSxNQUFNLGVBQWUsQ0FBQztBQUNoRixPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUUxRDtJQXVCRSxtQ0FBb0IsUUFBbUIsRUFBVSxRQUFvQjtRQUFqRCxhQUFRLEdBQVIsUUFBUSxDQUFXO1FBQVUsYUFBUSxHQUFSLFFBQVEsQ0FBWTtJQUFJLENBQUM7SUFmMUUsc0JBQ0ksOENBQU87UUFGWCw0RUFBNEU7Ozs7O1FBQzVFO1lBRUUsT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDO1FBQ3ZCLENBQUM7Ozs7O1FBQ0QsVUFBWSxPQUE0QjtZQUN0QyxJQUFJLE9BQU8sS0FBSyxJQUFJLENBQUMsUUFBUSxFQUFFO2dCQUM3QixPQUFPO2FBQ1I7WUFDRCxJQUFJLENBQUMsUUFBUSxHQUFHLE9BQU8sQ0FBQztZQUN4QixrQ0FBa0M7WUFFbEMsSUFBSSxDQUFDLGNBQWMsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLGFBQWEsQ0FBQztRQUNwRCxDQUFDOzs7T0FUQTs7OztJQWFELDRDQUFROzs7SUFBUjtRQUFBLGlCQUtDO1FBSkMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQ3JDLElBQUksQ0FBQyxPQUFPLENBQUMsY0FBYyxDQUFDLFNBQVM7Ozs7UUFBQyxVQUFBLEtBQUs7WUFDekMsS0FBSSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUN2QixDQUFDLEVBQUMsQ0FBQztJQUNMLENBQUM7Ozs7OztJQUVPLDRDQUFROzs7OztJQUFoQixVQUFpQixLQUFVO1FBQ3pCLElBQUksS0FBSyxFQUFFO1lBQ1QsSUFBSSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxhQUFhLEVBQUUsYUFBYSxFQUFFLEtBQUcsSUFBSSxDQUFDLGNBQWdCLENBQUMsQ0FBQztTQUM5RjthQUNJO1lBQ0gsSUFBSSxDQUFDLFFBQVEsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxhQUFhLEVBQUUsYUFBYSxDQUFDLENBQUM7U0FDdkU7SUFDSCxDQUFDOztnQkF0Q0YsU0FBUyxTQUFDO29CQUNULFFBQVEsRUFBRSxvQkFBb0I7aUJBQy9COzs7O2dCQUxzQyxTQUFTO2dCQUE1QixVQUFVOzs7MEJBVzNCLEtBQUssU0FBQyxrQkFBa0I7O0lBK0IzQixnQ0FBQztDQUFBLEFBdkNELElBdUNDO1NBcENZLHlCQUF5Qjs7Ozs7O0lBRXBDLG1EQUF1Qjs7Ozs7SUFnQnZCLDZDQUFzQzs7Ozs7SUFFMUIsNkNBQTJCOzs7OztJQUFFLDZDQUE0QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpcmVjdGl2ZSwgRWxlbWVudFJlZiwgSW5wdXQsIFJlbmRlcmVyMiwgT25Jbml0IH0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcbmltcG9ydCB7IFNkc1Rvb2xiYXJDb21wb25lbnQgfSBmcm9tIFwiLi90b29sYmFyLmNvbXBvbmVudFwiO1xuXG5ARGlyZWN0aXZlKHtcbiAgc2VsZWN0b3I6IFwiW3Nkc1Rvb2xiYXJFeHBhbmRdXCJcbn0pXG5leHBvcnQgY2xhc3MgU2RzVG9vbGJhckV4cGFuZERpcmVjdGl2ZSBpbXBsZW1lbnRzIE9uSW5pdCB7XG4gIC8qKiBXaWR0aCBvZiB0aGUgdG9vbGJhciB3aGlsZSBleHBhbmRlZC4gKi9cbiAgX2V4cGFuZGVkV2lkdGg6IHN0cmluZztcblxuICAvKiogUmVmZXJlbmNlcyB0aGUgdG9vbGJhciBpbnN0YW5jZSB0aGF0IHRoZSBlbGVtZW50IGl0cyBhc3NvY2lhdGVkIHdpdGguICovXG4gIEBJbnB1dChcInNkc1Rvb2xiYXJFeHBhbmRcIilcbiAgZ2V0IHRvb2xiYXIoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3Rvb2xiYXI7XG4gIH1cbiAgc2V0IHRvb2xiYXIodG9vbGJhcjogU2RzVG9vbGJhckNvbXBvbmVudCkge1xuICAgIGlmICh0b29sYmFyID09PSB0aGlzLl90b29sYmFyKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRoaXMuX3Rvb2xiYXIgPSB0b29sYmFyO1xuICAgIC8qKiBTZXRzIHRvb2xiYXIgZXhwYW5kZWQgd2lkdGggKi9cblxuICAgIHRoaXMuX2V4cGFuZGVkV2lkdGggPSB0aGlzLl90b29sYmFyLmV4cGFuZGVkU3BhY2U7XG4gIH1cbiAgcHJpdmF0ZSBfdG9vbGJhcjogU2RzVG9vbGJhckNvbXBvbmVudDtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIHJlbmRlcmVyOiBSZW5kZXJlcjIsIHByaXZhdGUgX2VsZW1lbnQ6IEVsZW1lbnRSZWYpIHsgfVxuICBuZ09uSW5pdCgpIHtcbiAgICB0aGlzLnNldFN0eWxlKHRoaXMudG9vbGJhci5leHBhbmRlZCk7XG4gICAgdGhpcy50b29sYmFyLmV4cGFuZGVkQ2hhbmdlLnN1YnNjcmliZSh2YWx1ZSA9PiB7XG4gICAgICB0aGlzLnNldFN0eWxlKHZhbHVlKTtcbiAgICB9KTtcbiAgfVxuXG4gIHByaXZhdGUgc2V0U3R5bGUodmFsdWU6IGFueSkge1xuICAgIGlmICh2YWx1ZSkge1xuICAgICAgdGhpcy5yZW5kZXJlci5zZXRTdHlsZSh0aGlzLl9lbGVtZW50Lm5hdGl2ZUVsZW1lbnQsIFwibWFyZ2luLWxlZnRcIiwgYCR7dGhpcy5fZXhwYW5kZWRXaWR0aH1gKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICB0aGlzLnJlbmRlcmVyLnJlbW92ZVN0eWxlKHRoaXMuX2VsZW1lbnQubmF0aXZlRWxlbWVudCwgXCJtYXJnaW4tbGVmdFwiKTtcbiAgICB9XG4gIH1cbn1cbiJdfQ==