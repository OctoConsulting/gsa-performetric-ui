/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var SDSSelectedItemModelHelper = /** @class */ (function () {
    function SDSSelectedItemModelHelper() {
    }
    /**
      *  adds an item to the collection
      * if selected mode is single it removes any existing items
      * also checks to see if that item already exists
      * keyfield is used to determine uniqueness of the item added
      * @param itemToAdd
      * @param keyField
      * @param selectionMode
      * @param items
      */
    /**
     *  adds an item to the collection
     * if selected mode is single it removes any existing items
     * also checks to see if that item already exists
     * keyfield is used to determine uniqueness of the item added
     * @param {?} itemToAdd
     * @param {?} keyField
     * @param {?} selectionMode
     * @param {?} items
     * @return {?}
     */
    SDSSelectedItemModelHelper.addItem = /**
     *  adds an item to the collection
     * if selected mode is single it removes any existing items
     * also checks to see if that item already exists
     * keyfield is used to determine uniqueness of the item added
     * @param {?} itemToAdd
     * @param {?} keyField
     * @param {?} selectionMode
     * @param {?} items
     * @return {?}
     */
    function (itemToAdd, keyField, selectionMode, items) {
        if (!SDSSelectedItemModelHelper.contatinsItem(itemToAdd[keyField], keyField, items)) {
            if (selectionMode === SelectionMode.SINGLE) {
                SDSSelectedItemModelHelper.clearItems(items);
            }
            items.push(itemToAdd);
        }
    };
    /**
     * adds an array of items to the list and will not add duplicate items
     * keyfield is used to determine uniqueness of the item added
     * @param toAddItems
     * @param keyField
     * @param selectionMode
     * @param items
     */
    /**
     * adds an array of items to the list and will not add duplicate items
     * keyfield is used to determine uniqueness of the item added
     * @param {?} toAddItems
     * @param {?} keyField
     * @param {?} selectionMode
     * @param {?} items
     * @return {?}
     */
    SDSSelectedItemModelHelper.addItems = /**
     * adds an array of items to the list and will not add duplicate items
     * keyfield is used to determine uniqueness of the item added
     * @param {?} toAddItems
     * @param {?} keyField
     * @param {?} selectionMode
     * @param {?} items
     * @return {?}
     */
    function (toAddItems, keyField, selectionMode, items) {
        for (var i = 0; i < toAddItems.length; i++) {
            SDSSelectedItemModelHelper.addItem(toAddItems[i], keyField, selectionMode, items);
        }
    };
    /**
     * removes the item from the list
     * keyfield is used to determine uniqueness of the item added
     * @param item
     * @param keyField
     * @param items
     */
    /**
     * removes the item from the list
     * keyfield is used to determine uniqueness of the item added
     * @param {?} item
     * @param {?} keyField
     * @param {?} items
     * @return {?}
     */
    SDSSelectedItemModelHelper.removeItem = /**
     * removes the item from the list
     * keyfield is used to determine uniqueness of the item added
     * @param {?} item
     * @param {?} keyField
     * @param {?} items
     * @return {?}
     */
    function (item, keyField, items) {
        if (SDSSelectedItemModelHelper.contatinsItem(item[keyField], keyField, items)) {
            items.splice(items.indexOf(item), 1);
        }
    };
    /**
     * checks to see if a particular item exists by the provied key
     * keyfield is used to determine uniqueness of the item added
     * @param key
     * @param keyField
     * @param items
     */
    /**
     * checks to see if a particular item exists by the provied key
     * keyfield is used to determine uniqueness of the item added
     * @param {?} key
     * @param {?} keyField
     * @param {?} items
     * @return {?}
     */
    SDSSelectedItemModelHelper.contatinsItem = /**
     * checks to see if a particular item exists by the provied key
     * keyfield is used to determine uniqueness of the item added
     * @param {?} key
     * @param {?} keyField
     * @param {?} items
     * @return {?}
     */
    function (key, keyField, items) {
        /** @type {?} */
        var item = items.find((/**
         * @param {?} o
         * @return {?}
         */
        function (o) { return o[keyField] === key; }));
        return item !== null && item !== undefined;
    };
    /**
     * Clears the list of items
     * @param items
     */
    /**
     * Clears the list of items
     * @param {?} items
     * @return {?}
     */
    SDSSelectedItemModelHelper.clearItems = /**
     * Clears the list of items
     * @param {?} items
     * @return {?}
     */
    function (items) {
        while (items.length > 0) {
            items.pop();
        }
    };
    /**
     * updates an array of items to the list and will not add duplicate items
     * keyfield is used to determine uniqueness of the item added
     * @param selectedItems
     * @param keyField
     * @param selectionMode
     * @param items
     */
    /**
     * updates an array of items to the list and will not add duplicate items
     * keyfield is used to determine uniqueness of the item added
     * @param {?} selectedItems
     * @param {?} keyField
     * @param {?} selectionMode
     * @param {?} items
     * @return {?}
     */
    SDSSelectedItemModelHelper.replaceItems = /**
     * updates an array of items to the list and will not add duplicate items
     * keyfield is used to determine uniqueness of the item added
     * @param {?} selectedItems
     * @param {?} keyField
     * @param {?} selectionMode
     * @param {?} items
     * @return {?}
     */
    function (selectedItems, keyField, selectionMode, items) {
        //Clears Old List
        SDSSelectedItemModelHelper.clearItems(items);
        //Adds new List
        SDSSelectedItemModelHelper.addItems(selectedItems, keyField, selectionMode, items);
    };
    return SDSSelectedItemModelHelper;
}());
export { SDSSelectedItemModelHelper };
/** @enum {number} */
var SelectionMode = {
    SINGLE: 0, MULTIPLE: 1,
};
export { SelectionMode };
SelectionMode[SelectionMode.SINGLE] = 'SINGLE';
SelectionMode[SelectionMode.MULTIPLE] = 'MULTIPLE';
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2RzLXNlbGVjdGVkLWl0ZW0tbW9kZWwtaGVscGVyLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGdzYS1zYW0vY29tcG9uZW50cy8iLCJzb3VyY2VzIjpbImxpYi9zZWxlY3RlZC1yZXN1bHQvbW9kZWxzL3Nkcy1zZWxlY3RlZC1pdGVtLW1vZGVsLWhlbHBlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUE7SUFBQTtJQW9GQSxDQUFDO0lBbEZHOzs7Ozs7Ozs7UUFTSTs7Ozs7Ozs7Ozs7O0lBQ1Usa0NBQU87Ozs7Ozs7Ozs7O0lBQXJCLFVBQXNCLFNBQWlCLEVBQUUsUUFBZ0IsRUFBRSxhQUE0QixFQUFFLEtBQWU7UUFDcEcsSUFBSSxDQUFDLDBCQUEwQixDQUFDLGFBQWEsQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLEVBQUUsUUFBUSxFQUFFLEtBQUssQ0FBQyxFQUFFO1lBQ2pGLElBQUksYUFBYSxLQUFLLGFBQWEsQ0FBQyxNQUFNLEVBQUU7Z0JBQ3hDLDBCQUEwQixDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQzthQUNoRDtZQUNELEtBQUssQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7U0FDekI7SUFDTCxDQUFDO0lBRUQ7Ozs7Ozs7T0FPRzs7Ozs7Ozs7OztJQUNXLG1DQUFROzs7Ozs7Ozs7SUFBdEIsVUFBdUIsVUFBb0IsRUFBRSxRQUFnQixFQUFFLGFBQTRCLEVBQUUsS0FBZTtRQUN4RyxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsVUFBVSxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRTtZQUN4QywwQkFBMEIsQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxFQUFFLFFBQVEsRUFBRSxhQUFhLEVBQUUsS0FBSyxDQUFDLENBQUM7U0FDckY7SUFDTCxDQUFDO0lBRUQ7Ozs7OztPQU1HOzs7Ozs7Ozs7SUFDVyxxQ0FBVTs7Ozs7Ozs7SUFBeEIsVUFBeUIsSUFBWSxFQUFFLFFBQWdCLEVBQUUsS0FBZTtRQUNwRSxJQUFJLDBCQUEwQixDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLEVBQUUsUUFBUSxFQUFFLEtBQUssQ0FBQyxFQUFFO1lBQzNFLEtBQUssQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQTtTQUN2QztJQUNMLENBQUM7SUFFRDs7Ozs7O09BTUc7Ozs7Ozs7OztJQUNXLHdDQUFhOzs7Ozs7OztJQUEzQixVQUE0QixHQUFXLEVBQUUsUUFBZ0IsRUFBRSxLQUFlOztZQUNsRSxJQUFJLEdBQUcsS0FBSyxDQUFDLElBQUk7Ozs7UUFBQyxVQUFBLENBQUMsSUFBSSxPQUFBLENBQUMsQ0FBQyxRQUFRLENBQUMsS0FBSyxHQUFHLEVBQW5CLENBQW1CLEVBQUM7UUFDL0MsT0FBTyxJQUFJLEtBQUssSUFBSSxJQUFJLElBQUksS0FBSyxTQUFTLENBQUM7SUFDL0MsQ0FBQztJQUVEOzs7T0FHRzs7Ozs7O0lBQ1cscUNBQVU7Ozs7O0lBQXhCLFVBQXlCLEtBQWU7UUFDcEMsT0FBTyxLQUFLLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtZQUNyQixLQUFLLENBQUMsR0FBRyxFQUFFLENBQUM7U0FDZjtJQUNMLENBQUM7SUFFRDs7Ozs7OztPQU9HOzs7Ozs7Ozs7O0lBQ1csdUNBQVk7Ozs7Ozs7OztJQUExQixVQUEyQixhQUF1QixFQUFFLFFBQWdCLEVBQUUsYUFBNEIsRUFBRSxLQUFlO1FBQy9HLGlCQUFpQjtRQUNqQiwwQkFBMEIsQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDN0MsZUFBZTtRQUNmLDBCQUEwQixDQUFDLFFBQVEsQ0FBQyxhQUFhLEVBQUUsUUFBUSxFQUFFLGFBQWEsRUFBRSxLQUFLLENBQUMsQ0FBQztJQUN2RixDQUFDO0lBQ0wsaUNBQUM7QUFBRCxDQUFDLEFBcEZELElBb0ZDOzs7O0lBR0csU0FBTSxFQUFFLFdBQVEiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgY2xhc3MgU0RTU2VsZWN0ZWRJdGVtTW9kZWxIZWxwZXIge1xuXG4gICAgLyoqXG4gICAgICAqICBhZGRzIGFuIGl0ZW0gdG8gdGhlIGNvbGxlY3Rpb25cbiAgICAgICogaWYgc2VsZWN0ZWQgbW9kZSBpcyBzaW5nbGUgaXQgcmVtb3ZlcyBhbnkgZXhpc3RpbmcgaXRlbXNcbiAgICAgICogYWxzbyBjaGVja3MgdG8gc2VlIGlmIHRoYXQgaXRlbSBhbHJlYWR5IGV4aXN0c1xuICAgICAgKiBrZXlmaWVsZCBpcyB1c2VkIHRvIGRldGVybWluZSB1bmlxdWVuZXNzIG9mIHRoZSBpdGVtIGFkZGVkXG4gICAgICAqIEBwYXJhbSBpdGVtVG9BZGQgXG4gICAgICAqIEBwYXJhbSBrZXlGaWVsZCBcbiAgICAgICogQHBhcmFtIHNlbGVjdGlvbk1vZGUgXG4gICAgICAqIEBwYXJhbSBpdGVtcyBcbiAgICAgICovXG4gICAgcHVibGljIHN0YXRpYyBhZGRJdGVtKGl0ZW1Ub0FkZDogb2JqZWN0LCBrZXlGaWVsZDogc3RyaW5nLCBzZWxlY3Rpb25Nb2RlOiBTZWxlY3Rpb25Nb2RlLCBpdGVtczogb2JqZWN0W10pIHtcbiAgICAgICAgaWYgKCFTRFNTZWxlY3RlZEl0ZW1Nb2RlbEhlbHBlci5jb250YXRpbnNJdGVtKGl0ZW1Ub0FkZFtrZXlGaWVsZF0sIGtleUZpZWxkLCBpdGVtcykpIHtcbiAgICAgICAgICAgIGlmIChzZWxlY3Rpb25Nb2RlID09PSBTZWxlY3Rpb25Nb2RlLlNJTkdMRSkge1xuICAgICAgICAgICAgICAgIFNEU1NlbGVjdGVkSXRlbU1vZGVsSGVscGVyLmNsZWFySXRlbXMoaXRlbXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaXRlbXMucHVzaChpdGVtVG9BZGQpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogYWRkcyBhbiBhcnJheSBvZiBpdGVtcyB0byB0aGUgbGlzdCBhbmQgd2lsbCBub3QgYWRkIGR1cGxpY2F0ZSBpdGVtc1xuICAgICAqIGtleWZpZWxkIGlzIHVzZWQgdG8gZGV0ZXJtaW5lIHVuaXF1ZW5lc3Mgb2YgdGhlIGl0ZW0gYWRkZWRcbiAgICAgKiBAcGFyYW0gdG9BZGRJdGVtcyBcbiAgICAgKiBAcGFyYW0ga2V5RmllbGQgXG4gICAgICogQHBhcmFtIHNlbGVjdGlvbk1vZGUgXG4gICAgICogQHBhcmFtIGl0ZW1zIFxuICAgICAqL1xuICAgIHB1YmxpYyBzdGF0aWMgYWRkSXRlbXModG9BZGRJdGVtczogb2JqZWN0W10sIGtleUZpZWxkOiBzdHJpbmcsIHNlbGVjdGlvbk1vZGU6IFNlbGVjdGlvbk1vZGUsIGl0ZW1zOiBvYmplY3RbXSkge1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRvQWRkSXRlbXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIFNEU1NlbGVjdGVkSXRlbU1vZGVsSGVscGVyLmFkZEl0ZW0odG9BZGRJdGVtc1tpXSwga2V5RmllbGQsIHNlbGVjdGlvbk1vZGUsIGl0ZW1zKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIHJlbW92ZXMgdGhlIGl0ZW0gZnJvbSB0aGUgbGlzdFxuICAgICAqIGtleWZpZWxkIGlzIHVzZWQgdG8gZGV0ZXJtaW5lIHVuaXF1ZW5lc3Mgb2YgdGhlIGl0ZW0gYWRkZWRcbiAgICAgKiBAcGFyYW0gaXRlbSBcbiAgICAgKiBAcGFyYW0ga2V5RmllbGQgXG4gICAgICogQHBhcmFtIGl0ZW1zIFxuICAgICAqL1xuICAgIHB1YmxpYyBzdGF0aWMgcmVtb3ZlSXRlbShpdGVtOiBvYmplY3QsIGtleUZpZWxkOiBzdHJpbmcsIGl0ZW1zOiBvYmplY3RbXSkge1xuICAgICAgICBpZiAoU0RTU2VsZWN0ZWRJdGVtTW9kZWxIZWxwZXIuY29udGF0aW5zSXRlbShpdGVtW2tleUZpZWxkXSwga2V5RmllbGQsIGl0ZW1zKSkge1xuICAgICAgICAgICAgaXRlbXMuc3BsaWNlKGl0ZW1zLmluZGV4T2YoaXRlbSksIDEpXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBjaGVja3MgdG8gc2VlIGlmIGEgcGFydGljdWxhciBpdGVtIGV4aXN0cyBieSB0aGUgcHJvdmllZCBrZXlcbiAgICAgKiBrZXlmaWVsZCBpcyB1c2VkIHRvIGRldGVybWluZSB1bmlxdWVuZXNzIG9mIHRoZSBpdGVtIGFkZGVkXG4gICAgICogQHBhcmFtIGtleSBcbiAgICAgKiBAcGFyYW0ga2V5RmllbGQgXG4gICAgICogQHBhcmFtIGl0ZW1zIFxuICAgICAqL1xuICAgIHB1YmxpYyBzdGF0aWMgY29udGF0aW5zSXRlbShrZXk6IHN0cmluZywga2V5RmllbGQ6IHN0cmluZywgaXRlbXM6IG9iamVjdFtdKTogYm9vbGVhbiB7XG4gICAgICAgIGxldCBpdGVtID0gaXRlbXMuZmluZChvID0+IG9ba2V5RmllbGRdID09PSBrZXkpO1xuICAgICAgICByZXR1cm4gaXRlbSAhPT0gbnVsbCAmJiBpdGVtICE9PSB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2xlYXJzIHRoZSBsaXN0IG9mIGl0ZW1zXG4gICAgICogQHBhcmFtIGl0ZW1zIFxuICAgICAqL1xuICAgIHB1YmxpYyBzdGF0aWMgY2xlYXJJdGVtcyhpdGVtczogb2JqZWN0W10pIHtcbiAgICAgICAgd2hpbGUgKGl0ZW1zLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIGl0ZW1zLnBvcCgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogdXBkYXRlcyBhbiBhcnJheSBvZiBpdGVtcyB0byB0aGUgbGlzdCBhbmQgd2lsbCBub3QgYWRkIGR1cGxpY2F0ZSBpdGVtc1xuICAgICAqIGtleWZpZWxkIGlzIHVzZWQgdG8gZGV0ZXJtaW5lIHVuaXF1ZW5lc3Mgb2YgdGhlIGl0ZW0gYWRkZWRcbiAgICAgKiBAcGFyYW0gc2VsZWN0ZWRJdGVtcyBcbiAgICAgKiBAcGFyYW0ga2V5RmllbGQgXG4gICAgICogQHBhcmFtIHNlbGVjdGlvbk1vZGUgXG4gICAgICogQHBhcmFtIGl0ZW1zIFxuICAgICAqL1xuICAgIHB1YmxpYyBzdGF0aWMgcmVwbGFjZUl0ZW1zKHNlbGVjdGVkSXRlbXM6IG9iamVjdFtdLCBrZXlGaWVsZDogc3RyaW5nLCBzZWxlY3Rpb25Nb2RlOiBTZWxlY3Rpb25Nb2RlLCBpdGVtczogb2JqZWN0W10pIHtcbiAgICAgICAgLy9DbGVhcnMgT2xkIExpc3RcbiAgICAgICAgU0RTU2VsZWN0ZWRJdGVtTW9kZWxIZWxwZXIuY2xlYXJJdGVtcyhpdGVtcyk7XG4gICAgICAgIC8vQWRkcyBuZXcgTGlzdFxuICAgICAgICBTRFNTZWxlY3RlZEl0ZW1Nb2RlbEhlbHBlci5hZGRJdGVtcyhzZWxlY3RlZEl0ZW1zLCBrZXlGaWVsZCwgc2VsZWN0aW9uTW9kZSwgaXRlbXMpO1xuICAgIH1cbn1cblxuZXhwb3J0IGVudW0gU2VsZWN0aW9uTW9kZSB7XG4gICAgU0lOR0xFLCBNVUxUSVBMRVxufVxuIl19