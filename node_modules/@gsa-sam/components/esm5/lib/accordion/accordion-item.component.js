/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { CdkAccordionItem } from "@angular/cdk/accordion";
import { UniqueSelectionDispatcher } from '@angular/cdk/collections';
import { TemplatePortal } from '@angular/cdk/portal';
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, ContentChild, EventEmitter, ElementRef, Inject, Optional, Output, SkipSelf, ViewContainerRef, ViewEncapsulation, ViewChild } from "@angular/core";
import { DOCUMENT } from '@angular/common';
import { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';
import { Subject } from 'rxjs';
import { filter, startWith, take, distinctUntilChanged } from 'rxjs/operators';
import { sdsExpansionAnimations } from './accordion-animations';
import { SdsAccordionItemContentDirective } from './accordion-item-content.directive';
import { SDS_ACCORDION } from './accordion-base';
/**
 * Counter for generating unique element ids.
 * @type {?}
 */
var uniqueId = 0;
var SdsAccordionItemComponent = /** @class */ (function (_super) {
    tslib_1.__extends(SdsAccordionItemComponent, _super);
    function SdsAccordionItemComponent(accordion, _changeDetectorRef, _uniqueSelectionDispatcher, _viewContainerRef, _document, _animationMode) {
        var _this = _super.call(this, accordion, _changeDetectorRef, _uniqueSelectionDispatcher) || this;
        _this._viewContainerRef = _viewContainerRef;
        _this._animationMode = _animationMode;
        /**
         * An event emitted after the body's expansion animation happens.
         */
        _this.afterExpand = new EventEmitter();
        /**
         * An event emitted after the body's collapse animation happens.
         */
        _this.afterCollapse = new EventEmitter();
        /**
         * Stream that emits for changes in `\@Input` properties.
         */
        _this._inputChanges = new Subject();
        /**
         * ID for the associated header element. Used for a11y labelling.
         */
        _this._headerId = "sds-accordion-item-header-" + uniqueId++;
        /**
         * Stream of body animation done events.
         */
        _this._bodyAnimationDone = new Subject();
        _this.accordion = accordion;
        _this._document = _document;
        // We need a Subject with distinctUntilChanged, because the `done` event
        // fires twice on some browsers. See https://github.com/angular/angular/issues/24084
        _this._bodyAnimationDone.pipe(distinctUntilChanged((/**
         * @param {?} x
         * @param {?} y
         * @return {?}
         */
        function (x, y) {
            return x.fromState === y.fromState && x.toState === y.toState;
        }))).subscribe((/**
         * @param {?} event
         * @return {?}
         */
        function (event) {
            if (event.fromState !== 'void') {
                if (event.toState === 'expanded') {
                    _this.afterExpand.emit();
                }
                else if (event.toState === 'collapsed') {
                    _this.afterCollapse.emit();
                }
            }
        }));
        return _this;
    }
    /** Gets the expanded state string. */
    /**
     * Gets the expanded state string.
     * @return {?}
     */
    SdsAccordionItemComponent.prototype._getExpandedState = /**
     * Gets the expanded state string.
     * @return {?}
     */
    function () {
        return this.expanded ? 'expanded' : 'collapsed';
    };
    /**
     * @return {?}
     */
    SdsAccordionItemComponent.prototype.ngAfterContentInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this._lazyContent) {
            // Render the content as soon as the accordion item becomes open.
            this.opened.pipe(startWith((/** @type {?} */ (null))), filter((/**
             * @return {?}
             */
            function () { return _this.expanded && !_this._portal; })), take(1)).subscribe((/**
             * @return {?}
             */
            function () {
                _this._portal = new TemplatePortal(_this._lazyContent._template, _this._viewContainerRef);
            }));
        }
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    SdsAccordionItemComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        this._inputChanges.next(changes);
    };
    /**
     * @return {?}
     */
    SdsAccordionItemComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        _super.prototype.ngOnDestroy.call(this);
        this._bodyAnimationDone.complete();
        this._inputChanges.complete();
    };
    /** Checks whether the accordion item's content contains the currently-focused element. */
    /**
     * Checks whether the accordion item's content contains the currently-focused element.
     * @return {?}
     */
    SdsAccordionItemComponent.prototype._containsFocus = /**
     * Checks whether the accordion item's content contains the currently-focused element.
     * @return {?}
     */
    function () {
        if (this._body) {
            /** @type {?} */
            var focusedElement = this._document.activeElement;
            /** @type {?} */
            var bodyElement = this._body.nativeElement;
            return focusedElement === bodyElement || bodyElement.contains(focusedElement);
        }
        return false;
    };
    SdsAccordionItemComponent.decorators = [
        { type: Component, args: [{
                    selector: "sds-accordion-item",
                    exportAs: "sdsAccordionItem",
                    template: "<ng-content select=\"sds-accordion-item-header\"></ng-content>\n<div\n  class=\"sam-accordion__panel\"\n  role=\"region\"\n  [@bodyExpansion]=\"_getExpandedState()\"\n  (@bodyExpansion.done)=\"_bodyAnimationDone.next($event)\"\n  [attr.aria-labelledby]=\"_headerId\"\n  [id]=\"id\"\n  #body\n>\n  <div class=\"sds-accordion__panel-body\">\n    <ng-content></ng-content>\n    <ng-template [cdkPortalOutlet]=\"_portal\"></ng-template>\n  </div>\n</div>\n",
                    encapsulation: ViewEncapsulation.None,
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    inputs: ['disabled', 'expanded'],
                    outputs: ['opened', 'closed', 'expandedChange'],
                    animations: [sdsExpansionAnimations.bodyExpansion],
                    host: {
                        'class': 'sds-accordion__item',
                        '[class.sds-accordion__item--expanded]': 'expanded',
                        '[class._sds-animation-noopable]': '_animationMode === "NoopAnimations"'
                    }
                }] }
    ];
    /** @nocollapse */
    SdsAccordionItemComponent.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Optional }, { type: SkipSelf }, { type: Inject, args: [SDS_ACCORDION,] }] },
        { type: ChangeDetectorRef },
        { type: UniqueSelectionDispatcher },
        { type: ViewContainerRef },
        { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },
        { type: String, decorators: [{ type: Optional }, { type: Inject, args: [ANIMATION_MODULE_TYPE,] }] }
    ]; };
    SdsAccordionItemComponent.propDecorators = {
        afterExpand: [{ type: Output }],
        afterCollapse: [{ type: Output }],
        _lazyContent: [{ type: ContentChild, args: [SdsAccordionItemContentDirective,] }],
        _body: [{ type: ViewChild, args: ['body',] }]
    };
    return SdsAccordionItemComponent;
}(CdkAccordionItem));
export { SdsAccordionItemComponent };
if (false) {
    /**
     * @type {?}
     * @private
     */
    SdsAccordionItemComponent.prototype._document;
    /**
     * An event emitted after the body's expansion animation happens.
     * @type {?}
     */
    SdsAccordionItemComponent.prototype.afterExpand;
    /**
     * An event emitted after the body's collapse animation happens.
     * @type {?}
     */
    SdsAccordionItemComponent.prototype.afterCollapse;
    /**
     * Stream that emits for changes in `\@Input` properties.
     * @type {?}
     */
    SdsAccordionItemComponent.prototype._inputChanges;
    /**
     * Optionally defined accordion the accordion item belongs to.
     * @type {?}
     */
    SdsAccordionItemComponent.prototype.accordion;
    /**
     * Content that will be rendered lazily.
     * @type {?}
     */
    SdsAccordionItemComponent.prototype._lazyContent;
    /**
     * Element containing the accordion item's user-provided content.
     * @type {?}
     */
    SdsAccordionItemComponent.prototype._body;
    /**
     * Portal holding the user's content.
     * @type {?}
     */
    SdsAccordionItemComponent.prototype._portal;
    /**
     * ID for the associated header element. Used for a11y labelling.
     * @type {?}
     */
    SdsAccordionItemComponent.prototype._headerId;
    /**
     * Stream of body animation done events.
     * @type {?}
     */
    SdsAccordionItemComponent.prototype._bodyAnimationDone;
    /**
     * @type {?}
     * @private
     */
    SdsAccordionItemComponent.prototype._viewContainerRef;
    /** @type {?} */
    SdsAccordionItemComponent.prototype._animationMode;
}
//# sourceMappingURL=data:application/json;base64,