/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { FocusMonitor } from "@angular/cdk/a11y";
import { ENTER, SPACE, hasModifierKey } from "@angular/cdk/keycodes";
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, ElementRef, Host, ViewEncapsulation } from "@angular/core";
import { merge, Subscription } from "rxjs";
import { filter } from "rxjs/operators";
import { SdsAccordionItemComponent } from "./accordion-item.component";
var SdsAccordionItemHeaderComponent = /** @class */ (function () {
    function SdsAccordionItemHeaderComponent(accordionItem, _element, _focusMonitor, _changeDetectorRef) {
        var _this = this;
        this.accordionItem = accordionItem;
        this._element = _element;
        this._focusMonitor = _focusMonitor;
        this._changeDetectorRef = _changeDetectorRef;
        this._parentChangeSubscription = Subscription.EMPTY;
        // Since the toggle state depends on an @Input on the accordion item, we
        // need to subscribe and trigger change detection manually.
        this._parentChangeSubscription = merge(accordionItem.opened, accordionItem.closed, accordionItem._inputChanges.pipe(filter((/**
         * @param {?} changes
         * @return {?}
         */
        function (changes) { return !!(changes["disabled"]); })))).subscribe((/**
         * @return {?}
         */
        function () { return _this._changeDetectorRef.markForCheck(); }));
        _focusMonitor.monitor(_element).subscribe((/**
         * @param {?} origin
         * @return {?}
         */
        function (origin) {
            if (origin && accordionItem.accordion) {
                accordionItem.accordion._handleHeaderFocus(_this);
            }
        }));
    }
    Object.defineProperty(SdsAccordionItemHeaderComponent.prototype, "disabled", {
        /**
         * Whether the associated accordion item is disabled.
         * Implemented as a part of `FocusableOption`.
         */
        get: /**
         * Whether the associated accordion item is disabled.
         * Implemented as a part of `FocusableOption`.
         * @return {?}
         */
        function () {
            return this.accordionItem.disabled;
        },
        enumerable: true,
        configurable: true
    });
    /** Toggles the expanded state of the accordion item. */
    /**
     * Toggles the expanded state of the accordion item.
     * @return {?}
     */
    SdsAccordionItemHeaderComponent.prototype._toggle = /**
     * Toggles the expanded state of the accordion item.
     * @return {?}
     */
    function () {
        this.accordionItem.toggle();
    };
    /** Gets whether the accordion item is expanded. */
    /**
     * Gets whether the accordion item is expanded.
     * @return {?}
     */
    SdsAccordionItemHeaderComponent.prototype._isExpanded = /**
     * Gets whether the accordion item is expanded.
     * @return {?}
     */
    function () {
        return this.accordionItem.expanded;
    };
    /** Gets the accordion item id. */
    /**
     * Gets the accordion item id.
     * @return {?}
     */
    SdsAccordionItemHeaderComponent.prototype._getAccordionItemId = /**
     * Gets the accordion item id.
     * @return {?}
     */
    function () {
        return this.accordionItem.id;
    };
    /** Handle keydown event calling to toggle() if appropriate. */
    /**
     * Handle keydown event calling to toggle() if appropriate.
     * @param {?} event
     * @return {?}
     */
    SdsAccordionItemHeaderComponent.prototype._keydown = /**
     * Handle keydown event calling to toggle() if appropriate.
     * @param {?} event
     * @return {?}
     */
    function (event) {
        switch (event.keyCode) {
            // Toggle for space and enter keys.
            case SPACE:
            case ENTER:
                if (!hasModifierKey(event)) {
                    event.preventDefault();
                    this._toggle();
                }
                break;
            default:
                if (this.accordionItem.accordion) {
                    this.accordionItem.accordion._handleHeaderKeydown(event);
                }
                return;
        }
    };
    /**
     * Focuses the item header. Implemented as a part of `FocusableOption`.
     * @param origin Origin of the action that triggered the focus.
     * @docs-private
     */
    /**
     * Focuses the item header. Implemented as a part of `FocusableOption`.
     * \@docs-private
     * @param {?=} origin Origin of the action that triggered the focus.
     * @return {?}
     */
    SdsAccordionItemHeaderComponent.prototype.focus = /**
     * Focuses the item header. Implemented as a part of `FocusableOption`.
     * \@docs-private
     * @param {?=} origin Origin of the action that triggered the focus.
     * @return {?}
     */
    function (origin) {
        if (origin === void 0) { origin = "program"; }
        this._focusMonitor.focusVia(this._element, origin);
    };
    /**
     * @return {?}
     */
    SdsAccordionItemHeaderComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this._parentChangeSubscription.unsubscribe();
        this._focusMonitor.stopMonitoring(this._element);
    };
    SdsAccordionItemHeaderComponent.decorators = [
        { type: Component, args: [{
                    selector: "sds-accordion-item-header",
                    template: "<span class=\"sds-accordion__title\" role=\"heading\">\n  <span class=\"sds-accordion__title-text\">\n    <ng-content></ng-content>\n  </span>\n  <span class=\"sds-accordion__icon\"></span>\n</span>\n",
                    encapsulation: ViewEncapsulation.None,
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    host: {
                        class: "sds-accordion__trigger",
                        role: "button",
                        "[attr.id]": "accordionItem._headerId",
                        "[attr.tabindex]": "disabled ? -1 : 0",
                        "[attr.aria-controls]": "_getAccordionItemId()",
                        "[attr.aria-expanded]": "_isExpanded()",
                        "[attr.aria-disabled]": "accordionItem.disabled",
                        "(click)": "_toggle()",
                        "(keydown)": "_keydown($event)"
                    },
                    styles: [""]
                }] }
    ];
    /** @nocollapse */
    SdsAccordionItemHeaderComponent.ctorParameters = function () { return [
        { type: SdsAccordionItemComponent, decorators: [{ type: Host }] },
        { type: ElementRef },
        { type: FocusMonitor },
        { type: ChangeDetectorRef }
    ]; };
    return SdsAccordionItemHeaderComponent;
}());
export { SdsAccordionItemHeaderComponent };
if (false) {
    /**
     * @type {?}
     * @private
     */
    SdsAccordionItemHeaderComponent.prototype._parentChangeSubscription;
    /** @type {?} */
    SdsAccordionItemHeaderComponent.prototype.accordionItem;
    /**
     * @type {?}
     * @private
     */
    SdsAccordionItemHeaderComponent.prototype._element;
    /**
     * @type {?}
     * @private
     */
    SdsAccordionItemHeaderComponent.prototype._focusMonitor;
    /**
     * @type {?}
     * @private
     */
    SdsAccordionItemHeaderComponent.prototype._changeDetectorRef;
}
//# sourceMappingURL=data:application/json;base64,