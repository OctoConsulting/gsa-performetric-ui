/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Directive, Input, ContentChildren, QueryList } from "@angular/core";
import { CdkAccordion } from "@angular/cdk/accordion";
import { FocusKeyManager } from "@angular/cdk/a11y";
import { HOME, END } from "@angular/cdk/keycodes";
import { SDS_ACCORDION } from "./accordion-base";
import { SdsAccordionItemHeaderComponent } from "./accordion-item-header.component";
var SdsAccordionDirective = /** @class */ (function (_super) {
    tslib_1.__extends(SdsAccordionDirective, _super);
    function SdsAccordionDirective() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.displayMode = "default";
        return _this;
    }
    /**
     * @return {?}
     */
    SdsAccordionDirective.prototype.ngAfterContentInit = /**
     * @return {?}
     */
    function () {
        this._keyManager = new FocusKeyManager(this._headers).withWrap();
    };
    /** Handles keyboard events coming in from the item headers. */
    /**
     * Handles keyboard events coming in from the item headers.
     * @param {?} event
     * @return {?}
     */
    SdsAccordionDirective.prototype._handleHeaderKeydown = /**
     * Handles keyboard events coming in from the item headers.
     * @param {?} event
     * @return {?}
     */
    function (event) {
        var keyCode = event.keyCode;
        if (keyCode === HOME) {
            this._keyManager.setFirstItemActive();
            event.preventDefault();
        }
        else if (keyCode === END) {
            this._keyManager.setLastItemActive();
            event.preventDefault();
        }
        else {
            this._keyManager.onKeydown(event);
        }
    };
    /**
     * @param {?} header
     * @return {?}
     */
    SdsAccordionDirective.prototype._handleHeaderFocus = /**
     * @param {?} header
     * @return {?}
     */
    function (header) {
        this._keyManager.updateActiveItem(header);
    };
    SdsAccordionDirective.decorators = [
        { type: Directive, args: [{
                    selector: "sds-accordion",
                    exportAs: "sdsAccordion",
                    inputs: ["multi"],
                    providers: [
                        {
                            provide: SDS_ACCORDION,
                            useExisting: SdsAccordionDirective
                        }
                    ],
                    host: {
                        'class': 'sds-accordion',
                        '[class.sds-accordion--basic]': 'displayMode === "basic"',
                    }
                },] }
    ];
    SdsAccordionDirective.propDecorators = {
        _headers: [{ type: ContentChildren, args: [SdsAccordionItemHeaderComponent, { descendants: true },] }],
        displayMode: [{ type: Input }]
    };
    return SdsAccordionDirective;
}(CdkAccordion));
export { SdsAccordionDirective };
if (false) {
    /**
     * @type {?}
     * @private
     */
    SdsAccordionDirective.prototype._keyManager;
    /** @type {?} */
    SdsAccordionDirective.prototype._headers;
    /** @type {?} */
    SdsAccordionDirective.prototype.displayMode;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWNjb3JkaW9uLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Bnc2Etc2FtL2NvbXBvbmVudHMvIiwic291cmNlcyI6WyJsaWIvYWNjb3JkaW9uL2FjY29yZGlvbi5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQ0wsU0FBUyxFQUNULEtBQUssRUFDTCxlQUFlLEVBQ2YsU0FBUyxFQUVWLE1BQU0sZUFBZSxDQUFDO0FBRXZCLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUN0RCxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFDcEQsT0FBTyxFQUFFLElBQUksRUFBRSxHQUFHLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUNsRCxPQUFPLEVBQ0wsYUFBYSxFQUdkLE1BQU0sa0JBQWtCLENBQUM7QUFDMUIsT0FBTyxFQUFFLCtCQUErQixFQUFFLE1BQU0sbUNBQW1DLENBQUM7QUFFcEY7SUFlMkMsaURBQVk7SUFmdkQ7UUFBQSxxRUE2Q0M7UUF2QlUsaUJBQVcsR0FBNEIsU0FBUyxDQUFDOztJQXVCNUQsQ0FBQzs7OztJQXJCQyxrREFBa0I7OztJQUFsQjtRQUNFLElBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSxlQUFlLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQ25FLENBQUM7SUFFRCwrREFBK0Q7Ozs7OztJQUMvRCxvREFBb0I7Ozs7O0lBQXBCLFVBQXFCLEtBQW9CO1FBQy9CLElBQUEsdUJBQU87UUFDZixJQUFJLE9BQU8sS0FBSyxJQUFJLEVBQUU7WUFDcEIsSUFBSSxDQUFDLFdBQVcsQ0FBQyxrQkFBa0IsRUFBRSxDQUFDO1lBQ3RDLEtBQUssQ0FBQyxjQUFjLEVBQUUsQ0FBQztTQUN4QjthQUFNLElBQUksT0FBTyxLQUFLLEdBQUcsRUFBRTtZQUMxQixJQUFJLENBQUMsV0FBVyxDQUFDLGlCQUFpQixFQUFFLENBQUM7WUFDckMsS0FBSyxDQUFDLGNBQWMsRUFBRSxDQUFDO1NBQ3hCO2FBQU07WUFDTCxJQUFJLENBQUMsV0FBVyxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQztTQUNuQztJQUNILENBQUM7Ozs7O0lBRUQsa0RBQWtCOzs7O0lBQWxCLFVBQW1CLE1BQXVDO1FBQ3hELElBQUksQ0FBQyxXQUFXLENBQUMsZ0JBQWdCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUMsQ0FBQzs7Z0JBNUNGLFNBQVMsU0FBQztvQkFDVCxRQUFRLEVBQUUsZUFBZTtvQkFDekIsUUFBUSxFQUFFLGNBQWM7b0JBQ3hCLE1BQU0sRUFBRSxDQUFDLE9BQU8sQ0FBQztvQkFDakIsU0FBUyxFQUFFO3dCQUNUOzRCQUNFLE9BQU8sRUFBRSxhQUFhOzRCQUN0QixXQUFXLEVBQUUscUJBQXFCO3lCQUNuQztxQkFDRjtvQkFDRCxJQUFJLEVBQUU7d0JBQ0osT0FBTyxFQUFFLGVBQWU7d0JBQ3hCLDhCQUE4QixFQUFFLHlCQUF5QjtxQkFDMUQ7aUJBQ0Y7OzsyQkFLRSxlQUFlLFNBQUMsK0JBQStCLEVBQUUsRUFBRSxXQUFXLEVBQUUsSUFBSSxFQUFFOzhCQUd0RSxLQUFLOztJQXVCUiw0QkFBQztDQUFBLEFBN0NELENBZTJDLFlBQVksR0E4QnREO1NBOUJZLHFCQUFxQjs7Ozs7O0lBRWhDLDRDQUFzRTs7SUFFdEUseUNBQ3FEOztJQUVyRCw0Q0FBMEQiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBEaXJlY3RpdmUsXG4gIElucHV0LFxuICBDb250ZW50Q2hpbGRyZW4sXG4gIFF1ZXJ5TGlzdCxcbiAgQWZ0ZXJDb250ZW50SW5pdFxufSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xuXG5pbXBvcnQgeyBDZGtBY2NvcmRpb24gfSBmcm9tIFwiQGFuZ3VsYXIvY2RrL2FjY29yZGlvblwiO1xuaW1wb3J0IHsgRm9jdXNLZXlNYW5hZ2VyIH0gZnJvbSBcIkBhbmd1bGFyL2Nkay9hMTF5XCI7XG5pbXBvcnQgeyBIT01FLCBFTkQgfSBmcm9tIFwiQGFuZ3VsYXIvY2RrL2tleWNvZGVzXCI7XG5pbXBvcnQge1xuICBTRFNfQUNDT1JESU9OLFxuICBTZHNBY2NvcmRpb25CYXNlLFxuICBTZHNBY2NvcmRpb25EaXNwbGF5TW9kZVxufSBmcm9tIFwiLi9hY2NvcmRpb24tYmFzZVwiO1xuaW1wb3J0IHsgU2RzQWNjb3JkaW9uSXRlbUhlYWRlckNvbXBvbmVudCB9IGZyb20gXCIuL2FjY29yZGlvbi1pdGVtLWhlYWRlci5jb21wb25lbnRcIjtcblxuQERpcmVjdGl2ZSh7XG4gIHNlbGVjdG9yOiBcInNkcy1hY2NvcmRpb25cIixcbiAgZXhwb3J0QXM6IFwic2RzQWNjb3JkaW9uXCIsXG4gIGlucHV0czogW1wibXVsdGlcIl0sXG4gIHByb3ZpZGVyczogW1xuICAgIHtcbiAgICAgIHByb3ZpZGU6IFNEU19BQ0NPUkRJT04sXG4gICAgICB1c2VFeGlzdGluZzogU2RzQWNjb3JkaW9uRGlyZWN0aXZlXG4gICAgfVxuICBdLFxuICBob3N0OiB7XG4gICAgJ2NsYXNzJzogJ3Nkcy1hY2NvcmRpb24nLFxuICAgICdbY2xhc3Muc2RzLWFjY29yZGlvbi0tYmFzaWNdJzogJ2Rpc3BsYXlNb2RlID09PSBcImJhc2ljXCInLFxuICB9XG59KVxuZXhwb3J0IGNsYXNzIFNkc0FjY29yZGlvbkRpcmVjdGl2ZSBleHRlbmRzIENka0FjY29yZGlvblxuICBpbXBsZW1lbnRzIFNkc0FjY29yZGlvbkJhc2UsIEFmdGVyQ29udGVudEluaXQge1xuICBwcml2YXRlIF9rZXlNYW5hZ2VyOiBGb2N1c0tleU1hbmFnZXI8U2RzQWNjb3JkaW9uSXRlbUhlYWRlckNvbXBvbmVudD47XG5cbiAgQENvbnRlbnRDaGlsZHJlbihTZHNBY2NvcmRpb25JdGVtSGVhZGVyQ29tcG9uZW50LCB7IGRlc2NlbmRhbnRzOiB0cnVlIH0pXG4gIF9oZWFkZXJzOiBRdWVyeUxpc3Q8U2RzQWNjb3JkaW9uSXRlbUhlYWRlckNvbXBvbmVudD47XG5cbiAgQElucHV0KCkgZGlzcGxheU1vZGU6IFNkc0FjY29yZGlvbkRpc3BsYXlNb2RlID0gXCJkZWZhdWx0XCI7XG5cbiAgbmdBZnRlckNvbnRlbnRJbml0KCkge1xuICAgIHRoaXMuX2tleU1hbmFnZXIgPSBuZXcgRm9jdXNLZXlNYW5hZ2VyKHRoaXMuX2hlYWRlcnMpLndpdGhXcmFwKCk7XG4gIH1cblxuICAvKiogSGFuZGxlcyBrZXlib2FyZCBldmVudHMgY29taW5nIGluIGZyb20gdGhlIGl0ZW0gaGVhZGVycy4gKi9cbiAgX2hhbmRsZUhlYWRlcktleWRvd24oZXZlbnQ6IEtleWJvYXJkRXZlbnQpIHtcbiAgICBjb25zdCB7IGtleUNvZGUgfSA9IGV2ZW50O1xuICAgIGlmIChrZXlDb2RlID09PSBIT01FKSB7XG4gICAgICB0aGlzLl9rZXlNYW5hZ2VyLnNldEZpcnN0SXRlbUFjdGl2ZSgpO1xuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICB9IGVsc2UgaWYgKGtleUNvZGUgPT09IEVORCkge1xuICAgICAgdGhpcy5fa2V5TWFuYWdlci5zZXRMYXN0SXRlbUFjdGl2ZSgpO1xuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5fa2V5TWFuYWdlci5vbktleWRvd24oZXZlbnQpO1xuICAgIH1cbiAgfVxuXG4gIF9oYW5kbGVIZWFkZXJGb2N1cyhoZWFkZXI6IFNkc0FjY29yZGlvbkl0ZW1IZWFkZXJDb21wb25lbnQpIHtcbiAgICB0aGlzLl9rZXlNYW5hZ2VyLnVwZGF0ZUFjdGl2ZUl0ZW0oaGVhZGVyKTtcbiAgfVxufVxuIl19