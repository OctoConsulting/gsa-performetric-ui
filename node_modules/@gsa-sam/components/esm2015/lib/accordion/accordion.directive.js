/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, Input, ContentChildren, QueryList } from "@angular/core";
import { CdkAccordion } from "@angular/cdk/accordion";
import { FocusKeyManager } from "@angular/cdk/a11y";
import { HOME, END } from "@angular/cdk/keycodes";
import { SDS_ACCORDION } from "./accordion-base";
import { SdsAccordionItemHeaderComponent } from "./accordion-item-header.component";
export class SdsAccordionDirective extends CdkAccordion {
    constructor() {
        super(...arguments);
        this.displayMode = "default";
    }
    /**
     * @return {?}
     */
    ngAfterContentInit() {
        this._keyManager = new FocusKeyManager(this._headers).withWrap();
    }
    /**
     * Handles keyboard events coming in from the item headers.
     * @param {?} event
     * @return {?}
     */
    _handleHeaderKeydown(event) {
        const { keyCode } = event;
        if (keyCode === HOME) {
            this._keyManager.setFirstItemActive();
            event.preventDefault();
        }
        else if (keyCode === END) {
            this._keyManager.setLastItemActive();
            event.preventDefault();
        }
        else {
            this._keyManager.onKeydown(event);
        }
    }
    /**
     * @param {?} header
     * @return {?}
     */
    _handleHeaderFocus(header) {
        this._keyManager.updateActiveItem(header);
    }
}
SdsAccordionDirective.decorators = [
    { type: Directive, args: [{
                selector: "sds-accordion",
                exportAs: "sdsAccordion",
                inputs: ["multi"],
                providers: [
                    {
                        provide: SDS_ACCORDION,
                        useExisting: SdsAccordionDirective
                    }
                ],
                host: {
                    'class': 'sds-accordion',
                    '[class.sds-accordion--basic]': 'displayMode === "basic"',
                }
            },] }
];
SdsAccordionDirective.propDecorators = {
    _headers: [{ type: ContentChildren, args: [SdsAccordionItemHeaderComponent, { descendants: true },] }],
    displayMode: [{ type: Input }]
};
if (false) {
    /**
     * @type {?}
     * @private
     */
    SdsAccordionDirective.prototype._keyManager;
    /** @type {?} */
    SdsAccordionDirective.prototype._headers;
    /** @type {?} */
    SdsAccordionDirective.prototype.displayMode;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWNjb3JkaW9uLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Bnc2Etc2FtL2NvbXBvbmVudHMvIiwic291cmNlcyI6WyJsaWIvYWNjb3JkaW9uL2FjY29yZGlvbi5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFDTCxTQUFTLEVBQ1QsS0FBSyxFQUNMLGVBQWUsRUFDZixTQUFTLEVBRVYsTUFBTSxlQUFlLENBQUM7QUFFdkIsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBQ3RELE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUNwRCxPQUFPLEVBQUUsSUFBSSxFQUFFLEdBQUcsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBQ2xELE9BQU8sRUFDTCxhQUFhLEVBR2QsTUFBTSxrQkFBa0IsQ0FBQztBQUMxQixPQUFPLEVBQUUsK0JBQStCLEVBQUUsTUFBTSxtQ0FBbUMsQ0FBQztBQWlCcEYsTUFBTSxPQUFPLHFCQUFzQixTQUFRLFlBQVk7SUFmdkQ7O1FBc0JXLGdCQUFXLEdBQTRCLFNBQVMsQ0FBQztJQXVCNUQsQ0FBQzs7OztJQXJCQyxrQkFBa0I7UUFDaEIsSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLGVBQWUsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsUUFBUSxFQUFFLENBQUM7SUFDbkUsQ0FBQzs7Ozs7O0lBR0Qsb0JBQW9CLENBQUMsS0FBb0I7Y0FDakMsRUFBRSxPQUFPLEVBQUUsR0FBRyxLQUFLO1FBQ3pCLElBQUksT0FBTyxLQUFLLElBQUksRUFBRTtZQUNwQixJQUFJLENBQUMsV0FBVyxDQUFDLGtCQUFrQixFQUFFLENBQUM7WUFDdEMsS0FBSyxDQUFDLGNBQWMsRUFBRSxDQUFDO1NBQ3hCO2FBQU0sSUFBSSxPQUFPLEtBQUssR0FBRyxFQUFFO1lBQzFCLElBQUksQ0FBQyxXQUFXLENBQUMsaUJBQWlCLEVBQUUsQ0FBQztZQUNyQyxLQUFLLENBQUMsY0FBYyxFQUFFLENBQUM7U0FDeEI7YUFBTTtZQUNMLElBQUksQ0FBQyxXQUFXLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFDO1NBQ25DO0lBQ0gsQ0FBQzs7Ozs7SUFFRCxrQkFBa0IsQ0FBQyxNQUF1QztRQUN4RCxJQUFJLENBQUMsV0FBVyxDQUFDLGdCQUFnQixDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQzVDLENBQUM7OztZQTVDRixTQUFTLFNBQUM7Z0JBQ1QsUUFBUSxFQUFFLGVBQWU7Z0JBQ3pCLFFBQVEsRUFBRSxjQUFjO2dCQUN4QixNQUFNLEVBQUUsQ0FBQyxPQUFPLENBQUM7Z0JBQ2pCLFNBQVMsRUFBRTtvQkFDVDt3QkFDRSxPQUFPLEVBQUUsYUFBYTt3QkFDdEIsV0FBVyxFQUFFLHFCQUFxQjtxQkFDbkM7aUJBQ0Y7Z0JBQ0QsSUFBSSxFQUFFO29CQUNKLE9BQU8sRUFBRSxlQUFlO29CQUN4Qiw4QkFBOEIsRUFBRSx5QkFBeUI7aUJBQzFEO2FBQ0Y7Ozt1QkFLRSxlQUFlLFNBQUMsK0JBQStCLEVBQUUsRUFBRSxXQUFXLEVBQUUsSUFBSSxFQUFFOzBCQUd0RSxLQUFLOzs7Ozs7O0lBTE4sNENBQXNFOztJQUV0RSx5Q0FDcUQ7O0lBRXJELDRDQUEwRCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIERpcmVjdGl2ZSxcbiAgSW5wdXQsXG4gIENvbnRlbnRDaGlsZHJlbixcbiAgUXVlcnlMaXN0LFxuICBBZnRlckNvbnRlbnRJbml0XG59IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XG5cbmltcG9ydCB7IENka0FjY29yZGlvbiB9IGZyb20gXCJAYW5ndWxhci9jZGsvYWNjb3JkaW9uXCI7XG5pbXBvcnQgeyBGb2N1c0tleU1hbmFnZXIgfSBmcm9tIFwiQGFuZ3VsYXIvY2RrL2ExMXlcIjtcbmltcG9ydCB7IEhPTUUsIEVORCB9IGZyb20gXCJAYW5ndWxhci9jZGsva2V5Y29kZXNcIjtcbmltcG9ydCB7XG4gIFNEU19BQ0NPUkRJT04sXG4gIFNkc0FjY29yZGlvbkJhc2UsXG4gIFNkc0FjY29yZGlvbkRpc3BsYXlNb2RlXG59IGZyb20gXCIuL2FjY29yZGlvbi1iYXNlXCI7XG5pbXBvcnQgeyBTZHNBY2NvcmRpb25JdGVtSGVhZGVyQ29tcG9uZW50IH0gZnJvbSBcIi4vYWNjb3JkaW9uLWl0ZW0taGVhZGVyLmNvbXBvbmVudFwiO1xuXG5ARGlyZWN0aXZlKHtcbiAgc2VsZWN0b3I6IFwic2RzLWFjY29yZGlvblwiLFxuICBleHBvcnRBczogXCJzZHNBY2NvcmRpb25cIixcbiAgaW5wdXRzOiBbXCJtdWx0aVwiXSxcbiAgcHJvdmlkZXJzOiBbXG4gICAge1xuICAgICAgcHJvdmlkZTogU0RTX0FDQ09SRElPTixcbiAgICAgIHVzZUV4aXN0aW5nOiBTZHNBY2NvcmRpb25EaXJlY3RpdmVcbiAgICB9XG4gIF0sXG4gIGhvc3Q6IHtcbiAgICAnY2xhc3MnOiAnc2RzLWFjY29yZGlvbicsXG4gICAgJ1tjbGFzcy5zZHMtYWNjb3JkaW9uLS1iYXNpY10nOiAnZGlzcGxheU1vZGUgPT09IFwiYmFzaWNcIicsXG4gIH1cbn0pXG5leHBvcnQgY2xhc3MgU2RzQWNjb3JkaW9uRGlyZWN0aXZlIGV4dGVuZHMgQ2RrQWNjb3JkaW9uXG4gIGltcGxlbWVudHMgU2RzQWNjb3JkaW9uQmFzZSwgQWZ0ZXJDb250ZW50SW5pdCB7XG4gIHByaXZhdGUgX2tleU1hbmFnZXI6IEZvY3VzS2V5TWFuYWdlcjxTZHNBY2NvcmRpb25JdGVtSGVhZGVyQ29tcG9uZW50PjtcblxuICBAQ29udGVudENoaWxkcmVuKFNkc0FjY29yZGlvbkl0ZW1IZWFkZXJDb21wb25lbnQsIHsgZGVzY2VuZGFudHM6IHRydWUgfSlcbiAgX2hlYWRlcnM6IFF1ZXJ5TGlzdDxTZHNBY2NvcmRpb25JdGVtSGVhZGVyQ29tcG9uZW50PjtcblxuICBASW5wdXQoKSBkaXNwbGF5TW9kZTogU2RzQWNjb3JkaW9uRGlzcGxheU1vZGUgPSBcImRlZmF1bHRcIjtcblxuICBuZ0FmdGVyQ29udGVudEluaXQoKSB7XG4gICAgdGhpcy5fa2V5TWFuYWdlciA9IG5ldyBGb2N1c0tleU1hbmFnZXIodGhpcy5faGVhZGVycykud2l0aFdyYXAoKTtcbiAgfVxuXG4gIC8qKiBIYW5kbGVzIGtleWJvYXJkIGV2ZW50cyBjb21pbmcgaW4gZnJvbSB0aGUgaXRlbSBoZWFkZXJzLiAqL1xuICBfaGFuZGxlSGVhZGVyS2V5ZG93bihldmVudDogS2V5Ym9hcmRFdmVudCkge1xuICAgIGNvbnN0IHsga2V5Q29kZSB9ID0gZXZlbnQ7XG4gICAgaWYgKGtleUNvZGUgPT09IEhPTUUpIHtcbiAgICAgIHRoaXMuX2tleU1hbmFnZXIuc2V0Rmlyc3RJdGVtQWN0aXZlKCk7XG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIH0gZWxzZSBpZiAoa2V5Q29kZSA9PT0gRU5EKSB7XG4gICAgICB0aGlzLl9rZXlNYW5hZ2VyLnNldExhc3RJdGVtQWN0aXZlKCk7XG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLl9rZXlNYW5hZ2VyLm9uS2V5ZG93bihldmVudCk7XG4gICAgfVxuICB9XG5cbiAgX2hhbmRsZUhlYWRlckZvY3VzKGhlYWRlcjogU2RzQWNjb3JkaW9uSXRlbUhlYWRlckNvbXBvbmVudCkge1xuICAgIHRoaXMuX2tleU1hbmFnZXIudXBkYXRlQWN0aXZlSXRlbShoZWFkZXIpO1xuICB9XG59XG4iXX0=