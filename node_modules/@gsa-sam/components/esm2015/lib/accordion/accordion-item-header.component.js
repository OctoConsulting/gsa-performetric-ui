/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { FocusMonitor } from "@angular/cdk/a11y";
import { ENTER, SPACE, hasModifierKey } from "@angular/cdk/keycodes";
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, ElementRef, Host, ViewEncapsulation } from "@angular/core";
import { merge, Subscription } from "rxjs";
import { filter } from "rxjs/operators";
import { SdsAccordionItemComponent } from "./accordion-item.component";
export class SdsAccordionItemHeaderComponent {
    /**
     * @param {?} accordionItem
     * @param {?} _element
     * @param {?} _focusMonitor
     * @param {?} _changeDetectorRef
     */
    constructor(accordionItem, _element, _focusMonitor, _changeDetectorRef) {
        this.accordionItem = accordionItem;
        this._element = _element;
        this._focusMonitor = _focusMonitor;
        this._changeDetectorRef = _changeDetectorRef;
        this._parentChangeSubscription = Subscription.EMPTY;
        // Since the toggle state depends on an @Input on the accordion item, we
        // need to subscribe and trigger change detection manually.
        this._parentChangeSubscription = merge(accordionItem.opened, accordionItem.closed, accordionItem._inputChanges.pipe(filter((/**
         * @param {?} changes
         * @return {?}
         */
        changes => !!(changes["disabled"]))))).subscribe((/**
         * @return {?}
         */
        () => this._changeDetectorRef.markForCheck()));
        _focusMonitor.monitor(_element).subscribe((/**
         * @param {?} origin
         * @return {?}
         */
        origin => {
            if (origin && accordionItem.accordion) {
                accordionItem.accordion._handleHeaderFocus(this);
            }
        }));
    }
    /**
     * Whether the associated accordion item is disabled.
     * Implemented as a part of `FocusableOption`.
     * @return {?}
     */
    get disabled() {
        return this.accordionItem.disabled;
    }
    /**
     * Toggles the expanded state of the accordion item.
     * @return {?}
     */
    _toggle() {
        this.accordionItem.toggle();
    }
    /**
     * Gets whether the accordion item is expanded.
     * @return {?}
     */
    _isExpanded() {
        return this.accordionItem.expanded;
    }
    /**
     * Gets the accordion item id.
     * @return {?}
     */
    _getAccordionItemId() {
        return this.accordionItem.id;
    }
    /**
     * Handle keydown event calling to toggle() if appropriate.
     * @param {?} event
     * @return {?}
     */
    _keydown(event) {
        switch (event.keyCode) {
            // Toggle for space and enter keys.
            case SPACE:
            case ENTER:
                if (!hasModifierKey(event)) {
                    event.preventDefault();
                    this._toggle();
                }
                break;
            default:
                if (this.accordionItem.accordion) {
                    this.accordionItem.accordion._handleHeaderKeydown(event);
                }
                return;
        }
    }
    /**
     * Focuses the item header. Implemented as a part of `FocusableOption`.
     * \@docs-private
     * @param {?=} origin Origin of the action that triggered the focus.
     * @return {?}
     */
    focus(origin = "program") {
        this._focusMonitor.focusVia(this._element, origin);
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this._parentChangeSubscription.unsubscribe();
        this._focusMonitor.stopMonitoring(this._element);
    }
}
SdsAccordionItemHeaderComponent.decorators = [
    { type: Component, args: [{
                selector: "sds-accordion-item-header",
                template: "<span class=\"sds-accordion__title\" role=\"heading\">\n  <span class=\"sds-accordion__title-text\">\n    <ng-content></ng-content>\n  </span>\n  <span class=\"sds-accordion__icon\"></span>\n</span>\n",
                encapsulation: ViewEncapsulation.None,
                changeDetection: ChangeDetectionStrategy.OnPush,
                host: {
                    class: "sds-accordion__trigger",
                    role: "button",
                    "[attr.id]": "accordionItem._headerId",
                    "[attr.tabindex]": "disabled ? -1 : 0",
                    "[attr.aria-controls]": "_getAccordionItemId()",
                    "[attr.aria-expanded]": "_isExpanded()",
                    "[attr.aria-disabled]": "accordionItem.disabled",
                    "(click)": "_toggle()",
                    "(keydown)": "_keydown($event)"
                },
                styles: [""]
            }] }
];
/** @nocollapse */
SdsAccordionItemHeaderComponent.ctorParameters = () => [
    { type: SdsAccordionItemComponent, decorators: [{ type: Host }] },
    { type: ElementRef },
    { type: FocusMonitor },
    { type: ChangeDetectorRef }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    SdsAccordionItemHeaderComponent.prototype._parentChangeSubscription;
    /** @type {?} */
    SdsAccordionItemHeaderComponent.prototype.accordionItem;
    /**
     * @type {?}
     * @private
     */
    SdsAccordionItemHeaderComponent.prototype._element;
    /**
     * @type {?}
     * @private
     */
    SdsAccordionItemHeaderComponent.prototype._focusMonitor;
    /**
     * @type {?}
     * @private
     */
    SdsAccordionItemHeaderComponent.prototype._changeDetectorRef;
}
//# sourceMappingURL=data:application/json;base64,