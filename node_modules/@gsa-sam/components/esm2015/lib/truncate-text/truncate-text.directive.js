/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, ElementRef, Input, HostListener, Injector, ViewContainerRef } from '@angular/core';
import { coerceNumberProperty } from '@angular/cdk/coercion';
import { ViewportRuler, OverlayConfig, Overlay } from '@angular/cdk/overlay';
import { Subscription, merge } from 'rxjs';
import { startWith } from 'rxjs/operators';
import { PortalInjector, ComponentPortal } from '@angular/cdk/portal';
import { SdsTruncatedTextContainerComponent } from './truncate-text-container.component';
import { SDS_TRUNCATED_TEXT_DATA } from './truncates-text-base';
export class SdsTruncateTextByLineDirective {
    /**
     * @param {?} _overlay
     * @param {?} _injector
     * @param {?} _element
     * @param {?} _viewportRuler
     * @param {?} _viewContainerRef
     */
    constructor(_overlay, _injector, _element, _viewportRuler, _viewContainerRef) {
        this._overlay = _overlay;
        this._injector = _injector;
        this._element = _element;
        this._viewportRuler = _viewportRuler;
        this._viewContainerRef = _viewContainerRef;
        /**
         * PortalOutlet
         */
        this._overlayRef = null;
        /**
         * Holds subscription to stream of overlay closing events
         */
        this._closingActionsSubscription = Subscription.EMPTY;
    }
    /**
     * Maximum lines of text limit
     * @return {?}
     */
    get textLinesLimit() {
        return this._textLinesLimit;
    }
    /**
     * @param {?} _textLinesLimit
     * @return {?}
     */
    set textLinesLimit(_textLinesLimit) {
        _textLinesLimit = coerceNumberProperty(_textLinesLimit);
        if (this._textLinesLimit !== _textLinesLimit) {
            this._textLinesLimit = _textLinesLimit;
        }
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.initialText = this._element.nativeElement.innerText.trim();
        // Clone element to facilitate calculations
        /** @type {?} */
        const hostCloneEl = (/** @type {?} */ (this._element.nativeElement.cloneNode()));
        // Add 1 character to calculate character width
        hostCloneEl.innerHTML = 'x';
        // Render the clone to get character width
        this._element.nativeElement.parentElement.appendChild(hostCloneEl);
        // Set the clone to inline to prevent cases where the clone
        // expands to 100% width of the container
        hostCloneEl.setAttribute('style', 'display: inline');
        // These are close approximations that are used to better guess
        // how many characters fit in X number of lines
        this.approximatedCharacterWidth = hostCloneEl.offsetWidth;
        // Remove clone after calculations
        hostCloneEl.remove();
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this.windowResize$ = this._viewportRuler
            .change(0)
            .pipe(startWith('Start'))
            .subscribe((/**
         * @return {?}
         */
        () => this.updateUI()));
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        if (this._overlayRef) {
            this._overlayRef.dispose();
        }
        this._closingActionsSubscription.unsubscribe();
        this.windowResize$.unsubscribe();
    }
    /**
     * Configures and creates the CDK overlay
     * @private
     * @return {?}
     */
    _createOverlay() {
        /** @type {?} */
        const overlayPositions = {
            originX: 'start',
            originY: 'bottom',
            overlayX: 'start',
            overlayY: 'top'
        };
        /** @type {?} */
        const config = new OverlayConfig({
            positionStrategy: this._overlay
                .position()
                .flexibleConnectedTo(this._element)
                .withLockedPosition()
                .withPositions([overlayPositions])
                .withTransformOriginOn('.sds-overlay'),
            hasBackdrop: true,
            backdropClass: 'cdk-overlay-transparent-backdrop',
            scrollStrategy: this._overlay.scrollStrategies.close()
        });
        return this._overlay.create(config);
    }
    /**
     * Attach a ComponentPortal to the overlay *
     * @private
     * @param {?} overlay
     * @return {?}
     */
    _attachContainer(overlay) {
        /** @type {?} */
        const injector = new PortalInjector(this._injector, new WeakMap([[SDS_TRUNCATED_TEXT_DATA, { text: this.initialText }]]));
        /** @type {?} */
        const containerPortal = new ComponentPortal(SdsTruncatedTextContainerComponent, this._viewContainerRef, injector);
        /** @type {?} */
        const containerRef = overlay.attach(containerPortal);
        return containerRef.instance;
    }
    /**
     * Returns a stream that emits whenever an action that should close the overlay occurs.
     * @private
     * @return {?}
     */
    _overlayClosingActions() {
        /** @type {?} */
        const backdrop = this._overlayRef.backdropClick();
        /** @type {?} */
        const detachments = this._overlayRef.detachments();
        return merge(backdrop, detachments);
    }
    /**
     * Width of host element
     * @private
     * @return {?}
     */
    _getHostWidth() {
        return this._element.nativeElement.offsetWidth;
    }
    /**
     * Approximated number of characters that are visible in the container
     * @private
     * @return {?}
     */
    _getVisibleCharacters() {
        return Math.floor((this._getHostWidth() / this.approximatedCharacterWidth) *
            this.textLinesLimit);
    }
    /**
     * @private
     * @return {?}
     */
    _isNotLongEnough() {
        return this._getVisibleCharacters() > this.initialText.length;
    }
    /**
     * @return {?}
     */
    openOverlay() {
        // Exit if all text can be visible in container
        if (this._isNotLongEnough())
            return;
        this._overlayRef = this._createOverlay();
        /** @type {?} */
        const container = this._attachContainer(this._overlayRef);
        this._closingActionsSubscription = this._overlayClosingActions().subscribe((/**
         * @return {?}
         */
        () => this.closeOverlay()));
        // Wait for the next event loop tick to start the animation
        setTimeout((/**
         * @return {?}
         */
        () => {
            container.startAnimation();
        }));
    }
    /**
     * @return {?}
     */
    updateUI() {
        // Exit if all text can be visible in container
        if (this._isNotLongEnough())
            return;
        /** @type {?} */
        const wordCut = false;
        /** @type {?} */
        const ellipsis = '...';
        /** @type {?} */
        const limit = this._getVisibleCharacters() - ellipsis.length;
        /** @type {?} */
        let visibleText = this.initialText.slice(0, limit);
        if (!wordCut) {
            /** @type {?} */
            const isEndofWord = this.initialText.substr(limit, limit + 1) === ' ';
            if (!isEndofWord) {
                /** @type {?} */
                const previousWord = visibleText.lastIndexOf(' ');
                visibleText = visibleText.slice(0, previousWord);
            }
        }
        this._element.nativeElement.innerText = visibleText + ellipsis;
    }
    /**
     * @return {?}
     */
    closeOverlay() {
        this._closingActionsSubscription.unsubscribe();
        this._overlayRef.detach();
    }
}
SdsTruncateTextByLineDirective.decorators = [
    { type: Directive, args: [{ selector: '[sdsTruncateTextByLine]' },] }
];
/** @nocollapse */
SdsTruncateTextByLineDirective.ctorParameters = () => [
    { type: Overlay },
    { type: Injector },
    { type: ElementRef },
    { type: ViewportRuler },
    { type: ViewContainerRef }
];
SdsTruncateTextByLineDirective.propDecorators = {
    textLinesLimit: [{ type: Input, args: ['sdsTruncateTextByLine',] }],
    openOverlay: [{ type: HostListener, args: ['click',] }]
};
if (false) {
    /**
     * @type {?}
     * @private
     */
    SdsTruncateTextByLineDirective.prototype._textLinesLimit;
    /**
     * PortalOutlet
     * @type {?}
     * @private
     */
    SdsTruncateTextByLineDirective.prototype._overlayRef;
    /**
     * Holds subscription to stream of overlay closing events
     * @type {?}
     * @private
     */
    SdsTruncateTextByLineDirective.prototype._closingActionsSubscription;
    /**
     * Holds initial text
     * @type {?}
     * @private
     */
    SdsTruncateTextByLineDirective.prototype.initialText;
    /**
     * Subscription to window resize stream
     * @type {?}
     */
    SdsTruncateTextByLineDirective.prototype.windowResize$;
    /**
     * Approximated character width of the host text
     * @type {?}
     * @private
     */
    SdsTruncateTextByLineDirective.prototype.approximatedCharacterWidth;
    /**
     * @type {?}
     * @private
     */
    SdsTruncateTextByLineDirective.prototype._overlay;
    /**
     * @type {?}
     * @private
     */
    SdsTruncateTextByLineDirective.prototype._injector;
    /**
     * @type {?}
     * @private
     */
    SdsTruncateTextByLineDirective.prototype._element;
    /**
     * @type {?}
     * @private
     */
    SdsTruncateTextByLineDirective.prototype._viewportRuler;
    /**
     * @type {?}
     * @private
     */
    SdsTruncateTextByLineDirective.prototype._viewContainerRef;
}
//# sourceMappingURL=data:application/json;base64,