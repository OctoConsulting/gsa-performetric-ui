/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, Output, EventEmitter, ViewChild, TemplateRef } from '@angular/core';
import { SideNavigationModel } from './model/side-navigation-model';
import { NavigationMode } from '../common-navigation/common-navigation-model';
import { NavigationHelper } from '../common-navigation/navigation-helper';
export class SdsSideNavigationComponent {
    constructor() {
        /**
         * Navigation helper
         */
        this.navigationHelper = new NavigationHelper();
        /**
         * event for event based
         */
        this.linkEvent = new EventEmitter();
    }
    /**
     * Takes the navigation item and returns the template to be used
     * @param {?} item navigation item
     * @return {?}
     */
    getItemTemplate(item) {
        /** @type {?} */
        let template = null;
        switch (item.mode) {
            case NavigationMode.EVENT:
                template = this.sideNavEVENTLinkTemplate;
                break;
            case NavigationMode.EXTERNAL:
                template = this.sideNavHREFLinkTemplate;
                break;
            case NavigationMode.INTERNAL:
                template = this.sideNavRouteLinkTemplate;
                break;
            case NavigationMode.LABEL:
                template = this.sideNavLabelLinkTemplate;
                break;
            default:
                template = null;
                break;
        }
        return template;
    }
    /**
     * Selects new item and parents and deselects previous
     * @param {?} id
     * @return {?}
     */
    select(id) {
        this.deselect();
        for (let i = 0; i < this.model.navigationLinks.length; i++) {
            /** @type {?} */
            let item = this.model.navigationLinks[i];
            this.selectItem(id, item, null);
        }
    }
    /**
     * Selects item if matches passed in id and will select parent
     * @private
     * @param {?} id
     * @param {?} item
     * @param {?} parent
     * @return {?}
     */
    selectItem(id, item, parent) {
        if (item.id === id) {
            item.selected = true;
            if (parent) {
                parent.selected = true;
            }
        }
        else {
            if (item.children) {
                for (let i = 0; i < item.children.length; i++) {
                    /** @type {?} */
                    let childItem = item.children[i];
                    this.selectItem(id, childItem, item);
                }
                if (item.selected) {
                    if (parent) {
                        parent.selected = true;
                    }
                }
            }
        }
    }
    /**
     * Deselects all the items in the side navigation model
     * @return {?}
     */
    deselect() {
        if (this.model) {
            if (this.model.navigationLinks) {
                for (let i = 0; i < this.model.navigationLinks.length; i++) {
                    this.deselectItem(this.model.navigationLinks[i]);
                }
            }
        }
    }
    /**
     * checks if item is selected and if selcted will check children and will unselect
     * @private
     * @param {?} item
     * @return {?}
     */
    deselectItem(item) {
        if (item.selected) {
            item.selected = false;
            if (item.children) {
                for (let i = 0; i < item.children.length; i++) {
                    this.deselectItem(item.children[i]);
                }
            }
        }
    }
    /**
     * Link clicked and emits the link data into an event
     * @param {?} link
     * @return {?}
     */
    linkClickEvent(link) {
        this.linkEvent.emit(link);
        return false;
    }
    /**
     * creates url from provided route and query params
     * @param {?} item
     * @return {?}
     */
    urlBuilder(item) {
        /** @type {?} */
        let url = item.route;
        /** @type {?} */
        let queryParams = this.queryStringBuilder(item);
        if (queryParams) {
            if (url.indexOf('?') === -1) {
                url += '?' + queryParams;
            }
            else if (url.indexOf('?') === url.length - 1) {
                url += queryParams;
            }
            else {
                url += '&' + queryParams;
            }
        }
        return url;
    }
    /**
     * creates query string
     * @private
     * @param {?} item
     * @return {?}
     */
    queryStringBuilder(item) {
        /** @type {?} */
        const ret = [];
        for (let d in item.queryParams) {
            ret.push(encodeURIComponent(d) + '=' + encodeURIComponent(item.queryParams[d]));
        }
        return ret.join('&');
    }
}
SdsSideNavigationComponent.decorators = [
    { type: Component, args: [{
                selector: 'sds-side-navigation',
                template: "<nav>\n    <ul class=\"usa-sidenav\">\n        <li *ngFor=\"let link of model.navigationLinks\" class=\"sidenav__item\">\n            <ng-container [ngTemplateOutlet]=\"sideNavLinkTemplate\" [ngTemplateOutletContext]=\"{$implicit:link}\">\n            </ng-container>\n        </li>\n    </ul>\n</nav>\n\n<ng-template #sideNavLinkTemplate let-link>\n    <ng-container [ngTemplateOutlet]=\"getItemTemplate(link)\" [ngTemplateOutletContext]=\"{$implicit:link}\">\n    </ng-container>\n    <ul *ngIf=\"link.children\" class=\"usa-sidenav__sublist\">\n        <li *ngFor=\"let link of link.children\" class=\"sidenav__item\">\n            <ng-container [ngTemplateOutlet]=\"sideNavLinkTemplate\" [ngTemplateOutletContext]=\"{$implicit:link}\">\n            </ng-container>\n        </li>\n    </ul>\n</ng-template>\n\n<ng-template #sideNavRouteLinkTemplate let-link>\n    <a [attr.class]=\"link.selected ? ' usa-current' : ''\" [routerLink]=\"[link.route]\"\n        [queryParams]=\"link.queryParams\"><span>{{link.text}}</span></a>\n</ng-template>\n\n<ng-template #sideNavHREFLinkTemplate let-link>\n    <a [attr.class]=\"link.selected ? ' usa-current' : ''\" [attr.href]=\"urlBuilder(link)\"><span>{{link.text}}</span></a>\n</ng-template>\n\n<ng-template #sideNavLabelLinkTemplate let-link>\n    <span [attr.class]=\"link.selected ? ' usa-current' : ''\"><span>{{link.text}}</span></span>\n</ng-template>\n\n<ng-template #sideNavEVENTLinkTemplate let-link>\n    <a [attr.class]=\"link.selected ? ' usa-current' : ''\" href=\"javascript:void(0)\"\n        (click)=\"linkClickEvent(link)\"><span>{{link.text}}</span></a>\n</ng-template>",
                styles: [""]
            }] }
];
SdsSideNavigationComponent.propDecorators = {
    sideNavRouteLinkTemplate: [{ type: ViewChild, args: ['sideNavRouteLinkTemplate',] }],
    sideNavLabelLinkTemplate: [{ type: ViewChild, args: ['sideNavLabelLinkTemplate',] }],
    sideNavHREFLinkTemplate: [{ type: ViewChild, args: ['sideNavHREFLinkTemplate',] }],
    sideNavEVENTLinkTemplate: [{ type: ViewChild, args: ['sideNavEVENTLinkTemplate',] }],
    model: [{ type: Input }],
    linkEvent: [{ type: Output }]
};
if (false) {
    /**
     * Reference to the the Template used for internal links
     * @type {?}
     * @private
     */
    SdsSideNavigationComponent.prototype.sideNavRouteLinkTemplate;
    /**
     * Reference to the the Template used for side menu items that are a label
     * @type {?}
     * @private
     */
    SdsSideNavigationComponent.prototype.sideNavLabelLinkTemplate;
    /**
     * Reference to the the Template used for external href
     * @type {?}
     * @private
     */
    SdsSideNavigationComponent.prototype.sideNavHREFLinkTemplate;
    /**
     * Reference to the the Template used for event response
     * @type {?}
     * @private
     */
    SdsSideNavigationComponent.prototype.sideNavEVENTLinkTemplate;
    /**
     * Navigation helper
     * @type {?}
     */
    SdsSideNavigationComponent.prototype.navigationHelper;
    /**
     * Model used for the different display portions of the side navigation
     * @type {?}
     */
    SdsSideNavigationComponent.prototype.model;
    /**
     * event for event based
     * @type {?}
     */
    SdsSideNavigationComponent.prototype.linkEvent;
}
//# sourceMappingURL=data:application/json;base64,