/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, EventEmitter, Output, ChangeDetectorRef, ViewChild, ElementRef } from '@angular/core';
import { PaginationConfigurationModel, PaginationModel } from './model/paginationModel';
export class PaginationComponent {
    /**
     * @param {?} change
     */
    constructor(change) {
        this.change = change;
        /**
         * Output of the page model object
         */
        this.pageChange = new EventEmitter();
        /**
         * Pagination model
         */
        this.page = new PaginationModel();
        /**
         * debounce time for current page input
         */
        this.debounceTime = 500;
        /**
         * Drop down options for page size
         */
        this.options = [
            { label: '25', value: 25 },
            { label: '50', value: 50 },
            { label: '100', value: 100 }
        ];
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.maintainPreviousValue();
    }
    /**
     * Stores the previous number. Used when focus out if field empty
     * @private
     * @return {?}
     */
    maintainPreviousValue() {
        this.previousNumber = this.page.pageNumber.valueOf();
    }
    /**
     * previous page lowers page number by one within range
     * @return {?}
     */
    previousPage() {
        if (this.page.pageNumber > 1) {
            this.page.pageNumber--;
            this.maintainPreviousValue();
            this.pageChange.emit(this.page);
        }
    }
    /**
     * next page increase page number by one within range
     * @return {?}
     */
    nextPage() {
        if (this.page.pageNumber < this.page.totalPages) {
            this.page.pageNumber++;
            this.maintainPreviousValue();
            this.pageChange.emit(this.page);
        }
    }
    /**
     * current page changes sets new value if within range
     * @param {?=} newValue
     * @return {?}
     */
    valuechange(newValue) {
        window.clearTimeout(this.timeoutNumber);
        this.timeoutNumber = window.setTimeout((/**
         * @return {?}
         */
        () => {
            if (newValue || newValue === 0) {
                newValue = this.handleInputOutsideBounds(newValue);
                if (newValue >= 1 && newValue <= this.page.totalPages) {
                    this.page.pageNumber = newValue;
                    this.maintainPreviousValue();
                    this.pageChange.emit(this.page);
                    this.change.detectChanges();
                }
            }
            else {
                if (this.page.pageNumber) {
                    this.maintainPreviousValue();
                }
            }
        }), this.debounceTime);
    }
    /**
     * adjusts the value if not within the page limit above or below
     * @private
     * @param {?=} newValue handles
     * @return {?}
     */
    handleInputOutsideBounds(newValue) {
        if (newValue < 1) {
            newValue = 1;
            this.currentPageField.nativeElement.value = newValue;
        }
        else if (newValue > this.page.totalPages) {
            newValue = this.page.totalPages;
            this.currentPageField.nativeElement.value = newValue;
        }
        return newValue;
    }
    /**
     * current page focus out will replace with previous valid if empty
     * @return {?}
     */
    currentPageFocusOut() {
        if (this.currentPageField.nativeElement.value === '') {
            this.currentPageField.nativeElement.value = this.page.pageNumber = this.previousNumber;
            this.change.detectChanges();
        }
    }
    /**
     * page size selection change
     * @return {?}
     */
    onSelectChange() {
        this.page.pageNumber = 1;
        this.pageChange.emit(this.page);
    }
}
PaginationComponent.decorators = [
    { type: Component, args: [{
                selector: 'sds-pagination',
                template: "<div class=\"sds-pagination\">\n  <div class=\"sds-pagination__controls\">\n    <button [attr.id]=\"paginationConfiguration.id +'-previousPage'\" (click)=\"previousPage()\">Previous Page</button>\n    <label class=\"usa-label font-sans-3xs margin-top-1 text-italic text-base usa-sr-only\"\n      [attr.for]=\"paginationConfiguration.id + '-currentPage'\">Current Page</label>\n    <input [attr.id]=\"paginationConfiguration.id +'-currentPage'\"\n      class=\"usa-input height-3 width-4 line-height-05 font-sans-3xs text-center border-base-light\" #currentPage\n      (ngModelChange)=\"valuechange($event)\" [(ngModel)]=\"page.pageNumber\" type=\"number\" min=\"1\"\n      [(attr.max)]=\"page.totalPages\" (focusout)=\"currentPageFocusOut()\" aria-label=\"current page\" />\n    <span class=\"sds-pagination__total\">\n      of <strong>{{ page.totalPages }}</strong>\n    </span>\n    <button [attr.id]=\"paginationConfiguration.id +'-nextPage'\" (click)=\"nextPage()\">Next Page</button>\n  </div>\n  <div class=\"sds-pagination__results\">\n    <label class=\"usa-label font-sans-3xs text-italic text-base\"\n      [attr.for]=\"paginationConfiguration.id + '-select'\">Results per page</label>\n    <select class=\"usa-select usa-select--small border-base-light\" [attr.id]=\"paginationConfiguration.id + '-select'\"\n      (change)=\"onSelectChange()\" [(ngModel)]=\"page.pageSize\">\n      <option *ngFor=\"let item of options\" [ngValue]=\"item.value\">\n        {{ item.label }}\n      </option>\n    </select>\n  </div>\n</div>\n",
                styles: ["input[type=number]::-webkit-inner-spin-button,input[type=number]::-webkit-outer-spin-button{-webkit-appearance:none;margin:0}input[type=number]{-moz-appearance:textfield}"]
            }] }
];
/** @nocollapse */
PaginationComponent.ctorParameters = () => [
    { type: ChangeDetectorRef }
];
PaginationComponent.propDecorators = {
    currentPageField: [{ type: ViewChild, args: ['currentPage',] }],
    pageChange: [{ type: Output }],
    page: [{ type: Input }],
    paginationConfiguration: [{ type: Input }]
};
if (false) {
    /**
     * Input field for the current page
     * @type {?}
     */
    PaginationComponent.prototype.currentPageField;
    /**
     * Output of the page model object
     * @type {?}
     */
    PaginationComponent.prototype.pageChange;
    /**
     * Pagination model
     * @type {?}
     */
    PaginationComponent.prototype.page;
    /**
     * configuration for the pagination
     * @type {?}
     */
    PaginationComponent.prototype.paginationConfiguration;
    /**
     * debounce time for current page input
     * @type {?}
     */
    PaginationComponent.prototype.debounceTime;
    /**
     * Stores the previous number
     * @type {?}
     * @private
     */
    PaginationComponent.prototype.previousNumber;
    /**
     * timeout id of the debounce time
     * @type {?}
     */
    PaginationComponent.prototype.timeoutNumber;
    /**
     * Drop down options for page size
     * @type {?}
     */
    PaginationComponent.prototype.options;
    /**
     * @type {?}
     * @private
     */
    PaginationComponent.prototype.change;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFnaW5hdGlvbi5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZ3NhLXNhbS9jb21wb25lbnRzLyIsInNvdXJjZXMiOlsibGliL3BhZ2luYXRpb24vcGFnaW5hdGlvbi5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQVUsS0FBSyxFQUFFLFlBQVksRUFBRSxNQUFNLEVBQUUsaUJBQWlCLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUN6SCxPQUFPLEVBQUUsNEJBQTRCLEVBQUUsZUFBZSxFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFPeEYsTUFBTSxPQUFPLG1CQUFtQjs7OztJQU05QixZQUFvQixNQUF5QjtRQUF6QixXQUFNLEdBQU4sTUFBTSxDQUFtQjs7OztRQW1CN0MsZUFBVSxHQUFHLElBQUksWUFBWSxFQUFtQixDQUFDOzs7O1FBTWpELFNBQUksR0FBb0IsSUFBSSxlQUFlLEVBQUUsQ0FBQzs7OztRQVk5QyxpQkFBWSxHQUFXLEdBQUcsQ0FBQzs7OztRQWVwQixZQUFPLEdBQUc7WUFDZixFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsS0FBSyxFQUFFLEVBQUUsRUFBRTtZQUMxQixFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsS0FBSyxFQUFFLEVBQUUsRUFBRTtZQUMxQixFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEdBQUcsRUFBRTtTQUM3QixDQUFDO0lBeEQrQyxDQUFDOzs7O0lBSmxELFFBQVE7UUFDTixJQUFJLENBQUMscUJBQXFCLEVBQUUsQ0FBQztJQUMvQixDQUFDOzs7Ozs7SUFRTyxxQkFBcUI7UUFDM0IsSUFBSSxDQUFDLGNBQWMsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxPQUFPLEVBQUUsQ0FBQztJQUN2RCxDQUFDOzs7OztJQXFERCxZQUFZO1FBQ1YsSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFD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MUIsNGdEQUEwQzs7YUFFM0M7Ozs7WUFQd0QsaUJBQWlCOzs7K0JBMkJ2RSxTQUFTLFNBQUMsYUFBYTt5QkFLdkIsTUFBTTttQkFNTixLQUFLO3NDQU1MLEtBQUs7Ozs7Ozs7SUFqQk4sK0NBQXVEOzs7OztJQUt2RCx5Q0FDaUQ7Ozs7O0lBS2pELG1DQUM4Qzs7Ozs7SUFLOUMsc0RBQ3NEOzs7OztJQU10RCwyQ0FBMkI7Ozs7OztJQUszQiw2Q0FBK0I7Ozs7O0lBSy9CLDRDQUFzQjs7Ozs7SUFLdEIsc0NBSUU7Ozs7O0lBeERVLHFDQUFpQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgT25Jbml0LCBJbnB1dCwgRXZlbnRFbWl0dGVyLCBPdXRwdXQsIENoYW5nZURldGVjdG9yUmVmLCBWaWV3Q2hpbGQsIEVsZW1lbnRSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFBhZ2luYXRpb25Db25maWd1cmF0aW9uTW9kZWwsIFBhZ2luYXRpb25Nb2RlbCB9IGZyb20gJy4vbW9kZWwvcGFnaW5hdGlvbk1vZGVsJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnc2RzLXBhZ2luYXRpb24nLFxuICB0ZW1wbGF0ZVVybDogJy4vcGFnaW5hdGlvbi5jb21wb25lbnQuaHRtbCcsXG4gIHN0eWxlVXJsczogWycuL3BhZ2luYXRpb24uY29tcG9uZW50LnNjc3MnXVxufSlcbmV4cG9ydCBjbGFzcyBQYWdpbmF0aW9uQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0IHtcblxuICBuZ09uSW5pdCgpOiB2b2lkIHtcbiAgICB0aGlzLm1haW50YWluUHJldmlvdXNWYWx1ZSgpO1xuICB9XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBjaGFuZ2U6IENoYW5nZURldGVjdG9yUmVmKSB7IH1cblxuXG4gIC8qKlxuICAgKiBTdG9yZXMgdGhlIHByZXZpb3VzIG51bWJlci4gVXNlZCB3aGVuIGZvY3VzIG91dCBpZiBmaWVsZCBlbXB0eVxuICAgKi9cbiAgcHJpdmF0ZSBtYWludGFpblByZXZpb3VzVmFsdWUoKSB7XG4gICAgdGhpcy5wcmV2aW91c051bWJlciA9IHRoaXMucGFnZS5wYWdlTnVtYmVyLnZhbHVlT2YoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBJbnB1dCBmaWVsZCBmb3IgdGhlIGN1cnJlbnQgcGFnZVxuICAgKi9cbiAgQFZpZXdDaGlsZCgnY3VycmVudFBhZ2UnKSBjdXJyZW50UGFnZUZpZWxkOiBFbGVtZW50UmVmO1xuXG4gIC8qKlxuICAgKiBPdXRwdXQgb2YgdGhlIHBhZ2UgbW9kZWwgb2JqZWN0XG4gICAqL1xuICBAT3V0cHV0KClcbiAgcGFnZUNoYW5nZSA9IG5ldyBFdmVudEVtaXR0ZXI8UGFnaW5hdGlvbk1vZGVsPigpO1xuXG4gIC8qKlxuICAgKiBQYWdpbmF0aW9uIG1vZGVsXG4gICAqL1xuICBASW5wdXQoKVxuICBwYWdlOiBQYWdpbmF0aW9uTW9kZWwgPSBuZXcgUGFnaW5hdGlvbk1vZGVsKCk7XG5cbiAgLyoqXG4gICAqIGNvbmZpZ3VyYXRpb24gZm9yIHRoZSBwYWdpbmF0aW9uXG4gICAqL1xuICBASW5wdXQoKVxuICBwYWdpbmF0aW9uQ29uZmlndXJhdGlvbjogUGFnaW5hdGlvbkNvbmZpZ3VyYXRpb25Nb2RlbDtcblxuXG4gIC8qKlxuICAgKiBkZWJvdW5jZSB0aW1lIGZvciBjdXJyZW50IHBhZ2UgaW5wdXRcbiAgICovXG4gIGRlYm91bmNlVGltZTogbnVtYmVyID0gNTAwO1xuXG4gIC8qKlxuICAgKiBTdG9yZXMgdGhlIHByZXZpb3VzIG51bWJlclxuICAgKi9cbiAgcHJpdmF0ZSBwcmV2aW91c051bWJlcjogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiB0aW1lb3V0IGlkIG9mIHRoZSBkZWJvdW5jZSB0aW1lIFxuICAgKi9cbiAgdGltZW91dE51bWJlcjogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiBEcm9wIGRvd24gb3B0aW9ucyBmb3IgcGFnZSBzaXplXG4gICAqL1xuICBwdWJsaWMgb3B0aW9ucyA9IFtcbiAgICB7IGxhYmVsOiAnMjUnLCB2YWx1ZTogMjUgfSxcbiAgICB7IGxhYmVsOiAnNTAnLCB2YWx1ZTogNTAgfSxcbiAgICB7IGxhYmVsOiAnMTAwJywgdmFsdWU6IDEwMCB9XG4gIF07XG5cbiAgLyoqXG4gICAqIHByZXZpb3VzIHBhZ2UgbG93ZXJzIHBhZ2UgbnVtYmVyIGJ5IG9uZSB3aXRoaW4gcmFuZ2VcbiAgICovXG4gIHByZXZpb3VzUGFnZSgpIHtcbiAgICBpZiAodGhpcy5wYWdlLnBhZ2VOdW1iZXIgPiAxKSB7XG4gICAgICB0aGlzLnBhZ2UucGFnZU51bWJlci0tO1xuICAgICAgdGhpcy5tYWludGFpblByZXZpb3VzVmFsdWUoKTtcbiAgICAgIHRoaXMucGFnZUNoYW5nZS5lbWl0KHRoaXMucGFnZSk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIG5leHQgcGFnZSBpbmNyZWFzZSBwYWdlIG51bWJlciBieSBvbmUgd2l0aGluIHJhbmdlXG4gICAqL1xuICBuZXh0UGFnZSgpIHtcbiAgICBpZiAodGhpcy5wYWdlLnBhZ2VOdW1iZXIgPCB0aGlzLnBhZ2UudG90YWxQYWdlcykge1xuICAgICAgdGhpcy5wYWdlLnBhZ2VOdW1iZXIrKztcbiAgICAgIHRoaXMubWFpbnRhaW5QcmV2aW91c1ZhbHVlKCk7XG4gICAgICB0aGlzLnBhZ2VDaGFuZ2UuZW1pdCh0aGlzLnBhZ2UpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBjdXJyZW50IHBhZ2UgY2hhbmdlcyBzZXRzIG5ldyB2YWx1ZSBpZiB3aXRoaW4gcmFuZ2VcbiAgICogQHBhcmFtIG5ld1ZhbHVlIFxuICAgKi9cbiAgdmFsdWVjaGFuZ2UobmV3VmFsdWU/OiBudW1iZXIpIHtcbiAgICB3aW5kb3cuY2xlYXJUaW1lb3V0KHRoaXMudGltZW91dE51bWJlcik7XG4gICAgdGhpcy50aW1lb3V0TnVtYmVyID0gd2luZG93LnNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgaWYgKG5ld1ZhbHVlIHx8IG5ld1ZhbHVlID09PSAwKSB7XG4gICAgICAgIG5ld1ZhbHVlID0gdGhpcy5oYW5kbGVJbnB1dE91dHNpZGVCb3VuZHMobmV3VmFsdWUpO1xuICAgICAgICBpZiAobmV3VmFsdWUgPj0gMSAmJiBuZXdWYWx1ZSA8PSB0aGlzLnBhZ2UudG90YWxQYWdlcykge1xuICAgICAgICAgIHRoaXMucGFnZS5wYWdlTnVtYmVyID0gbmV3VmFsdWU7XG4gICAgICAgICAgdGhpcy5tYWludGFpblByZXZpb3VzVmFsdWUoKTtcbiAgICAgICAgICB0aGlzLnBhZ2VDaGFuZ2UuZW1pdCh0aGlzLnBhZ2UpO1xuICAgICAgICAgIHRoaXMuY2hhbmdlLmRldGVjdENoYW5nZXMoKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcblxuICAgICAgICBpZiAodGhpcy5wYWdlLnBhZ2VOdW1iZXIpIHtcbiAgICAgICAgICB0aGlzLm1haW50YWluUHJldmlvdXNWYWx1ZSgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSwgdGhpcy5kZWJvdW5jZVRpbWUpO1xuICB9XG5cbiAgLyoqXG4gICAqIGFkanVzdHMgdGhlIHZhbHVlIGlmIG5vdCB3aXRoaW4gdGhlIHBhZ2UgbGltaXQgYWJvdmUgb3IgYmVsb3dcbiAgICogQHBhcmFtIG5ld1ZhbHVlIGhhbmRsZXNcbiAgICovXG4gIHByaXZhdGUgaGFuZGxlSW5wdXRPdXRzaWRlQm91bmRzKG5ld1ZhbHVlPzogbnVtYmVyKSB7XG4gICAgaWYgKG5ld1ZhbHVlIDwgMSkge1xuICAgICAgbmV3VmFsdWUgPSAxO1xuICAgICAgdGhpcy5jdXJyZW50UGFnZUZpZWxkLm5hdGl2ZUVsZW1lbnQudmFsdWUgPSBuZXdWYWx1ZTtcbiAgICB9XG4gICAgZWxzZSBpZiAobmV3VmFsdWUgPiB0aGlzLnBhZ2UudG90YWxQYWdlcykge1xuICAgICAgbmV3VmFsdWUgPSB0aGlzLnBhZ2UudG90YWxQYWdlcztcbiAgICAgIHRoaXMuY3VycmVudFBhZ2VGaWVsZC5uYXRpdmVFbGVtZW50LnZhbHVlID0gbmV3VmFsdWU7XG4gICAgfVxuICAgIHJldHVybiBuZXdWYWx1ZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBjdXJyZW50IHBhZ2UgZm9jdXMgb3V0IHdpbGwgcmVwbGFjZSB3aXRoIHByZXZpb3VzIHZhbGlkIGlmIGVtcHR5XG4gICAqL1xuICBjdXJyZW50UGFnZUZvY3VzT3V0KCkge1xuICAgIGlmICh0aGlzLmN1cnJlbnRQYWdlRmllbGQubmF0aXZlRWxlbWVudC52YWx1ZSA9PT0gJycpIHtcbiAgICAgIHRoaXMuY3VycmVudFBhZ2VGaWVsZC5uYXRpdmVFbGVtZW50LnZhbHVlID0gdGhpcy5wYWdlLnBhZ2VOdW1iZXIgPSB0aGlzLnByZXZpb3VzTnVtYmVyO1xuICAgICAgdGhpcy5jaGFuZ2UuZGV0ZWN0Q2hhbmdlcygpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBwYWdlIHNpemUgc2VsZWN0aW9uIGNoYW5nZVxuICAgKi9cbiAgb25TZWxlY3RDaGFuZ2UoKSB7XG4gICAgdGhpcy5wYWdlLnBhZ2VOdW1iZXIgPSAxO1xuICAgIHRoaXMucGFnZUNoYW5nZS5lbWl0KHRoaXMucGFnZSk7XG4gIH1cbn1cbiJdfQ==