/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, Input, ElementRef, Renderer2 } from '@angular/core';
export class SdsPopupDirective {
    /**
     * @param {?} el
     * @param {?} renderer
     */
    constructor(el, renderer) {
        this.el = el;
        this.renderer = renderer;
        this.renderer.addClass(this.el.nativeElement, 'sds-popup');
        this.sdsPopupDiv = document.createElement('div');
        this.renderer.addClass(this.sdsPopupDiv, 'sds-popup__content');
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this.renderer.appendChild(this.el.nativeElement, this.sdsPopup);
        this.renderer.addClass(this.sdsPopupDiv, this.placement);
        this.renderer.addClass(this.sdsPopupDiv, this.position);
        this.renderer.appendChild(this.sdsPopupDiv, this.el.nativeElement.children[0]);
        this.renderer.appendChild(this.el.nativeElement, this.sdsPopupDiv);
    }
}
SdsPopupDirective.decorators = [
    { type: Directive, args: [{
                selector: '[sdsPopup]',
                exportAs: 'sdsPopup'
            },] }
];
/** @nocollapse */
SdsPopupDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 }
];
SdsPopupDirective.propDecorators = {
    sdsPopup: [{ type: Input }],
    position: [{ type: Input }],
    placement: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    SdsPopupDirective.prototype.sdsPopup;
    /** @type {?} */
    SdsPopupDirective.prototype.position;
    /** @type {?} */
    SdsPopupDirective.prototype.placement;
    /** @type {?} */
    SdsPopupDirective.prototype.sdsPopupDiv;
    /**
     * @type {?}
     * @private
     */
    SdsPopupDirective.prototype.el;
    /**
     * @type {?}
     * @private
     */
    SdsPopupDirective.prototype.renderer;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG9wdXAuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGdzYS1zYW0vY29tcG9uZW50cy8iLCJzb3VyY2VzIjpbImxpYi9wb3B1cC9wb3B1cC5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLFVBQVUsRUFBRSxTQUFTLEVBQXlCLE1BQU0sZUFBZSxDQUFDO0FBTy9GLE1BQU0sT0FBTyxpQkFBaUI7Ozs7O0lBTTVCLFlBQW9CLEVBQWMsRUFBVSxRQUFtQjtRQUEzQyxPQUFFLEdBQUYsRUFBRSxDQUFZO1FBQVUsYUFBUSxHQUFSLFFBQVEsQ0FBVztRQUM3RCxJQUFJLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLGFBQWEsRUFBRSxXQUFXLENBQUMsQ0FBQztRQUMzRCxJQUFJLENBQUMsV0FBVyxHQUFHLFFBQVEsQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDakQsSUFBSSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLFdBQVcsRUFBRSxvQkFBb0IsQ0FBQyxDQUFDO0lBQ2pFLENBQUM7Ozs7SUFHRCxlQUFlO1FBQ2IsSUFBSSxDQUFDLFFBQVEsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxhQUFhLEVBQUUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQ2hFLElBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxXQUFXLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBQ3pELElBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxXQUFXLEVBQUUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQ3hELElBQUksQ0FBQyxRQUFRLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxXQUFXLEVBQUUsSUFBSSxDQUFDLEVBQUUsQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDL0UsSUFBSSxDQUFDLFFBQVEsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxhQUFhLEVBQUUsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDO0lBQ3JFLENBQUM7OztZQXZCRixTQUFTLFNBQUM7Z0JBQ1QsUUFBUSxFQUFFLFlBQVk7Z0JBQ3RCLFFBQVEsRUFBRSxVQUFVO2FBQ3JCOzs7O1lBTjBCLFVBQVU7WUFBRSxTQUFTOzs7dUJBUTdDLEtBQUs7dUJBQ0wsS0FBSzt3QkFDTCxLQUFLOzs7O0lBRk4scUNBQStCOztJQUMvQixxQ0FBMEI7O0lBQzFCLHNDQUEyQjs7SUFDM0Isd0NBQXlCOzs7OztJQUViLCtCQUFzQjs7Ozs7SUFBRSxxQ0FBMkIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEaXJlY3RpdmUsIElucHV0LCBFbGVtZW50UmVmLCBSZW5kZXJlcjIsIEFmdGVyVmlld0luaXQsIE9uSW5pdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5cbkBEaXJlY3RpdmUoe1xuICBzZWxlY3RvcjogJ1tzZHNQb3B1cF0nLFxuICBleHBvcnRBczogJ3Nkc1BvcHVwJ1xufSlcbmV4cG9ydCBjbGFzcyBTZHNQb3B1cERpcmVjdGl2ZSBpbXBsZW1lbnRzIEFmdGVyVmlld0luaXQge1xuICBASW5wdXQoKSBzZHNQb3B1cDogSFRNTEVsZW1lbnQ7XG4gIEBJbnB1dCgpIHBvc2l0aW9uOiBzdHJpbmc7XG4gIEBJbnB1dCgpIHBsYWNlbWVudDogc3RyaW5nO1xuICBzZHNQb3B1cERpdjogSFRNTEVsZW1lbnQ7XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBlbDogRWxlbWVudFJlZiwgcHJpdmF0ZSByZW5kZXJlcjogUmVuZGVyZXIyKSB7XG4gICAgdGhpcy5yZW5kZXJlci5hZGRDbGFzcyh0aGlzLmVsLm5hdGl2ZUVsZW1lbnQsICdzZHMtcG9wdXAnKTtcbiAgICB0aGlzLnNkc1BvcHVwRGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgdGhpcy5yZW5kZXJlci5hZGRDbGFzcyh0aGlzLnNkc1BvcHVwRGl2LCAnc2RzLXBvcHVwX19jb250ZW50Jyk7XG4gIH1cblxuXG4gIG5nQWZ0ZXJWaWV3SW5pdCgpIHtcbiAgICB0aGlzLnJlbmRlcmVyLmFwcGVuZENoaWxkKHRoaXMuZWwubmF0aXZlRWxlbWVudCwgdGhpcy5zZHNQb3B1cCk7XG4gICAgdGhpcy5yZW5kZXJlci5hZGRDbGFzcyh0aGlzLnNkc1BvcHVwRGl2LCB0aGlzLnBsYWNlbWVudCk7XG4gICAgdGhpcy5yZW5kZXJlci5hZGRDbGFzcyh0aGlzLnNkc1BvcHVwRGl2LCB0aGlzLnBvc2l0aW9uKTtcbiAgICB0aGlzLnJlbmRlcmVyLmFwcGVuZENoaWxkKHRoaXMuc2RzUG9wdXBEaXYsIHRoaXMuZWwubmF0aXZlRWxlbWVudC5jaGlsZHJlblswXSk7XG4gICAgdGhpcy5yZW5kZXJlci5hcHBlbmRDaGlsZCh0aGlzLmVsLm5hdGl2ZUVsZW1lbnQsIHRoaXMuc2RzUG9wdXBEaXYpO1xuICB9XG59XG4iXX0=