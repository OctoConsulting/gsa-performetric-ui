/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, ElementRef, Renderer2, Input, ComponentFactoryResolver, ViewContainerRef } from '@angular/core';
import { FaIconComponent } from '@fortawesome/angular-fontawesome';
export class ExternalLinkDirective {
    /**
     * @param {?} el
     * @param {?} renderer
     * @param {?} cfr
     * @param {?} vc
     */
    constructor(el, renderer, cfr, vc) {
        this.el = el;
        this.renderer = renderer;
        this.cfr = cfr;
        this.vc = vc;
        this.hideIcon = false;
    }
    /**
     * @private
     * @return {?}
     */
    get isExternalLink() {
        return this.href.replace(/^https?:\/\//, '').replace(/^www\./, '').split('/')[0] != location.hostname;
    }
    /**
     * @return {?}
     */
    ngOnChanges() {
        if (!this.isExternalLink) {
            return;
        }
        if (!this.hideIcon) {
            this.createIcon();
        }
    }
    /**
     * @private
     * @return {?}
     */
    createIcon() {
        // tslint:disable-next-line:no-unused-expression
        this.vc.constructor.name === "ViewContainerRef_";
        /** @type {?} */
        const factory = this.cfr.resolveComponentFactory(FaIconComponent);
        /** @type {?} */
        const component = this.vc.createComponent(factory);
        component.instance.iconProp = ['fas', 'external-link-alt'];
        /** @type {?} */
        const spanElement = document.createElement('span');
        spanElement.classList.add('margin-left-2px');
        /** @type {?} */
        const supElement = document.createElement('sup');
        supElement.appendChild(component.location.nativeElement);
        spanElement.appendChild(supElement);
        this.el.nativeElement.appendChild(spanElement);
        component.instance.ngOnChanges({});
    }
}
ExternalLinkDirective.decorators = [
    { type: Directive, args: [{
                selector: 'a[href]'
            },] }
];
/** @nocollapse */
ExternalLinkDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 },
    { type: ComponentFactoryResolver },
    { type: ViewContainerRef }
];
ExternalLinkDirective.propDecorators = {
    href: [{ type: Input }],
    hideIcon: [{ type: Input }]
};
if (false) {
    /**
     * @type {?}
     * @private
     */
    ExternalLinkDirective.prototype.vcRef;
    /** @type {?} */
    ExternalLinkDirective.prototype.href;
    /** @type {?} */
    ExternalLinkDirective.prototype.hideIcon;
    /**
     * @type {?}
     * @private
     */
    ExternalLinkDirective.prototype.el;
    /**
     * @type {?}
     * @private
     */
    ExternalLinkDirective.prototype.renderer;
    /**
     * @type {?}
     * @private
     */
    ExternalLinkDirective.prototype.cfr;
    /**
     * @type {?}
     * @private
     */
    ExternalLinkDirective.prototype.vc;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXh0ZXJuYWwtbGluay5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZ3NhLXNhbS9jb21wb25lbnRzLyIsInNvdXJjZXMiOlsibGliL2V4dGVybmFsLWxpbmsvZXh0ZXJuYWwtbGluay5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFDTCxTQUFTLEVBRVQsVUFBVSxFQUNWLFNBQVMsRUFDVCxLQUFLLEVBQ0wsd0JBQXdCLEVBQ3hCLGdCQUFnQixFQUVqQixNQUFNLGVBQWUsQ0FBQztBQUV2QixPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sa0NBQWtDLENBQUM7QUFJbkUsTUFBTSxPQUFPLHFCQUFxQjs7Ozs7OztJQVdoQyxZQUNVLEVBQWMsRUFDZCxRQUFtQixFQUFVLEdBQTZCLEVBQVcsRUFBcUI7UUFEMUYsT0FBRSxHQUFGLEVBQUUsQ0FBWTtRQUNkLGFBQVEsR0FBUixRQUFRLENBQVc7UUFBVSxRQUFHLEdBQUgsR0FBRyxDQUEwQjtRQUFXLE9BQUUsR0FBRixFQUFFLENBQW1CO1FBVHBGLGFBQVEsR0FBWSxLQUFLLENBQUM7SUFVeEMsQ0FBQzs7Ozs7SUFQSCxJQUFZLGNBQWM7UUFDeEIsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxjQUFjLEVBQUMsRUFBRSxDQUFDLENBQUMsT0FBTyxDQUFDLFFBQVEsRUFBRSxFQUFFLENBQUMsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksUUFBUSxDQUFDLFFBQVEsQ0FBQztJQUN2RyxDQUFDOzs7O0lBT1EsV0FBVztRQUNsQixJQUFJLENBQUMsSUFBSSxDQUFDLGNBQWMsRUFBQztZQUN2QixPQUFPO1NBQ1I7UUFDRCxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRTtZQUNsQixJQUFJLENBQUMsVUFBVSxFQUFFLENBQUM7U0FFbkI7SUFDSCxDQUFDOzs7OztJQUVPLFVBQVU7UUFDaEIsZ0RBQWdEO1FBQ2hELElBQUksQ0FBQyxFQUFFLENBQUMsV0FBVyxDQUFDLElBQUksS0FBSyxtQkFBbUIsQ0FBQzs7Y0FDM0MsT0FBTyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsdUJBQXVCLENBQUMsZUFBZSxDQUFDOztjQUMzRCxTQUFTLEdBQUcsSUFBSSxDQUFDLEVBQUUsQ0FBQyxlQUFlLENBQUMsT0FBTyxDQUFDO1FBQ2xELFNBQVMsQ0FBQyxRQUFRLENBQUMsUUFBUSxHQUFJLENBQUMsS0FBSyxFQUFDLG1CQUFtQixDQUFDLENBQUM7O2NBQ3JELFdBQVcsR0FBRyxRQUFRLENBQUMsYUFBYSxDQUFDLE1BQU0sQ0FBQztRQUNsRCxXQUFXLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDOztjQUN2QyxVQUFVLEdBQUcsUUFBUSxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUM7UUFDaEQsVUFBVSxDQUFDLFdBQVcsQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLGFBQWEsQ0FBQyxDQUFDO1FBQ3pELFdBQVcsQ0FBQyxXQUFXLENBQUMsVUFBVSxDQUFDLENBQUM7UUFDcEMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxhQUFhLENBQUMsV0FBVyxDQUFDLFdBQVcsQ0FBQyxDQUFDO1FBQy9DLFNBQVMsQ0FBQyxRQUFRLENBQUMsV0FBVyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQ3JDLENBQUM7OztZQTFDRixTQUFTLFNBQUM7Z0JBQ1QsUUFBUSxFQUFFLFNBQVM7YUFDcEI7Ozs7WUFYQyxVQUFVO1lBQ1YsU0FBUztZQUVULHdCQUF3QjtZQUN4QixnQkFBZ0I7OzttQkFXZixLQUFLO3VCQUNMLEtBQUs7Ozs7Ozs7SUFGSixzQ0FBZ0M7O0lBQ2xDLHFDQUFzQjs7SUFDdEIseUNBQTBDOzs7OztJQVF4QyxtQ0FBc0I7Ozs7O0lBQ3RCLHlDQUEyQjs7Ozs7SUFBRSxvQ0FBcUM7Ozs7O0lBQUcsbUNBQTZCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgRGlyZWN0aXZlLFxuICBBZnRlclZpZXdDaGVja2VkLFxuICBFbGVtZW50UmVmLFxuICBSZW5kZXJlcjIsXG4gIElucHV0LFxuICBDb21wb25lbnRGYWN0b3J5UmVzb2x2ZXIsXG4gIFZpZXdDb250YWluZXJSZWYsXG4gIE9uQ2hhbmdlc1xufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IGZhQ29mZmVlLCBmYUV4dGVybmFsTGlua0FsdCB9IGZyb20gJ0Bmb3J0YXdlc29tZS9mcmVlLXNvbGlkLXN2Zy1pY29ucyc7XG5pbXBvcnQgeyBGYUljb25Db21wb25lbnQgfSBmcm9tICdAZm9ydGF3ZXNvbWUvYW5ndWxhci1mb250YXdlc29tZSc7XG5ARGlyZWN0aXZlKHtcbiAgc2VsZWN0b3I6ICdhW2hyZWZdJ1xufSlcbmV4cG9ydCBjbGFzcyBFeHRlcm5hbExpbmtEaXJlY3RpdmVcbiAgaW1wbGVtZW50cyBPbkNoYW5nZXMge1xuICAgIHByaXZhdGUgdmNSZWY6IFZpZXdDb250YWluZXJSZWY7XG4gIEBJbnB1dCgpIGhyZWY6IHN0cmluZztcbiAgQElucHV0KCkgcHVibGljIGhpZGVJY29uOiBib29sZWFuID0gZmFsc2U7XG5cbiBcbiAgcHJpdmF0ZSBnZXQgaXNFeHRlcm5hbExpbmsgKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLmhyZWYucmVwbGFjZSgvXmh0dHBzPzpcXC9cXC8vLCcnKS5yZXBsYWNlKC9ed3d3XFwuLywgJycpLnNwbGl0KCcvJylbMF0gIT0gbG9jYXRpb24uaG9zdG5hbWU7XG4gIH1cblxuICBjb25zdHJ1Y3RvciAoXG4gICAgcHJpdmF0ZSBlbDogRWxlbWVudFJlZixcbiAgICBwcml2YXRlIHJlbmRlcmVyOiBSZW5kZXJlcjIsIHByaXZhdGUgY2ZyOiBDb21wb25lbnRGYWN0b3J5UmVzb2x2ZXIgLCBwcml2YXRlIHZjIDogVmlld0NvbnRhaW5lclJlZikgeyAgIFxuICAgIH1cblxuICAgIHB1YmxpYyBuZ09uQ2hhbmdlcyAoKSB7XG4gICAgaWYgKCF0aGlzLmlzRXh0ZXJuYWxMaW5rKXtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKCF0aGlzLmhpZGVJY29uKSB7XG4gICAgICB0aGlzLmNyZWF0ZUljb24oKTtcbiAgICAgIFxuICAgIH1cbiAgfVxuIFxuICBwcml2YXRlIGNyZWF0ZUljb24gKCkge1xuICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby11bnVzZWQtZXhwcmVzc2lvblxuICAgIHRoaXMudmMuY29uc3RydWN0b3IubmFtZSA9PT0gXCJWaWV3Q29udGFpbmVyUmVmX1wiO1xuICAgIGNvbnN0IGZhY3RvcnkgPSB0aGlzLmNmci5yZXNvbHZlQ29tcG9uZW50RmFjdG9yeShGYUljb25Db21wb25lbnQpO1xuICAgIGNvbnN0IGNvbXBvbmVudCA9IHRoaXMudmMuY3JlYXRlQ29tcG9uZW50KGZhY3RvcnkpO1xuICAgIGNvbXBvbmVudC5pbnN0YW5jZS5pY29uUHJvcCA9ICBbJ2ZhcycsJ2V4dGVybmFsLWxpbmstYWx0J107XG4gICAgY29uc3Qgc3BhbkVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzcGFuJyk7XG4gICAgc3BhbkVsZW1lbnQuY2xhc3NMaXN0LmFkZCgnbWFyZ2luLWxlZnQtMnB4Jyk7XG4gICAgY29uc3Qgc3VwRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3N1cCcpO1xuICAgIHN1cEVsZW1lbnQuYXBwZW5kQ2hpbGQoY29tcG9uZW50LmxvY2F0aW9uLm5hdGl2ZUVsZW1lbnQpO1xuICAgIHNwYW5FbGVtZW50LmFwcGVuZENoaWxkKHN1cEVsZW1lbnQpO1xuICAgIHRoaXMuZWwubmF0aXZlRWxlbWVudC5hcHBlbmRDaGlsZChzcGFuRWxlbWVudCk7XG4gICAgY29tcG9uZW50Lmluc3RhbmNlLm5nT25DaGFuZ2VzKHt9KTtcbiAgfVxuIFxufVxuIl19