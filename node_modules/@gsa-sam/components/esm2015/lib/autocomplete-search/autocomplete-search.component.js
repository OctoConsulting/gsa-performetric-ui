/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, ViewChild, TemplateRef, ElementRef, forwardRef, ChangeDetectorRef } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { KeyHelper, KEYS } from '../key-helper/key-helper';
import { SDSSelectedItemModel } from '../selected-result/models/sds-selectedItem.model';
import { SelectionMode, SDSSelectedItemModelHelper } from '../selected-result/models/sds-selected-item-model-helper';
import { SDSAutocompleteSearchConfiguration } from './models/SDSAutocompleteConfiguration';
/** @type {?} */
const Autocomplete_Autocomplete_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef((/**
     * @return {?}
     */
    () => SDSAutocompleteSearchComponent)),
    multi: true
};
export class SDSAutocompleteSearchComponent {
    /**
     * @param {?} _changeDetectorRef
     */
    constructor(_changeDetectorRef) {
        this._changeDetectorRef = _changeDetectorRef;
        /**
         * selected index
         */
        this.highlightedIndex = 0;
        /**
         * value of the input field
         */
        this.inputValue = '';
        /**
         * Proprty being set on the object is highlighted
         */
        this.HighlightedPropertyName = 'highlighted';
        this.showLoad = true;
        /**
         * Search string
         */
        this.searchString = null;
        /**
         * To make input readonly
         */
        this.inputReadOnly = false;
        /**
         * Used to store selected items
         */
        this.items = [];
        /**
         * Stored Event for ControlValueAccessor
         */
        this.onTouchedCallback = (/**
         * @return {?}
         */
        () => null);
        /**
         * Stored Event for ControlValueAccessor
         */
        this.propogateChange = (/**
         * @param {?} _
         * @return {?}
         */
        (_) => null);
        this.resultsAvailableMessage = ' results available. Use up and down arrows\
  to scroll through results. Hit enter to select.';
        this.index = 0;
        /**
         * Determines if the dropdown should be shown
         */
        this.showResults = false;
    }
    /**
     * Gets the string value from the specifed properties of an object
     * @param {?} object
     * @param {?} propertyFields comma seperated list with periods depth of object
     * @return {?}
     */
    getObjectValue(object, propertyFields) {
        /** @type {?} */
        let value = '';
        /** @type {?} */
        let current = object;
        /** @type {?} */
        let fieldSplit = propertyFields.split(',');
        for (let i = 0; i < fieldSplit.length; i++) {
            /** @type {?} */
            let fieldValue = fieldSplit[i];
            /** @type {?} */
            let fieldPartSplit = fieldValue.split('.');
            for (let j = 0; j < fieldPartSplit.length; j++) {
                /** @type {?} */
                let fieldCheckValue = fieldPartSplit[j];
                if (current) {
                    current = current[fieldCheckValue];
                }
            }
            if (current) {
                value += current.toString() + ' ';
            }
            current = object;
        }
        return value.trim();
    }
    /**
     * Clears the input fields and value
     * @return {?}
     */
    clearInput() {
        this.inputValue = '';
        this.onTouchedCallback();
        this.clearAndHideResults();
    }
    /**
     *
     * @param {?} event
     * @return {?}
     */
    checkForFocus(event) {
        this.focusRemoved();
        this.showResults = false;
    }
    /**
     *
     * @private
     * @return {?}
     */
    focusRemoved() {
        if (this.configuration) {
            if (this.configuration.selectionMode === SelectionMode.SINGLE) {
                if (this.model.items.length > 0) {
                    if (this.inputValue.length === 0) {
                        SDSSelectedItemModelHelper.clearItems(this.model.items);
                        this.propogateChange(this.model);
                    }
                    else {
                        this.inputValue = this.getObjectValue(this.model.items[0], this.configuration.primaryTextField);
                    }
                }
            }
            else {
                this.inputValue = '';
            }
        }
        else {
            this.inputValue = '';
        }
    }
    /**
     * @param {?} ev
     * @return {?}
     */
    onkeypress(ev) {
        return this.configuration.inputReadOnly ? false : true;
    }
    /**
     * @param {?} event
     * @return {?}
     */
    textChange(event) {
        if (!this.configuration.isTagModeEnabled) {
            // ie 11 placeholders will incorrectly trigger input events (known bug)
            // if input isn't active element then don't do anything
            if (event.target != document.activeElement) {
                event.preventDefault();
                return;
            }
            /** @type {?} */
            const searchString = event.target.value || '';
            this.getResults(searchString);
        }
    }
    /**
     * Event method used when focus is gained to the input
     * @return {?}
     */
    inputFocusHandler() {
        if (!this.configuration.isTagModeEnabled) {
            if (this.configuration.focusInSearch) {
                this.getResults(this.inputValue || '');
            }
            this.onTouchedCallback();
        }
    }
    /**
     * Key event
     * @param {?} event
     * @return {?}
     */
    onKeydown(event) {
        if (KeyHelper.is(KEYS.TAB, event)) {
            return;
        }
        else if (KeyHelper.is(KEYS.BACKSPACE, event)) {
            if (this.configuration.inputReadOnly) {
                event.preventDefault();
            }
        }
        else if (KeyHelper.is(KEYS.DOWN, event)) {
            this.onArrowDown();
        }
        else if (KeyHelper.is(KEYS.UP, event)) {
            event.preventDefault();
            this.onArrowUp();
        }
        else if (KeyHelper.is(KEYS.ENTER, event) && this.highlightedIndex >= 0) {
            if (this.configuration.isTagModeEnabled) {
                /** @type {?} */
                const val = this.createFreeTextItem();
                this.selectItem(val);
            }
            else {
                this.selectItem(this.highlightedItem);
            }
        }
        else if (KeyHelper.is(KEYS.ENTER, event) && this.highlightedIndex < 0) {
            /** @type {?} */
            const val = this.createFreeTextItem();
            this.selectItem(val);
        }
        else if (KeyHelper.is(KEYS.ESC, event)) {
            if (this.showResults) {
                this.clearAndHideResults();
                if (event.stopPropagation) {
                    event.stopPropagation();
                }
            }
        }
    }
    /**
     * selects the item adding it to the model and closes the results
     * @param {?} item
     * @return {?}
     */
    selectItem(item) {
        SDSSelectedItemModelHelper.addItem(item, this.configuration.primaryKeyField, this.configuration.selectionMode, this.items);
        setTimeout((/**
         * @return {?}
         */
        () => {
            this.model.items = [...this.items];
            this.propogateChange(this.model);
        }), 0);
        /** @type {?} */
        let message = this.getObjectValue(item, this.configuration.primaryTextField);
        this.inputValue = message;
        this.focusRemoved();
        this.showResults = false;
    }
    /**
     *  clears the results and closes result drop down
     * @private
     * @return {?}
     */
    clearAndHideResults() {
        this.results = [];
        this.showResults = false;
        this.focusRemoved();
    }
    /**
     *  handles the arrow up key event
     * @private
     * @return {?}
     */
    onArrowUp() {
        if (this.results && this.results.length > 0) {
            if (this.highlightedIndex >= 0) {
                this.highlightedIndex--;
                this.setHighlightedItem(this.results[this.highlightedIndex]);
                this.scrollSelectedItemIntoView();
            }
        }
    }
    /**
     *  handles the arrow down key event
     * @private
     * @return {?}
     */
    onArrowDown() {
        if (this.results && this.results.length > 0) {
            if (this.highlightedIndex < this.results.length - 1) {
                this.highlightedIndex++;
                this.setHighlightedItem(this.results[this.highlightedIndex]);
                this.scrollSelectedItemIntoView();
            }
        }
    }
    /**
     * @return {?}
     */
    showFreeText() {
        if (this.configuration.isFreeTextEnabled) {
            if (this.inputValue) {
                if (this.inputValue.length !== 0) {
                    /** @type {?} */
                    let foundItem = false;
                    if (this.results) {
                        for (var i = 0; i < this.results.length && !foundItem; i++) {
                            /** @type {?} */
                            let item = this.results[i];
                            foundItem =
                                item[this.configuration.primaryTextField] === this.inputValue;
                        }
                    }
                    if (this.model.items.length > 0 && !foundItem) {
                        for (var i = 0; i < this.model.items.length && !foundItem; i++) {
                            /** @type {?} */
                            let item = this.model.items[i];
                            foundItem =
                                item[this.configuration.primaryTextField] === this.inputValue;
                        }
                    }
                    return !foundItem;
                }
                else {
                    return false;
                }
            }
            else {
                return false;
            }
        }
        else {
            return this.configuration.isFreeTextEnabled;
        }
    }
    /**
     * @private
     * @return {?}
     */
    createFreeTextItem() {
        /** @type {?} */
        let item = { type: 'custom' };
        item[this.configuration.primaryTextField] = this.inputValue;
        item[this.configuration.primaryKeyField] = this.inputValue;
        return item;
    }
    /**
     *  gets the inital results
     * @private
     * @param {?} searchString
     * @return {?}
     */
    getResults(searchString) {
        if (searchString.length >= this.configuration.minimumCharacterCountSearch) {
            if (!this.matchPastSearchString(searchString) ||
                (this.matchPastSearchString(searchString) && !this.showResults) ||
                this.matchPastSearchString('')) {
                this.searchString = searchString;
                window.clearTimeout(this.timeoutNumber);
                this.timeoutNumber = window.setTimeout((/**
                 * @return {?}
                 */
                () => {
                    this.showLoad = true;
                    this.service.getDataByText(0, searchString).subscribe((/**
                     * @param {?} result
                     * @return {?}
                     */
                    result => {
                        this.results = result.items;
                        this.showLoad = false;
                        this.maxResults = result.totalItems;
                        this.highlightedIndex = this.configuration.isFreeTextEnabled
                            ? -1
                            : 0;
                        if (!this.configuration.isFreeTextEnabled) {
                            this.setHighlightedItem(this.results[this.highlightedIndex]);
                        }
                        this.showResults = true;
                        this.addScreenReaderMessage(this.maxResults + ' ' + this.resultsAvailableMessage);
                        this._changeDetectorRef.markForCheck();
                    }));
                }), this.configuration.debounceTime);
            }
        }
    }
    /**
     * Checks if the new search string matches the old search string
     * @private
     * @param {?} searchString
     * @return {?}
     */
    matchPastSearchString(searchString) {
        return this.searchString === searchString;
    }
    /**
     * highlights the index being hovered
     * @param {?} index
     * @return {?}
     */
    listItemHover(index) {
        this.highlightedIndex = index;
        this.setHighlightedItem(this.results[this.highlightedIndex]);
    }
    /**
     * Scroll Event Handler (Calculates if mpre items should be asked for from service on scrolling down)
     * @return {?}
     */
    onScroll() {
        if (this.maxResults > this.results.length) {
            /** @type {?} */
            let scrollAreaHeight = this.resultsListElement.nativeElement.offsetHeight;
            /** @type {?} */
            let scrollTopPos = this.resultsListElement.nativeElement.scrollTop;
            /** @type {?} */
            let scrollAreaMaxHeight = this.resultsListElement.nativeElement
                .scrollHeight;
            if (scrollTopPos + scrollAreaHeight * 2 >= scrollAreaMaxHeight) {
                this.getAdditionalResults();
            }
        }
    }
    /**
     * gets more results based when scrolling and adds the items
     * @private
     * @return {?}
     */
    getAdditionalResults() {
        this.showLoad = true;
        this.service
            .getDataByText(this.results.length, this.searchString)
            .subscribe((/**
         * @param {?} result
         * @return {?}
         */
        result => {
            for (let i = 0; i < result.items.length; i++) {
                this.addResult(result.items[i]);
            }
            this.showLoad = false;
            this.maxResults = result.totalItems;
        }));
    }
    /**
     * adds a single item to the list
     * @private
     * @param {?} item
     * @return {?}
     */
    addResult(item) {
        //add check to make sure item does not exist
        this.results.push(item);
    }
    /**
     * When paging up and down with arrow key it sets the highlighted item into view
     * @private
     * @return {?}
     */
    scrollSelectedItemIntoView() {
        if (this.highlightedIndex >= 0) {
            /** @type {?} */
            const selectedChild = this.resultsListElement.nativeElement.children[this.highlightedIndex];
            selectedChild.scrollIntoView({
                behavior: 'smooth',
                block: 'nearest',
                inline: 'start'
            });
        }
    }
    /**
     * Sets the highlighted item by keyboard or mouseover
     * @private
     * @param {?} item
     * @return {?}
     */
    setHighlightedItem(item) {
        if (this.results && this.results.length > 0) {
            if (this.highlightedItem) {
                this.highlightedItem[this.HighlightedPropertyName] = false;
            }
            /** @type {?} */
            let message = '';
            if (item) {
                this.highlightedItem = item;
                this.highlightedItem[this.HighlightedPropertyName] = true;
                message = item[this.configuration.primaryTextField];
                if (this.configuration.secondaryTextField &&
                    item[this.configuration.secondaryTextField]) {
                    message += ': ' + item[this.configuration.secondaryTextField];
                }
            }
            else {
                this.highlightedItem = undefined;
                message = 'No item selected';
            }
            this.addScreenReaderMessage(message);
        }
    }
    /**
     * Adds message to be read by screen reader
     * @private
     * @param {?} message
     * @return {?}
     */
    addScreenReaderMessage(message) {
        this.srOnlyText = message;
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    writeValue(obj) {
        if (obj instanceof SDSSelectedItemModel) {
            this.model = (/** @type {?} */ (obj));
            this._changeDetectorRef.markForCheck();
            if (this.model.items.length === 0) {
                this.inputValue = '';
            }
            else {
                if (this.configuration.selectionMode === SelectionMode.SINGLE) {
                    this.inputValue = this.getObjectValue(this.model.items[0], this.configuration.primaryTextField);
                }
            }
        }
    }
    /**
     * @return {?}
     */
    getClass() {
        return this.configuration.inputReadOnly &&
            this.configuration.selectionMode === SelectionMode.MULTIPLE
            ? 'hide-cursor'
            : '';
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnChange(fn) {
        this.propogateChange = fn;
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnTouched(fn) {
        this.onTouchedCallback = fn;
    }
    /**
     * @param {?} isDisabled
     * @return {?}
     */
    setDisabledState(isDisabled) {
        this.disabled = isDisabled;
    }
}
SDSAutocompleteSearchComponent.decorators = [
    { type: Component, args: [{
                selector: 'sds-search-autocomplete',
                template: "<div sds-click-outside (clickOutside)=\"checkForFocus($event)\" sds-tab-outside (tabOutside)=\"checkForFocus($event)\">\n  <div class=\"maxw-mobile-lg position-relative\">\n    <div role=\"combobox\" [attr.id]=\"configuration.id+'-container'\" [attr.aria-expanded]=\"showResults\" [attr.aria-owns]=\"showResults? configuration.id+ '-listbox' : undefined\"\n      aria-haspopup=\"listbox\">\n      <input [disabled]=\"disabled\" (keypress)=\"onkeypress($event)\" (input)=\"textChange($event)\" class=\"usa-input padding-right-3\"\n        [ngClass]=\"getClass()\" #input [attr.aria-label]=\"configuration.ariaLabelText\" [attr.id]=\"configuration.id\" type=\"text\"\n        (focus)=\"inputFocusHandler()\" (keydown)=\"onKeydown($event)\" [(ngModel)]=\"inputValue\" aria-autocomplete=\"list\"\n        [attr.placeholder]=\"configuration.autocompletePlaceHolderText\" [attr.aria-activedescendant]=\"showResults? configuration.id+'-resultItem-'+highlightedIndex :''\"\n        [attr.aria-controls]=\"showResults? configuration.id+ '-listbox' : undefined\" autocomplete=\"off\">\n    </div>\n    <ul #resultsList *ngIf=\"showResults\" [attr.id]=\"configuration.id+ '-listbox'\" role=\"listbox\" class=\"usa-list usa-list--unstyled sds-autocomplete\"\n      (scroll)=\"onScroll()\">\n      <ng-container *ngIf=\"(results && results.length > 0)\">\n        <li [attr.id]=\"configuration.id+'-resultItem-'+i\" role=\"option\" *ngFor=\"let result of results; let i = index\"\n          (mouseenter)=\"listItemHover(i)\" [class]=\"result['highlighted'] ? 'sds-autocomplete__item sds-autocomplete__item--selected' : 'sds-autocomplete__item' \"\n          (click)=\"selectItem(result)\">\n          <ng-container *ngIf=\"itemTemplate\" [ngTemplateOutlet]=\"itemTemplate\" [ngTemplateOutletContext]=\"{$implicit:result}\">\n          </ng-container>\n\n          <ng-container *ngIf=\"!itemTemplate\">\n            <span class=\"display-block text-semibold\">\n              {{ getObjectValue(result, configuration.primaryTextField) }}\n              <span *ngIf=\"result.type === 'custom'\">\n                - {{configuration.freeTextSubtext}}\n              </span>\n            </span>\n            <ng-container *ngIf=\"configuration.secondaryTextField &&  result[configuration.secondaryTextField] \">\n              <span class=\"description\">{{ result[configuration.secondaryTextField] }}</span>\n            </ng-container>\n          </ng-container>\n        </li>\n      </ng-container>\n      <ng-container *ngIf=\"(!results || results.length == 0)\">\n        <li class=\"emptyResults margin-1\">No results found</li>\n      </ng-container>\n      <ng-container *ngIf=\"showLoad\">\n        <li class=\"autoLoading\">\n          <div class=\"lightToGrayBackgroundGradiate\">\n\n          </div>\n          <div class=\"grayToLightBackgroundGradiate\">\n\n          </div>\n        </li>\n        <li class=\"autoLoading\">\n          <div class=\"lightToGrayBackgroundGradiate\">\n\n          </div>\n          <div class=\"grayToLightBackgroundGradiate\">\n\n          </div>\n        </li>\n      </ng-container>\n    </ul>\n\n    <ng-container *ngIf=\"!input.disabled\">\n      <span class=\"position-absolute right-105 top-1 cursor-pointer\">\n        <span *ngIf=\"(inputValue && !disabled)\" tabindex=\"0\" role=\"button\" aria-label=\"Clear input\" aria-hidden=\"false\"\n          (click)=\"clearInput()\" (keyup.enter)=\"clearInput()\">\n          <fa-icon [icon]=\"['fas', 'times']\" size=\"xs\"></fa-icon>\n        </span>\n        <span *ngIf=\"!configuration.isTagModeEnabled\" tabindex=\"1\" role=\"button\" aria-label=\"Clear input\" aria-hidden=\"false\"\n          class=\"margin-left-1\">\n          <fa-icon *ngIf=\"(!showResults && !disabled)\" (click)=\"inputFocusHandler()\" [icon]=\"['fas', 'caret-down']\"\n            size=\"sm\"></fa-icon>\n          <fa-icon *ngIf=\"(showResults && !disabled)\" (click)=\"checkForFocus($event)\" [icon]=\"['fas', 'caret-up']\" size=\"sm\"></fa-icon>\n        </span>\n      </span>\n    </ng-container>\n    <ul class=\"usa-sr-only\" aria-live=\"assertive\">\n      <li>{{srOnlyText}}</li>\n    </ul>\n  </div>",
                providers: [Autocomplete_Autocomplete_VALUE_ACCESSOR],
                styles: [".grayToLightBackgroundGradiate{background:linear-gradient(to right,#c4c4c4,#f7f7f7);background-size:400% 400%;height:10px;padding:2.5px 0;text-align:center;color:#888;font-size:15px;font-weight:700;margin:7px 10px 0;-webkit-animation:5s infinite gradiantShiftGray;animation:5s infinite gradiantShiftGray}@-webkit-keyframes gradiantShiftGray{0%,100%{background-position:0 50%}50%{background-position:100% 50%}}@keyframes gradiantShiftGray{0%,100%{background-position:0 50%}50%{background-position:100% 50%}}.lightToGrayBackgroundGradiate{background:linear-gradient(to right,#f7f7f7,#c4c4c4);background-size:400% 400%;height:15px;padding:2.5px 0;text-align:center;color:#888;font-size:15px;font-weight:700;margin:10px 10px 0;-webkit-animation:5s infinite gradiantShift;animation:5s infinite gradiantShift}@-webkit-keyframes gradiantShift{0%,100%{background-position:0 50%}50%{background-position:100% 50%}}@keyframes gradiantShift{0%,100%{background-position:0 50%}50%{background-position:100% 50%}}.autoLoading{height:60px}.hide-cursor{color:transparent;text-shadow:0 0 0}"]
            }] }
];
/** @nocollapse */
SDSAutocompleteSearchComponent.ctorParameters = () => [
    { type: ChangeDetectorRef }
];
SDSAutocompleteSearchComponent.propDecorators = {
    resultsListElement: [{ type: ViewChild, args: ['resultsList',] }],
    input: [{ type: ViewChild, args: ['input',] }],
    itemTemplate: [{ type: Input }],
    configuration: [{ type: Input }],
    service: [{ type: Input }],
    inputReadOnly: [{ type: Input }],
    disabled: [{ type: Input }]
};
if (false) {
    /**
     * Ul list of elements
     * @type {?}
     */
    SDSAutocompleteSearchComponent.prototype.resultsListElement;
    /**
     * input control
     * @type {?}
     */
    SDSAutocompleteSearchComponent.prototype.input;
    /**
     * Allow to insert a customized template for suggestions to use
     * @type {?}
     */
    SDSAutocompleteSearchComponent.prototype.itemTemplate;
    /**
     * The data model that has the selected item
     * @type {?}
     */
    SDSAutocompleteSearchComponent.prototype.model;
    /**
     * Configuration for the Autocomplete control
     * @type {?}
     */
    SDSAutocompleteSearchComponent.prototype.configuration;
    /**
     * Instance of the SamHiercarchicalServiceInterface provided
     * @type {?}
     */
    SDSAutocompleteSearchComponent.prototype.service;
    /**
     * Timer id for the timer awaiting the service call for more typeing
     * @type {?}
     * @private
     */
    SDSAutocompleteSearchComponent.prototype.timeoutNumber;
    /**
     *  result set to be rendered
     * @type {?}
     */
    SDSAutocompleteSearchComponent.prototype.results;
    /**
     * max number of results to be shown
     * @type {?}
     * @private
     */
    SDSAutocompleteSearchComponent.prototype.maxResults;
    /**
     * selected index
     * @type {?}
     */
    SDSAutocompleteSearchComponent.prototype.highlightedIndex;
    /**
     * highlighted object in drop down
     * @type {?}
     * @private
     */
    SDSAutocompleteSearchComponent.prototype.highlightedItem;
    /**
     * value of the input field
     * @type {?}
     */
    SDSAutocompleteSearchComponent.prototype.inputValue;
    /**
     * Proprty being set on the object is highlighted
     * @type {?}
     * @private
     */
    SDSAutocompleteSearchComponent.prototype.HighlightedPropertyName;
    /** @type {?} */
    SDSAutocompleteSearchComponent.prototype.showLoad;
    /**
     * Search string
     * @type {?}
     * @private
     */
    SDSAutocompleteSearchComponent.prototype.searchString;
    /**
     * Message announced by screen readers when
     * autocomplete results are updated or new item
     * is highlighted
     * @type {?}
     */
    SDSAutocompleteSearchComponent.prototype.srOnlyText;
    /**
     * To make input readonly
     * @type {?}
     */
    SDSAutocompleteSearchComponent.prototype.inputReadOnly;
    /**
     * Used to store selected items
     * @type {?}
     */
    SDSAutocompleteSearchComponent.prototype.items;
    /**
     * Stored Event for ControlValueAccessor
     * @type {?}
     */
    SDSAutocompleteSearchComponent.prototype.onTouchedCallback;
    /**
     * Stored Event for ControlValueAccessor
     * @type {?}
     */
    SDSAutocompleteSearchComponent.prototype.propogateChange;
    /** @type {?} */
    SDSAutocompleteSearchComponent.prototype.disabled;
    /**
     * @type {?}
     * @private
     */
    SDSAutocompleteSearchComponent.prototype.resultsAvailableMessage;
    /**
     * @type {?}
     * @private
     */
    SDSAutocompleteSearchComponent.prototype.index;
    /**
     * Determines if the dropdown should be shown
     * @type {?}
     */
    SDSAutocompleteSearchComponent.prototype.showResults;
    /**
     * @type {?}
     * @private
     */
    SDSAutocompleteSearchComponent.prototype._changeDetectorRef;
}
//# sourceMappingURL=data:application/json;base64,