/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ElementRef, Inject, Input, HostBinding, ChangeDetectionStrategy, ViewEncapsulation, Optional } from '@angular/core';
import { FocusMonitor } from '@angular/cdk/a11y';
import { coerceBooleanProperty } from '@angular/cdk/coercion';
import { SDS_MENU_TOKEN } from './menu.component';
import { SdsMenuHeaderComponent } from './menu-header.component';
export class SdsMenuItemComponent {
    /**
     * @param {?} _elementRef
     * @param {?} _focusMonitor
     * @param {?} _parentMenu
     * @param {?} _parentMenuHeader
     */
    constructor(_elementRef, _focusMonitor, _parentMenu, _parentMenuHeader) {
        this._elementRef = _elementRef;
        this._focusMonitor = _focusMonitor;
        this._parentMenu = _parentMenu;
        this._parentMenuHeader = _parentMenuHeader;
        /**
         * Menu item class
         */
        this.class = this._getClass();
        /**
         * ARIA role for the menu item.
         */
        this.role = 'menuitem';
        /**
         * Menu item tab index
         */
        this.tabIndex = this.disabled ? '-1' : '0';
        /**
         * Holds the disable status value
         */
        this._disabled = false;
        // Start listening to focus changes
        _focusMonitor.monitor(this._elementRef, false);
        // Add this menu item to its parent menu
        // If item its inside a header
        // add it as the first item in the list
        if (_parentMenuHeader) {
            _parentMenu.insertItem(this, 0);
        }
        else {
            _parentMenu.addItem(this);
        }
    }
    /**
     * Whether the menu item should be disabled
     * @return {?}
     */
    get disabled() {
        return this._disabled;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set disabled(value) {
        this._disabled = coerceBooleanProperty(value);
    }
    /**
     * Get item class
     * @return {?}
     */
    _getClass() {
        /** @type {?} */
        const headerButtonSmall = this._parentMenu.size === 'sm' ? 'sds-button--small' : '';
        return this._parentMenuHeader
            ? `sds-button sds-button--circular ${headerButtonSmall}`
            : 'sds-menu__item';
    }
    /**
     * Focuses the menu item.
     * @param {?=} origin
     * @return {?}
     */
    focus(origin = 'program') {
        this._focusMonitor.focusVia(this._elementRef.nativeElement, origin);
    }
    /**
     * Stop listening to focus changes and remove item from parent
     * @return {?}
     */
    ngOnDestroy() {
        this._focusMonitor.stopMonitoring(this._elementRef);
        this._parentMenu.removeItem(this);
    }
}
SdsMenuItemComponent.decorators = [
    { type: Component, args: [{
                // tslint:disable-next-line: component-selector
                selector: '[sds-menu-item]',
                template: '<ng-content></ng-content>',
                changeDetection: ChangeDetectionStrategy.OnPush,
                encapsulation: ViewEncapsulation.None
            }] }
];
/** @nocollapse */
SdsMenuItemComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: FocusMonitor },
    { type: undefined, decorators: [{ type: Inject, args: [SDS_MENU_TOKEN,] }] },
    { type: SdsMenuHeaderComponent, decorators: [{ type: Optional }] }
];
SdsMenuItemComponent.propDecorators = {
    class: [{ type: HostBinding, args: ['class',] }],
    role: [{ type: HostBinding, args: ['attr.role',] }, { type: Input }],
    tabIndex: [{ type: HostBinding, args: ['attr.tabIndex',] }],
    disabled: [{ type: Input }]
};
if (false) {
    /**
     * Menu item class
     * @type {?}
     */
    SdsMenuItemComponent.prototype.class;
    /**
     * ARIA role for the menu item.
     * @type {?}
     */
    SdsMenuItemComponent.prototype.role;
    /**
     * Menu item tab index
     * @type {?}
     */
    SdsMenuItemComponent.prototype.tabIndex;
    /**
     * Holds the disable status value
     * @type {?}
     * @private
     */
    SdsMenuItemComponent.prototype._disabled;
    /**
     * @type {?}
     * @private
     */
    SdsMenuItemComponent.prototype._elementRef;
    /**
     * @type {?}
     * @private
     */
    SdsMenuItemComponent.prototype._focusMonitor;
    /**
     * @type {?}
     * @private
     */
    SdsMenuItemComponent.prototype._parentMenu;
    /**
     * @type {?}
     * @private
     */
    SdsMenuItemComponent.prototype._parentMenuHeader;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWVudS1pdGVtLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Bnc2Etc2FtL2NvbXBvbmVudHMvIiwic291cmNlcyI6WyJsaWIvbWVudS9tZW51LWl0ZW0uY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQ0wsU0FBUyxFQUNULFVBQVUsRUFFVixNQUFNLEVBQ04sS0FBSyxFQUNMLFdBQVcsRUFDWCx1QkFBdUIsRUFDdkIsaUJBQWlCLEVBQ2pCLFFBQVEsRUFDVCxNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQW1CLFlBQVksRUFBZSxNQUFNLG1CQUFtQixDQUFDO0FBQy9FLE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBQzlELE9BQU8sRUFBRSxjQUFjLEVBQW9CLE1BQU0sa0JBQWtCLENBQUM7QUFDcEUsT0FBTyxFQUFFLHNCQUFzQixFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFTakUsTUFBTSxPQUFPLG9CQUFvQjs7Ozs7OztJQXNCL0IsWUFDVSxXQUFvQyxFQUNwQyxhQUEyQixFQUUzQixXQUFtRCxFQUN2QyxpQkFBeUM7UUFKckQsZ0JBQVcsR0FBWCxXQUFXLENBQXlCO1FBQ3BDLGtCQUFhLEdBQWIsYUFBYSxDQUFjO1FBRTNCLGdCQUFXLEdBQVgsV0FBVyxDQUF3QztRQUN2QyxzQkFBaUIsR0FBakIsaUJBQWlCLENBQXdCOzs7O1FBekJ6QyxVQUFLLEdBQUcsSUFBSSxDQUFDLFNBQVMsRUFBRSxDQUFDOzs7O1FBR1osU0FBSSxHQUFlLFVBQVUsQ0FBQzs7OztRQUduQyxhQUFRLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUM7Ozs7UUFHNUQsY0FBUyxHQUFHLEtBQUssQ0FBQztRQWtCeEIsbUNBQW1DO1FBQ25DLGFBQWEsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLFdBQVcsRUFBRSxLQUFLLENBQUMsQ0FBQztRQUMvQyx3Q0FBd0M7UUFDeEMsOEJBQThCO1FBQzlCLHVDQUF1QztRQUN2QyxJQUFJLGlCQUFpQixFQUFFO1lBQ3JCLFdBQVcsQ0FBQyxVQUFVLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDO1NBQ2pDO2FBQU07WUFDTCxXQUFXLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO1NBQzNCO0lBQ0gsQ0FBQzs7Ozs7SUF6QkQsSUFDSSxRQUFRO1FBQ1YsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDO0lBQ3hCLENBQUM7Ozs7O0lBQ0QsSUFBSSxRQUFRLENBQUMsS0FBVTtRQUNyQixJQUFJLENBQUMsU0FBUyxHQUFHLHFCQUFxQixDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ2hELENBQUM7Ozs7O0lBc0JELFNBQVM7O2NBQ0QsaUJBQWlCLEdBQ3JCLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxLQUFLLElBQUksQ0FBQyxDQUFDLENBQUMsbUJBQW1CLENBQUMsQ0FBQyxDQUFDLEVBQUU7UUFDM0QsT0FBTyxJQUFJLENBQUMsaUJBQWlCO1lBQzNCLENBQUMsQ0FBQyxtQ0FBbUMsaUJBQWlCLEVBQUU7WUFDeEQsQ0FBQyxDQUFDLGdCQUFnQixDQUFDO0lBQ3ZCLENBQUM7Ozs7OztJQUdELEtBQUssQ0FBQyxTQUFzQixTQUFTO1FBQ25DLElBQUksQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsYUFBYSxFQUFFLE1BQU0sQ0FBQyxDQUFDO0lBQ3RFLENBQUM7Ozs7O0lBR0QsV0FBVztRQUNULElBQUksQ0FBQyxhQUFhLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQztRQUNwRCxJQUFJLENBQUMsV0FBVyxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUNwQyxDQUFDOzs7WUFsRUYsU0FBUyxTQUFDOztnQkFFVCxRQUFRLEVBQUUsaUJBQWlCO2dCQUMzQixRQUFRLEVBQUUsMkJBQTJCO2dCQUNyQyxlQUFlLEVBQUUsdUJBQXVCLENBQUMsTUFBTTtnQkFDL0MsYUFBYSxFQUFFLGlCQUFpQixDQUFDLElBQUk7YUFDdEM7Ozs7WUFwQkMsVUFBVTtZQVNjLFlBQVk7NENBcUNqQyxNQUFNLFNBQUMsY0FBYztZQWxDakIsc0JBQXNCLHVCQW9DMUIsUUFBUTs7O29CQXpCVixXQUFXLFNBQUMsT0FBTzttQkFHbkIsV0FBVyxTQUFDLFdBQVcsY0FBRyxLQUFLO3VCQUcvQixXQUFXLFNBQUMsZUFBZTt1QkFNM0IsS0FBSzs7Ozs7OztJQVpOLHFDQUErQzs7Ozs7SUFHL0Msb0NBQWlFOzs7OztJQUdqRSx3Q0FBb0U7Ozs7OztJQUdwRSx5Q0FBMEI7Ozs7O0lBWXhCLDJDQUE0Qzs7Ozs7SUFDNUMsNkNBQW1DOzs7OztJQUNuQywyQ0FDMkQ7Ozs7O0lBQzNELGlEQUE2RCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIENvbXBvbmVudCxcbiAgRWxlbWVudFJlZixcbiAgT25EZXN0cm95LFxuICBJbmplY3QsXG4gIElucHV0LFxuICBIb3N0QmluZGluZyxcbiAgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksXG4gIFZpZXdFbmNhcHN1bGF0aW9uLFxuICBPcHRpb25hbFxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEZvY3VzYWJsZU9wdGlvbiwgRm9jdXNNb25pdG9yLCBGb2N1c09yaWdpbiB9IGZyb20gJ0Bhbmd1bGFyL2Nkay9hMTF5JztcbmltcG9ydCB7IGNvZXJjZUJvb2xlYW5Qcm9wZXJ0eSB9IGZyb20gJ0Bhbmd1bGFyL2Nkay9jb2VyY2lvbic7XG5pbXBvcnQgeyBTRFNfTUVOVV9UT0tFTiwgU2RzTWVudUludGVyZmFjZSB9IGZyb20gJy4vbWVudS5jb21wb25lbnQnO1xuaW1wb3J0IHsgU2RzTWVudUhlYWRlckNvbXBvbmVudCB9IGZyb20gJy4vbWVudS1oZWFkZXIuY29tcG9uZW50JztcblxuQENvbXBvbmVudCh7XG4gIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTogY29tcG9uZW50LXNlbGVjdG9yXG4gIHNlbGVjdG9yOiAnW3Nkcy1tZW51LWl0ZW1dJyxcbiAgdGVtcGxhdGU6ICc8bmctY29udGVudD48L25nLWNvbnRlbnQ+JyxcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXG4gIGVuY2Fwc3VsYXRpb246IFZpZXdFbmNhcHN1bGF0aW9uLk5vbmVcbn0pXG5leHBvcnQgY2xhc3MgU2RzTWVudUl0ZW1Db21wb25lbnQgaW1wbGVtZW50cyBGb2N1c2FibGVPcHRpb24sIE9uRGVzdHJveSB7XG4gIC8qKiBNZW51IGl0ZW0gY2xhc3MgKi9cbiAgQEhvc3RCaW5kaW5nKCdjbGFzcycpIGNsYXNzID0gdGhpcy5fZ2V0Q2xhc3MoKTtcblxuICAvKiogQVJJQSByb2xlIGZvciB0aGUgbWVudSBpdGVtLiAqL1xuICBASG9zdEJpbmRpbmcoJ2F0dHIucm9sZScpIEBJbnB1dCgpIHJvbGU6ICdtZW51aXRlbScgPSAnbWVudWl0ZW0nO1xuXG4gIC8qKiBNZW51IGl0ZW0gdGFiIGluZGV4ICovXG4gIEBIb3N0QmluZGluZygnYXR0ci50YWJJbmRleCcpIHRhYkluZGV4ID0gdGhpcy5kaXNhYmxlZCA/ICctMScgOiAnMCc7XG5cbiAgLyoqIEhvbGRzIHRoZSBkaXNhYmxlIHN0YXR1cyB2YWx1ZSAqL1xuICBwcml2YXRlIF9kaXNhYmxlZCA9IGZhbHNlO1xuXG4gIC8qKiBXaGV0aGVyIHRoZSBtZW51IGl0ZW0gc2hvdWxkIGJlIGRpc2FibGVkICovXG4gIEBJbnB1dCgpXG4gIGdldCBkaXNhYmxlZCgpIHtcbiAgICByZXR1cm4gdGhpcy5fZGlzYWJsZWQ7XG4gIH1cbiAgc2V0IGRpc2FibGVkKHZhbHVlOiBhbnkpIHtcbiAgICB0aGlzLl9kaXNhYmxlZCA9IGNvZXJjZUJvb2xlYW5Qcm9wZXJ0eSh2YWx1ZSk7XG4gIH1cblxuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIF9lbGVtZW50UmVmOiBFbGVtZW50UmVmPEhUTUxFbGVtZW50PixcbiAgICBwcml2YXRlIF9mb2N1c01vbml0b3I6IEZvY3VzTW9uaXRvcixcbiAgICBASW5qZWN0KFNEU19NRU5VX1RPS0VOKVxuICAgIHByaXZhdGUgX3BhcmVudE1lbnU6IFNkc01lbnVJbnRlcmZhY2U8U2RzTWVudUl0ZW1Db21wb25lbnQ+LFxuICAgIEBPcHRpb25hbCgpIHByaXZhdGUgX3BhcmVudE1lbnVIZWFkZXI6IFNkc01lbnVIZWFkZXJDb21wb25lbnRcbiAgKSB7XG4gICAgLy8gU3RhcnQgbGlzdGVuaW5nIHRvIGZvY3VzIGNoYW5nZXNcbiAgICBfZm9jdXNNb25pdG9yLm1vbml0b3IodGhpcy5fZWxlbWVudFJlZiwgZmFsc2UpO1xuICAgIC8vIEFkZCB0aGlzIG1lbnUgaXRlbSB0byBpdHMgcGFyZW50IG1lbnVcbiAgICAvLyBJZiBpdGVtIGl0cyBpbnNpZGUgYSBoZWFkZXJcbiAgICAvLyBhZGQgaXQgYXMgdGhlIGZpcnN0IGl0ZW0gaW4gdGhlIGxpc3RcbiAgICBpZiAoX3BhcmVudE1lbnVIZWFkZXIpIHtcbiAgICAgIF9wYXJlbnRNZW51Lmluc2VydEl0ZW0odGhpcywgMCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIF9wYXJlbnRNZW51LmFkZEl0ZW0odGhpcyk7XG4gICAgfVxuICB9XG5cbiAgLyoqIEdldCBpdGVtIGNsYXNzICovXG4gIF9nZXRDbGFzcygpOiBzdHJpbmcge1xuICAgIGNvbnN0IGhlYWRlckJ1dHRvblNtYWxsID1cbiAgICAgIHRoaXMuX3BhcmVudE1lbnUuc2l6ZSA9PT0gJ3NtJyA/ICdzZHMtYnV0dG9uLS1zbWFsbCcgOiAnJztcbiAgICByZXR1cm4gdGhpcy5fcGFyZW50TWVudUhlYWRlclxuICAgICAgPyBgc2RzLWJ1dHRvbiBzZHMtYnV0dG9uLS1jaXJjdWxhciAke2hlYWRlckJ1dHRvblNtYWxsfWBcbiAgICAgIDogJ3Nkcy1tZW51X19pdGVtJztcbiAgfVxuXG4gIC8qKiBGb2N1c2VzIHRoZSBtZW51IGl0ZW0uICovXG4gIGZvY3VzKG9yaWdpbjogRm9jdXNPcmlnaW4gPSAncHJvZ3JhbScpOiB2b2lkIHtcbiAgICB0aGlzLl9mb2N1c01vbml0b3IuZm9jdXNWaWEodGhpcy5fZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50LCBvcmlnaW4pO1xuICB9XG5cbiAgLyoqIFN0b3AgbGlzdGVuaW5nIHRvIGZvY3VzIGNoYW5nZXMgYW5kIHJlbW92ZSBpdGVtIGZyb20gcGFyZW50ICovXG4gIG5nT25EZXN0cm95KCkge1xuICAgIHRoaXMuX2ZvY3VzTW9uaXRvci5zdG9wTW9uaXRvcmluZyh0aGlzLl9lbGVtZW50UmVmKTtcbiAgICB0aGlzLl9wYXJlbnRNZW51LnJlbW92ZUl0ZW0odGhpcyk7XG4gIH1cbn1cbiJdfQ==