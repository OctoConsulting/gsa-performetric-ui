/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
export class SDSSelectedItemModelHelper {
    /**
     *  adds an item to the collection
     * if selected mode is single it removes any existing items
     * also checks to see if that item already exists
     * keyfield is used to determine uniqueness of the item added
     * @param {?} itemToAdd
     * @param {?} keyField
     * @param {?} selectionMode
     * @param {?} items
     * @return {?}
     */
    static addItem(itemToAdd, keyField, selectionMode, items) {
        if (!SDSSelectedItemModelHelper.contatinsItem(itemToAdd[keyField], keyField, items)) {
            if (selectionMode === SelectionMode.SINGLE) {
                SDSSelectedItemModelHelper.clearItems(items);
            }
            items.push(itemToAdd);
        }
    }
    /**
     * adds an array of items to the list and will not add duplicate items
     * keyfield is used to determine uniqueness of the item added
     * @param {?} toAddItems
     * @param {?} keyField
     * @param {?} selectionMode
     * @param {?} items
     * @return {?}
     */
    static addItems(toAddItems, keyField, selectionMode, items) {
        for (let i = 0; i < toAddItems.length; i++) {
            SDSSelectedItemModelHelper.addItem(toAddItems[i], keyField, selectionMode, items);
        }
    }
    /**
     * removes the item from the list
     * keyfield is used to determine uniqueness of the item added
     * @param {?} item
     * @param {?} keyField
     * @param {?} items
     * @return {?}
     */
    static removeItem(item, keyField, items) {
        if (SDSSelectedItemModelHelper.contatinsItem(item[keyField], keyField, items)) {
            items.splice(items.indexOf(item), 1);
        }
    }
    /**
     * checks to see if a particular item exists by the provied key
     * keyfield is used to determine uniqueness of the item added
     * @param {?} key
     * @param {?} keyField
     * @param {?} items
     * @return {?}
     */
    static contatinsItem(key, keyField, items) {
        /** @type {?} */
        let item = items.find((/**
         * @param {?} o
         * @return {?}
         */
        o => o[keyField] === key));
        return item !== null && item !== undefined;
    }
    /**
     * Clears the list of items
     * @param {?} items
     * @return {?}
     */
    static clearItems(items) {
        while (items.length > 0) {
            items.pop();
        }
    }
    /**
     * updates an array of items to the list and will not add duplicate items
     * keyfield is used to determine uniqueness of the item added
     * @param {?} selectedItems
     * @param {?} keyField
     * @param {?} selectionMode
     * @param {?} items
     * @return {?}
     */
    static replaceItems(selectedItems, keyField, selectionMode, items) {
        //Clears Old List
        SDSSelectedItemModelHelper.clearItems(items);
        //Adds new List
        SDSSelectedItemModelHelper.addItems(selectedItems, keyField, selectionMode, items);
    }
}
/** @enum {number} */
const SelectionMode = {
    SINGLE: 0, MULTIPLE: 1,
};
export { SelectionMode };
SelectionMode[SelectionMode.SINGLE] = 'SINGLE';
SelectionMode[SelectionMode.MULTIPLE] = 'MULTIPLE';
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2RzLXNlbGVjdGVkLWl0ZW0tbW9kZWwtaGVscGVyLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGdzYS1zYW0vY29tcG9uZW50cy8iLCJzb3VyY2VzIjpbImxpYi9zZWxlY3RlZC1yZXN1bHQvbW9kZWxzL3Nkcy1zZWxlY3RlZC1pdGVtLW1vZGVsLWhlbHBlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsTUFBTSxPQUFPLDBCQUEwQjs7Ozs7Ozs7Ozs7O0lBWTVCLE1BQU0sQ0FBQyxPQUFPLENBQUMsU0FBaUIsRUFBRSxRQUFnQixFQUFFLGFBQTRCLEVBQUUsS0FBZTtRQUNwRyxJQUFJLENBQUMsMEJBQTBCLENBQUMsYUFBYSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsRUFBRSxRQUFRLEVBQUUsS0FBSyxDQUFDLEVBQUU7WUFDakYsSUFBSSxhQUFhLEtBQUssYUFBYSxDQUFDLE1BQU0sRUFBRTtnQkFDeEMsMEJBQTBCLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxDQUFDO2FBQ2hEO1lBQ0QsS0FBSyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztTQUN6QjtJQUNMLENBQUM7Ozs7Ozs7Ozs7SUFVTSxNQUFNLENBQUMsUUFBUSxDQUFDLFVBQW9CLEVBQUUsUUFBZ0IsRUFBRSxhQUE0QixFQUFFLEtBQWU7UUFDeEcsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLFVBQVUsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7WUFDeEMsMEJBQTBCLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsRUFBRSxRQUFRLEVBQUUsYUFBYSxFQUFFLEtBQUssQ0FBQyxDQUFDO1NBQ3JGO0lBQ0wsQ0FBQzs7Ozs7Ozs7O0lBU00sTUFBTSxDQUFDLFVBQVUsQ0FBQyxJQUFZLEVBQUUsUUFBZ0IsRUFBRSxLQUFlO1FBQ3BFLElBQUksMEJBQTBCLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsRUFBRSxRQUFRLEVBQUUsS0FBSyxDQUFDLEVBQUU7WUFDM0UsS0FBSyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFBO1NBQ3ZDO0lBQ0wsQ0FBQzs7Ozs7Ozs7O0lBU00sTUFBTSxDQUFDLGFBQWEsQ0FBQyxHQUFXLEVBQUUsUUFBZ0IsRUFBRSxLQUFlOztZQUNsRSxJQUFJLEdBQUcsS0FBSyxDQUFDLElBQUk7Ozs7UUFBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsS0FBSyxHQUFHLEVBQUM7UUFDL0MsT0FBTyxJQUFJLEtBQUssSUFBSSxJQUFJLElBQUksS0FBSyxTQUFTLENBQUM7SUFDL0MsQ0FBQzs7Ozs7O0lBTU0sTUFBTSxDQUFDLFVBQVUsQ0FBQyxLQUFlO1FBQ3BDLE9BQU8sS0FBSyxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7WUFDckIsS0FBSyxDQUFDLEdBQUcsRUFBRSxDQUFDO1NBQ2Y7SUFDTCxDQUFDOzs7Ozs7Ozs7O0lBVU0sTUFBTSxDQUFDLFlBQVksQ0FBQyxhQUF1QixFQUFFLFFBQWdCLEVBQUUsYUFBNEIsRUFBRSxLQUFlO1FBQy9HLGlCQUFpQjtRQUNqQiwwQkFBMEIsQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDN0MsZUFBZTtRQUNmLDBCQUEwQixDQUFDLFFBQVEsQ0FBQyxhQUFhLEVBQUUsUUFBUSxFQUFFLGFBQWEsRUFBRSxLQUFLLENBQUMsQ0FBQztJQUN2RixDQUFDO0NBQ0o7OztJQUdHLFNBQU0sRUFBRSxXQUFRIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGNsYXNzIFNEU1NlbGVjdGVkSXRlbU1vZGVsSGVscGVyIHtcblxuICAgIC8qKlxuICAgICAgKiAgYWRkcyBhbiBpdGVtIHRvIHRoZSBjb2xsZWN0aW9uXG4gICAgICAqIGlmIHNlbGVjdGVkIG1vZGUgaXMgc2luZ2xlIGl0IHJlbW92ZXMgYW55IGV4aXN0aW5nIGl0ZW1zXG4gICAgICAqIGFsc28gY2hlY2tzIHRvIHNlZSBpZiB0aGF0IGl0ZW0gYWxyZWFkeSBleGlzdHNcbiAgICAgICoga2V5ZmllbGQgaXMgdXNlZCB0byBkZXRlcm1pbmUgdW5pcXVlbmVzcyBvZiB0aGUgaXRlbSBhZGRlZFxuICAgICAgKiBAcGFyYW0gaXRlbVRvQWRkIFxuICAgICAgKiBAcGFyYW0ga2V5RmllbGQgXG4gICAgICAqIEBwYXJhbSBzZWxlY3Rpb25Nb2RlIFxuICAgICAgKiBAcGFyYW0gaXRlbXMgXG4gICAgICAqL1xuICAgIHB1YmxpYyBzdGF0aWMgYWRkSXRlbShpdGVtVG9BZGQ6IG9iamVjdCwga2V5RmllbGQ6IHN0cmluZywgc2VsZWN0aW9uTW9kZTogU2VsZWN0aW9uTW9kZSwgaXRlbXM6IG9iamVjdFtdKSB7XG4gICAgICAgIGlmICghU0RTU2VsZWN0ZWRJdGVtTW9kZWxIZWxwZXIuY29udGF0aW5zSXRlbShpdGVtVG9BZGRba2V5RmllbGRdLCBrZXlGaWVsZCwgaXRlbXMpKSB7XG4gICAgICAgICAgICBpZiAoc2VsZWN0aW9uTW9kZSA9PT0gU2VsZWN0aW9uTW9kZS5TSU5HTEUpIHtcbiAgICAgICAgICAgICAgICBTRFNTZWxlY3RlZEl0ZW1Nb2RlbEhlbHBlci5jbGVhckl0ZW1zKGl0ZW1zKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGl0ZW1zLnB1c2goaXRlbVRvQWRkKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIGFkZHMgYW4gYXJyYXkgb2YgaXRlbXMgdG8gdGhlIGxpc3QgYW5kIHdpbGwgbm90IGFkZCBkdXBsaWNhdGUgaXRlbXNcbiAgICAgKiBrZXlmaWVsZCBpcyB1c2VkIHRvIGRldGVybWluZSB1bmlxdWVuZXNzIG9mIHRoZSBpdGVtIGFkZGVkXG4gICAgICogQHBhcmFtIHRvQWRkSXRlbXMgXG4gICAgICogQHBhcmFtIGtleUZpZWxkIFxuICAgICAqIEBwYXJhbSBzZWxlY3Rpb25Nb2RlIFxuICAgICAqIEBwYXJhbSBpdGVtcyBcbiAgICAgKi9cbiAgICBwdWJsaWMgc3RhdGljIGFkZEl0ZW1zKHRvQWRkSXRlbXM6IG9iamVjdFtdLCBrZXlGaWVsZDogc3RyaW5nLCBzZWxlY3Rpb25Nb2RlOiBTZWxlY3Rpb25Nb2RlLCBpdGVtczogb2JqZWN0W10pIHtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0b0FkZEl0ZW1zLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBTRFNTZWxlY3RlZEl0ZW1Nb2RlbEhlbHBlci5hZGRJdGVtKHRvQWRkSXRlbXNbaV0sIGtleUZpZWxkLCBzZWxlY3Rpb25Nb2RlLCBpdGVtcyk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiByZW1vdmVzIHRoZSBpdGVtIGZyb20gdGhlIGxpc3RcbiAgICAgKiBrZXlmaWVsZCBpcyB1c2VkIHRvIGRldGVybWluZSB1bmlxdWVuZXNzIG9mIHRoZSBpdGVtIGFkZGVkXG4gICAgICogQHBhcmFtIGl0ZW0gXG4gICAgICogQHBhcmFtIGtleUZpZWxkIFxuICAgICAqIEBwYXJhbSBpdGVtcyBcbiAgICAgKi9cbiAgICBwdWJsaWMgc3RhdGljIHJlbW92ZUl0ZW0oaXRlbTogb2JqZWN0LCBrZXlGaWVsZDogc3RyaW5nLCBpdGVtczogb2JqZWN0W10pIHtcbiAgICAgICAgaWYgKFNEU1NlbGVjdGVkSXRlbU1vZGVsSGVscGVyLmNvbnRhdGluc0l0ZW0oaXRlbVtrZXlGaWVsZF0sIGtleUZpZWxkLCBpdGVtcykpIHtcbiAgICAgICAgICAgIGl0ZW1zLnNwbGljZShpdGVtcy5pbmRleE9mKGl0ZW0pLCAxKVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogY2hlY2tzIHRvIHNlZSBpZiBhIHBhcnRpY3VsYXIgaXRlbSBleGlzdHMgYnkgdGhlIHByb3ZpZWQga2V5XG4gICAgICoga2V5ZmllbGQgaXMgdXNlZCB0byBkZXRlcm1pbmUgdW5pcXVlbmVzcyBvZiB0aGUgaXRlbSBhZGRlZFxuICAgICAqIEBwYXJhbSBrZXkgXG4gICAgICogQHBhcmFtIGtleUZpZWxkIFxuICAgICAqIEBwYXJhbSBpdGVtcyBcbiAgICAgKi9cbiAgICBwdWJsaWMgc3RhdGljIGNvbnRhdGluc0l0ZW0oa2V5OiBzdHJpbmcsIGtleUZpZWxkOiBzdHJpbmcsIGl0ZW1zOiBvYmplY3RbXSk6IGJvb2xlYW4ge1xuICAgICAgICBsZXQgaXRlbSA9IGl0ZW1zLmZpbmQobyA9PiBvW2tleUZpZWxkXSA9PT0ga2V5KTtcbiAgICAgICAgcmV0dXJuIGl0ZW0gIT09IG51bGwgJiYgaXRlbSAhPT0gdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENsZWFycyB0aGUgbGlzdCBvZiBpdGVtc1xuICAgICAqIEBwYXJhbSBpdGVtcyBcbiAgICAgKi9cbiAgICBwdWJsaWMgc3RhdGljIGNsZWFySXRlbXMoaXRlbXM6IG9iamVjdFtdKSB7XG4gICAgICAgIHdoaWxlIChpdGVtcy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBpdGVtcy5wb3AoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIHVwZGF0ZXMgYW4gYXJyYXkgb2YgaXRlbXMgdG8gdGhlIGxpc3QgYW5kIHdpbGwgbm90IGFkZCBkdXBsaWNhdGUgaXRlbXNcbiAgICAgKiBrZXlmaWVsZCBpcyB1c2VkIHRvIGRldGVybWluZSB1bmlxdWVuZXNzIG9mIHRoZSBpdGVtIGFkZGVkXG4gICAgICogQHBhcmFtIHNlbGVjdGVkSXRlbXMgXG4gICAgICogQHBhcmFtIGtleUZpZWxkIFxuICAgICAqIEBwYXJhbSBzZWxlY3Rpb25Nb2RlIFxuICAgICAqIEBwYXJhbSBpdGVtcyBcbiAgICAgKi9cbiAgICBwdWJsaWMgc3RhdGljIHJlcGxhY2VJdGVtcyhzZWxlY3RlZEl0ZW1zOiBvYmplY3RbXSwga2V5RmllbGQ6IHN0cmluZywgc2VsZWN0aW9uTW9kZTogU2VsZWN0aW9uTW9kZSwgaXRlbXM6IG9iamVjdFtdKSB7XG4gICAgICAgIC8vQ2xlYXJzIE9sZCBMaXN0XG4gICAgICAgIFNEU1NlbGVjdGVkSXRlbU1vZGVsSGVscGVyLmNsZWFySXRlbXMoaXRlbXMpO1xuICAgICAgICAvL0FkZHMgbmV3IExpc3RcbiAgICAgICAgU0RTU2VsZWN0ZWRJdGVtTW9kZWxIZWxwZXIuYWRkSXRlbXMoc2VsZWN0ZWRJdGVtcywga2V5RmllbGQsIHNlbGVjdGlvbk1vZGUsIGl0ZW1zKTtcbiAgICB9XG59XG5cbmV4cG9ydCBlbnVtIFNlbGVjdGlvbk1vZGUge1xuICAgIFNJTkdMRSwgTVVMVElQTEVcbn1cbiJdfQ==