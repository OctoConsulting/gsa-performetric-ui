/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, TemplateRef, forwardRef } from '@angular/core';
import { SDSSelectedItemModel } from './models/sds-selectedItem.model';
import { SDSSelectedResultConfiguration } from './models/SDSSelectedResultConfiguration';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { SDSSelectedItemModelHelper } from './models/sds-selected-item-model-helper';
/** @type {?} */
const SDS_SelectedResult_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef((/**
     * @return {?}
     */
    () => SDSSelectedResultComponent)),
    multi: true
};
export class SDSSelectedResultComponent {
    constructor() {
        /**
         * Stored Event for ControlValueAccessor
         */
        this.onTouchedCallback = (/**
         * @return {?}
         */
        () => null);
        /**
         * Stored Event for ControlValueAccessor
         */
        this.propogateChange = (/**
         * @param {?} _
         * @return {?}
         */
        (_) => null);
    }
    /**
     * Removes item from the model
     * @param {?} item
     * @return {?}
     */
    removeItem(item) {
        if (!this.disabled) {
            SDSSelectedItemModelHelper.removeItem(item, this.configuration.primaryKeyField, this.model.items);
            this.propogateChange(this.model);
            this.onTouchedCallback();
        }
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    writeValue(obj) {
        if (obj instanceof SDSSelectedItemModel) {
            this.model = (/** @type {?} */ (obj));
        }
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnChange(fn) {
        this.propogateChange = fn;
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnTouched(fn) {
        this.onTouchedCallback = fn;
    }
    /**
     * @param {?} isDisabled
     * @return {?}
     */
    setDisabledState(isDisabled) {
        this.disabled = isDisabled;
    }
    /**
     * Gets the string value from the specifed properties of an object
     * @param {?} object
     * @param {?} propertyFields comma seperated list with periods depth of object
     * @return {?}
     */
    getObjectValue(object, propertyFields) {
        /** @type {?} */
        let value = '';
        /** @type {?} */
        let current = object;
        /** @type {?} */
        let fieldSplit = propertyFields.split(',');
        for (let i = 0; i < fieldSplit.length; i++) {
            /** @type {?} */
            let fieldValue = fieldSplit[i];
            /** @type {?} */
            let fieldPartSplit = fieldValue.split('.');
            for (let j = 0; j < fieldPartSplit.length; j++) {
                /** @type {?} */
                let fieldCheckValue = fieldPartSplit[j];
                if (current) {
                    current = current[fieldCheckValue];
                }
            }
            if (current) {
                value += current.toString() + ' ';
            }
            current = object;
        }
        return value.trim();
    }
}
SDSSelectedResultComponent.decorators = [
    { type: Component, args: [{
                selector: 'sds-selected-result',
                template: "<ul  *ngIf=\"model\" [attr.aria-label]=\"configuration.labelText +' results'\" class=\"usa-list usa-list--unstyled sds-autocomplete-selected\" aria-relevant=\"additions\" role=\"listbox\" aria-live=\"polite\">\n    <li role=\"option\" *ngFor=\"let result of model.items; let i = index\">\n        <div [attr.class]=\" disabled ? 'sds-tag sds-tag--chip sds-autocomplete-selected__item sds-autocomplete-selected__item--disabled' :'sds-tag sds-tag--chip sds-autocomplete-selected__item'\">\n            <ng-container *ngIf=\"itemTemplate\" [ngTemplateOutlet]=\"itemTemplate\" [ngTemplateOutletContext]=\"{$implicit:result}\">\n            </ng-container>\n            <ng-container *ngIf=\"!itemTemplate\">\n                <span class=\"display-block text-semibold\"> {{ getObjectValue(result, configuration.primaryTextField) }}\n                </span>\n                <ng-container *ngIf=\"configuration.secondaryTextField && result[configuration.secondaryTextField] \">\n                    {{ result[configuration.secondaryTextField] }}\n                </ng-container>\n            </ng-container>\n            <button [attr.aria-label]=\"'Remove Item ' + getObjectValue(result, configuration.primaryTextField)\" [class.text-base]=\"disabled\" aria-hidden=\"false\" class=\"sds-tag__close  position-absolute right-1 top-2px\" (click)=\"removeItem(result)\" (keyup.enter)=\"removeItem(result)\">\n        <fa-icon [icon]=\"['fas', 'times']\" size=\"sm\"></fa-icon>\n      </button>\n        </div>\n    </li>\n</ul>",
                providers: [SDS_SelectedResult_VALUE_ACCESSOR],
                styles: [""]
            }] }
];
SDSSelectedResultComponent.propDecorators = {
    itemTemplate: [{ type: Input }],
    configuration: [{ type: Input }],
    disabled: [{ type: Input }]
};
if (false) {
    /**
     * Allow to insert a customized template for suggestions to use
     * @type {?}
     */
    SDSSelectedResultComponent.prototype.itemTemplate;
    /**
     * The data model that has the selected item
     * @type {?}
     */
    SDSSelectedResultComponent.prototype.model;
    /**
     * Configuration for the Selected Results control
     * @type {?}
     */
    SDSSelectedResultComponent.prototype.configuration;
    /**
     * Stored Event for ControlValueAccessor
     * @type {?}
     */
    SDSSelectedResultComponent.prototype.onTouchedCallback;
    /**
     * Stored Event for ControlValueAccessor
     * @type {?}
     */
    SDSSelectedResultComponent.prototype.propogateChange;
    /** @type {?} */
    SDSSelectedResultComponent.prototype.disabled;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VsZWN0ZWQtcmVzdWx0LmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Bnc2Etc2FtL2NvbXBvbmVudHMvIiwic291cmNlcyI6WyJsaWIvc2VsZWN0ZWQtcmVzdWx0L3NlbGVjdGVkLXJlc3VsdC5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLFdBQVcsRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDMUUsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0saUNBQWlDLENBQUM7QUFDdkUsT0FBTyxFQUFFLDhCQUE4QixFQUFFLE1BQU0seUNBQXlDLENBQUM7QUFDekYsT0FBTyxFQUFFLGlCQUFpQixFQUF3QixNQUFNLGdCQUFnQixDQUFDO0FBQ3pFLE9BQU8sRUFBRSwwQkFBMEIsRUFBRSxNQUFNLHlDQUF5QyxDQUFDOztNQUMvRSxpQ0FBaUMsR0FBUTtJQUM3QyxPQUFPLEVBQUUsaUJBQWlCO0lBQzFCLFdBQVcsRUFBRSxVQUFVOzs7SUFBQyxHQUFHLEVBQUUsQ0FBQywwQkFBMEIsRUFBQztJQUN6RCxLQUFLLEVBQUUsSUFBSTtDQUNaO0FBUUQsTUFBTSxPQUFPLDBCQUEwQjtJQU52Qzs7OztRQTRCUyxzQkFBaUI7OztRQUFlLEdBQUcsRUFBRSxDQUFDLElBQUksRUFBQzs7OztRQUszQyxvQkFBZTs7OztRQUFxQixDQUFDLENBQU0sRUFBRSxFQUFFLENBQUMsSUFBSSxFQUFDO0lBK0Q5RCxDQUFDOzs7Ozs7SUF0REMsVUFBVSxDQUFDLElBQVk7UUFDckIsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUU7WUFDbEIsMEJBQTBCLENBQUMsVUFBVSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsYUFBYSxDQUFDLGVBQWUsRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQ2xHLElBQUksQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQ2pDLElBQUksQ0FBQyxpQkFBaUIsRUFBRSxDQUFDO1NBQzFCO0lBQ0gsQ0FBQzs7Ozs7SUFFRCxVQUFVLENBQUMsR0FBUTtRQUNqQixJQUFJLEdBQUcsWUFBWSxvQkFBb0IsRUFBRTtZQUN2QyxJQUFJLENBQUMsS0FBSyxHQUFHLG1CQUFBLEdBQUcsRUFBd0IsQ0FBQztTQUMxQztJQUNILENBQUM7Ozs7O0lBRUQsZ0JBQWdCLENBQUMsRUFBTztRQUN0QixJQUFJLENBQUMsZUFBZSxHQUFHLEVBQUUsQ0FBQztJQUM1QixDQUFDOzs7OztJQUVELGlCQUFpQixDQUFDLEVBQU87UUFDdkIsSUFBSSxDQUFDLGlCQUFpQixHQUFHLEVBQUUsQ0FBQztJQUM5QixDQUFDOzs7OztJQUVELGdCQUFnQixDQUFDLFVBQW1CO1FBQ2xDLElBQUksQ0FBQyxRQUFRLEdBQUcsVUFBVSxDQUFDO0lBQzdCLENBQUM7Ozs7Ozs7SUFRRCxjQUFjLENBQUMsTUFBYyxFQUFFLGNBQXNCOztZQUMvQyxLQUFLLEdBQUcsRUFBRTs7WUFDVixPQUFPLEdBQUcsTUFBTTs7WUFDaEIsVUFBVSxHQUFHLGNBQWMsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDO1FBQzFDLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxVQUFVLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFOztnQkFDdEMsVUFBVSxHQUFHLFVBQVUsQ0FBQyxDQUFDLENBQUM7O2dCQUMxQixjQUFjLEdBQUcsVUFBVSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUM7WUFDMUMsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLGNBQWMsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7O29CQUMxQyxlQUFlLEdBQUcsY0FBYyxDQUFDLENBQUMsQ0FBQztnQkFDdkMsSUFBSSxPQUFPLEVBQUU7b0JBQ1gsT0FBTyxHQUFHLE9BQU8sQ0FBQyxlQUFlLENBQUMsQ0FBQztpQkFDcEM7YUFDRjtZQUVELElBQUksT0FBTyxFQUFFO2dCQUNYLEtBQUssSUFBSSxPQUFPLENBQUMsUUFBUSxFQUFFLEdBQUcsR0FBRyxDQUFDO2FBQ25DO1lBQ0QsT0FBTyxHQUFHLE1BQU0sQ0FBQztTQUNsQjtRQUNELE9BQU8sS0FBSyxDQUFDLElBQUksRUFBRSxDQUFDO0lBQ3RCLENBQUM7OztZQTlGRixTQUFTLFNBQUM7Z0JBQ1QsUUFBUSxFQUFFLHFCQUFxQjtnQkFDL0IsMC9DQUErQztnQkFFL0MsU0FBUyxFQUFFLENBQUMsaUNBQWlDLENBQUM7O2FBQy9DOzs7MkJBTUUsS0FBSzs0QkFXTCxLQUFLO3VCQWFMLEtBQUs7Ozs7Ozs7SUF4Qk4sa0RBQXdDOzs7OztJQUt4QywyQ0FBbUM7Ozs7O0lBTW5DLG1EQUNxRDs7Ozs7SUFLckQsdURBQWtEOzs7OztJQUtsRCxxREFBNEQ7O0lBRTVELDhDQUN5QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgSW5wdXQsIFRlbXBsYXRlUmVmLCBmb3J3YXJkUmVmIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBTRFNTZWxlY3RlZEl0ZW1Nb2RlbCB9IGZyb20gJy4vbW9kZWxzL3Nkcy1zZWxlY3RlZEl0ZW0ubW9kZWwnO1xuaW1wb3J0IHsgU0RTU2VsZWN0ZWRSZXN1bHRDb25maWd1cmF0aW9uIH0gZnJvbSAnLi9tb2RlbHMvU0RTU2VsZWN0ZWRSZXN1bHRDb25maWd1cmF0aW9uJztcbmltcG9ydCB7IE5HX1ZBTFVFX0FDQ0VTU09SLCBDb250cm9sVmFsdWVBY2Nlc3NvciB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcbmltcG9ydCB7IFNEU1NlbGVjdGVkSXRlbU1vZGVsSGVscGVyIH0gZnJvbSAnLi9tb2RlbHMvc2RzLXNlbGVjdGVkLWl0ZW0tbW9kZWwtaGVscGVyJztcbmNvbnN0IFNEU19TZWxlY3RlZFJlc3VsdF9WQUxVRV9BQ0NFU1NPUjogYW55ID0ge1xuICBwcm92aWRlOiBOR19WQUxVRV9BQ0NFU1NPUixcbiAgdXNlRXhpc3Rpbmc6IGZvcndhcmRSZWYoKCkgPT4gU0RTU2VsZWN0ZWRSZXN1bHRDb21wb25lbnQpLFxuICBtdWx0aTogdHJ1ZVxufTtcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnc2RzLXNlbGVjdGVkLXJlc3VsdCcsXG4gIHRlbXBsYXRlVXJsOiAnLi9zZWxlY3RlZC1yZXN1bHQuY29tcG9uZW50Lmh0bWwnLFxuICBzdHlsZVVybHM6IFsnLi9zZWxlY3RlZC1yZXN1bHQuY29tcG9uZW50LnNjc3MnXSxcbiAgcHJvdmlkZXJzOiBbU0RTX1NlbGVjdGVkUmVzdWx0X1ZBTFVFX0FDQ0VTU09SXVxufSlcbmV4cG9ydCBjbGFzcyBTRFNTZWxlY3RlZFJlc3VsdENvbXBvbmVudCBpbXBsZW1lbnRzIENvbnRyb2xWYWx1ZUFjY2Vzc29yIHtcblxuICAvKipcbiAgKiBBbGxvdyB0byBpbnNlcnQgYSBjdXN0b21pemVkIHRlbXBsYXRlIGZvciBzdWdnZXN0aW9ucyB0byB1c2VcbiAgKi9cbiAgQElucHV0KCkgaXRlbVRlbXBsYXRlOiBUZW1wbGF0ZVJlZjxhbnk+O1xuXG4gIC8qKlxuICAgKiBUaGUgZGF0YSBtb2RlbCB0aGF0IGhhcyB0aGUgc2VsZWN0ZWQgaXRlbVxuICAgKi9cbiAgcHVibGljIG1vZGVsOiBTRFNTZWxlY3RlZEl0ZW1Nb2RlbDtcblxuXG4gIC8qKlxuICAqIENvbmZpZ3VyYXRpb24gZm9yIHRoZSBTZWxlY3RlZCBSZXN1bHRzIGNvbnRyb2wgXG4gICovXG4gIEBJbnB1dCgpXG4gIHB1YmxpYyBjb25maWd1cmF0aW9uOiBTRFNTZWxlY3RlZFJlc3VsdENvbmZpZ3VyYXRpb247XG5cbiAgLyoqXG4gICAqIFN0b3JlZCBFdmVudCBmb3IgQ29udHJvbFZhbHVlQWNjZXNzb3JcbiAgICovXG4gIHB1YmxpYyBvblRvdWNoZWRDYWxsYmFjazogKCkgPT4gdm9pZCA9ICgpID0+IG51bGw7XG5cbiAgLyoqXG4gICAqIFN0b3JlZCBFdmVudCBmb3IgQ29udHJvbFZhbHVlQWNjZXNzb3JcbiAgICovXG4gIHB1YmxpYyBwcm9wb2dhdGVDaGFuZ2U6IChfOiBhbnkpID0+IHZvaWQgPSAoXzogYW55KSA9PiBudWxsO1xuXG4gIEBJbnB1dCgpXG4gIHB1YmxpYyBkaXNhYmxlZDogYm9vbGVhbjtcblxuICAvKipcbiAgICogUmVtb3ZlcyBpdGVtIGZyb20gdGhlIG1vZGVsXG4gICAqIEBwYXJhbSBpdGVtIFxuICAgKi9cbiAgcmVtb3ZlSXRlbShpdGVtOiBvYmplY3QpIHtcbiAgICBpZiAoIXRoaXMuZGlzYWJsZWQpIHtcbiAgICAgIFNEU1NlbGVjdGVkSXRlbU1vZGVsSGVscGVyLnJlbW92ZUl0ZW0oaXRlbSwgdGhpcy5jb25maWd1cmF0aW9uLnByaW1hcnlLZXlGaWVsZCwgdGhpcy5tb2RlbC5pdGVtcyk7XG4gICAgICB0aGlzLnByb3BvZ2F0ZUNoYW5nZSh0aGlzLm1vZGVsKTtcbiAgICAgIHRoaXMub25Ub3VjaGVkQ2FsbGJhY2soKTtcbiAgICB9XG4gIH1cblxuICB3cml0ZVZhbHVlKG9iajogYW55KTogdm9pZCB7XG4gICAgaWYgKG9iaiBpbnN0YW5jZW9mIFNEU1NlbGVjdGVkSXRlbU1vZGVsKSB7XG4gICAgICB0aGlzLm1vZGVsID0gb2JqIGFzIFNEU1NlbGVjdGVkSXRlbU1vZGVsO1xuICAgIH1cbiAgfVxuXG4gIHJlZ2lzdGVyT25DaGFuZ2UoZm46IGFueSk6IHZvaWQge1xuICAgIHRoaXMucHJvcG9nYXRlQ2hhbmdlID0gZm47XG4gIH1cblxuICByZWdpc3Rlck9uVG91Y2hlZChmbjogYW55KTogdm9pZCB7XG4gICAgdGhpcy5vblRvdWNoZWRDYWxsYmFjayA9IGZuO1xuICB9XG5cbiAgc2V0RGlzYWJsZWRTdGF0ZShpc0Rpc2FibGVkOiBib29sZWFuKTogdm9pZCB7XG4gICAgdGhpcy5kaXNhYmxlZCA9IGlzRGlzYWJsZWQ7XG4gIH1cblxuXG4gIC8qKlxuICAgKiBHZXRzIHRoZSBzdHJpbmcgdmFsdWUgZnJvbSB0aGUgc3BlY2lmZWQgcHJvcGVydGllcyBvZiBhbiBvYmplY3RcbiAgICogQHBhcmFtIG9iamVjdCBcbiAgICogQHBhcmFtIHByb3BlcnR5RmllbGRzIGNvbW1hIHNlcGVyYXRlZCBsaXN0IHdpdGggcGVyaW9kcyBkZXB0aCBvZiBvYmplY3RcbiAgICovXG4gIGdldE9iamVjdFZhbHVlKG9iamVjdDogT2JqZWN0LCBwcm9wZXJ0eUZpZWxkczogc3RyaW5nKTogc3RyaW5nIHtcbiAgICBsZXQgdmFsdWUgPSAnJztcbiAgICBsZXQgY3VycmVudCA9IG9iamVjdDtcbiAgICBsZXQgZmllbGRTcGxpdCA9IHByb3BlcnR5RmllbGRzLnNwbGl0KCcsJyk7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBmaWVsZFNwbGl0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICBsZXQgZmllbGRWYWx1ZSA9IGZpZWxkU3BsaXRbaV07XG4gICAgICBsZXQgZmllbGRQYXJ0U3BsaXQgPSBmaWVsZFZhbHVlLnNwbGl0KCcuJyk7XG4gICAgICBmb3IgKGxldCBqID0gMDsgaiA8IGZpZWxkUGFydFNwbGl0Lmxlbmd0aDsgaisrKSB7XG4gICAgICAgIGxldCBmaWVsZENoZWNrVmFsdWUgPSBmaWVsZFBhcnRTcGxpdFtqXTtcbiAgICAgICAgaWYgKGN1cnJlbnQpIHtcbiAgICAgICAgICBjdXJyZW50ID0gY3VycmVudFtmaWVsZENoZWNrVmFsdWVdO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChjdXJyZW50KSB7XG4gICAgICAgIHZhbHVlICs9IGN1cnJlbnQudG9TdHJpbmcoKSArICcgJztcbiAgICAgIH1cbiAgICAgIGN1cnJlbnQgPSBvYmplY3Q7XG4gICAgfVxuICAgIHJldHVybiB2YWx1ZS50cmltKCk7XG4gIH1cblxufVxuIl19