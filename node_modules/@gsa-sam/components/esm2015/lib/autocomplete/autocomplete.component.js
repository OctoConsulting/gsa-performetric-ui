/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, TemplateRef, forwardRef, HostListener, ChangeDetectorRef, ChangeDetectionStrategy } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { SDSSelectedItemModel } from '../selected-result/models/sds-selectedItem.model';
import { SDSAutocompletelConfiguration } from './models/SDSAutocompletelConfiguration.model';
import { SelectionMode } from '../selected-result/models/sds-selected-item-model-helper';
/** @type {?} */
const Autocomplete_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef((/**
     * @return {?}
     */
    () => SDSAutocompleteComponent)),
    multi: true
};
export class SDSAutocompleteComponent {
    /**
     * @param {?} cd
     */
    constructor(cd) {
        this.cd = cd;
        /**
         * Stored Event for ControlValueAccessor
         */
        this.onTouched = (/**
         * @return {?}
         */
        () => { });
        /**
         * Stored Event for ControlValueAccessor
         */
        this.onChange = (/**
         * @param {?} _
         * @return {?}
         */
        (_) => { });
    }
    // ControlValueAccessor (and Formly) is trying to update the value of the FormControl (our custom component) programatically
    // If there is a value we will just overwrite items
    // If there is no value we reset the items array to be empty
    /**
     * @param {?} value
     * @return {?}
     */
    writeValue(value) {
        if (value instanceof SDSSelectedItemModel && value.items && value.items.length && this.model.items !== value.items) {
            this.model.items = [...value.items];
            this.cd.markForCheck();
        }
        else if (value && value.length && this.model.items !== value) {
            this.model.items = value;
            this.cd.markForCheck();
        }
        else {
            if (!this.model || !(this.model instanceof SDSSelectedItemModel)) {
                this.model = new SDSSelectedItemModel();
            }
            this.model.items = value && value.items ? value.items : [];
            this.cd.markForCheck();
        }
    }
    // Method that is fired when the child component event notifies us that the items array has been modified within the child component
    /**
     * @param {?} $event
     * @return {?}
     */
    updateItems($event) {
        this.updateModel();
    }
    // Helper method that gets a new instance of the model and notifies ControlValueAccessor that we have a new model for this FormControl (our custom component)
    /**
     * @return {?}
     */
    updateModel() {
        /** @type {?} */
        const model = this.getModel();
        this.onChange(model);
    }
    // Helper method to return a new instance of an array that contains our items
    /**
     * @return {?}
     */
    getModel() {
        return [...this.model.items];
    }
    // ControlValueAccessor hook that lets us call this._onChange(var) to let the form know our variable has changed (in this case model)
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnChange(fn) {
        this.onChange = fn;
    }
    // ControlValueAccessor hook (not used)
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnTouched(fn) {
        this.onTouched = fn;
    }
    /**
     * @param {?} isDisabled
     * @return {?}
     */
    setDisabledState(isDisabled) {
        this.disabled = isDisabled;
    }
    /**
     * @return {?}
     */
    isSingleMode() {
        if (this.configuration) {
            return this.configuration.selectionMode === SelectionMode.SINGLE;
        }
        else {
            return false;
        }
    }
}
SDSAutocompleteComponent.decorators = [
    { type: Component, args: [{
                selector: 'sds-autocomplete',
                template: "<sds-search-autocomplete [disabled]=\"disabled\" (ngModelChange)=\"updateItems($event)\" #autocomplete\n    [service]=\"service\" [(ngModel)]=\"model\" [configuration]=\"configuration\" [itemTemplate]=\"suggestionTemplate\">\n</sds-search-autocomplete>\n<sds-selected-result (ngModelChange)=\"updateItems($event)\" [disabled]=\"disabled\" *ngIf=\"!isSingleMode()\"\n    [(ngModel)]=\"model\" [configuration]=\"configuration\" [itemTemplate]=\"selectedItemTemplate\"></sds-selected-result>\n",
                providers: [Autocomplete_VALUE_ACCESSOR],
                changeDetection: ChangeDetectionStrategy.OnPush,
                styles: [""]
            }] }
];
/** @nocollapse */
SDSAutocompleteComponent.ctorParameters = () => [
    { type: ChangeDetectorRef }
];
SDSAutocompleteComponent.propDecorators = {
    suggestionTemplate: [{ type: Input }],
    selectedItemTemplate: [{ type: Input }],
    configuration: [{ type: Input }],
    service: [{ type: Input }],
    onTouched: [{ type: HostListener, args: ['focusout',] }]
};
if (false) {
    /**
     * Allow to insert a customized template for suggestions results
     * @type {?}
     */
    SDSAutocompleteComponent.prototype.suggestionTemplate;
    /**
     * Allow to insert a customized template for selected items
     * @type {?}
     */
    SDSAutocompleteComponent.prototype.selectedItemTemplate;
    /**
     * The data model that has the selected item
     * @type {?}
     */
    SDSAutocompleteComponent.prototype.model;
    /** @type {?} */
    SDSAutocompleteComponent.prototype.disabled;
    /**
     * Configuration for the control
     * @type {?}
     */
    SDSAutocompleteComponent.prototype.configuration;
    /**
     * Instance of the SamHiercarchicalServiceInterface provided
     * @type {?}
     */
    SDSAutocompleteComponent.prototype.service;
    /**
     * Stored Event for ControlValueAccessor
     * @type {?}
     */
    SDSAutocompleteComponent.prototype.onTouched;
    /**
     * Stored Event for ControlValueAccessor
     * @type {?}
     */
    SDSAutocompleteComponent.prototype.onChange;
    /**
     * @type {?}
     * @private
     */
    SDSAutocompleteComponent.prototype.cd;
}
//# sourceMappingURL=data:application/json;base64,