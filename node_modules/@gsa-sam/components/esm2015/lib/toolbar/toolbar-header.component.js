/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Host } from "@angular/core";
import { SdsToolbarComponent } from "./toolbar.component";
export class SdsToolbarHeaderComponent {
    /**
     * @param {?} toolbar
     */
    constructor(toolbar) {
        this.toolbar = toolbar;
    }
    /**
     * Toggles the expanded state of the toolbar.
     * @return {?}
     */
    _toggle() {
        this.toolbar.toggle();
    }
    /**
     * Gets whether the toolbar is expanded.
     * @return {?}
     */
    get _isExpanded() {
        return this.toolbar.expanded;
    }
    /**
     * Whether the toolbar is disabled.
     * @return {?}
     */
    get _disabled() {
        return this.toolbar.disabled;
    }
}
SdsToolbarHeaderComponent.decorators = [
    { type: Component, args: [{
                selector: "sds-toolbar-header",
                template: "<button\n  class=\"sds-toolbar__toogle-btn\"\n  [attr.id]=\"toolbar._headerId\"\n  [attr.tabindex]=\"_disabled ? -1 : 0\"\n  [attr.aria-controls]=\"toolbar._contentId\"\n  [attr.aria-expanded]=\"_isExpanded\"\n  [attr.aria-disabled]=\"_disabled\"\n  (click)=\"_toggle()\"\n>\n  <div class=\"sds-toolbar__toggle\">\n    <span class=\"usa-sr-only\">Open/Close Toolbar</span>\n  </div>\n</button>\n",
                host: {
                    class: "sds-toolbar__header"
                }
            }] }
];
/** @nocollapse */
SdsToolbarHeaderComponent.ctorParameters = () => [
    { type: SdsToolbarComponent, decorators: [{ type: Host }] }
];
if (false) {
    /** @type {?} */
    SdsToolbarHeaderComponent.prototype.toolbar;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG9vbGJhci1oZWFkZXIuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGdzYS1zYW0vY29tcG9uZW50cy8iLCJzb3VyY2VzIjpbImxpYi90b29sYmFyL3Rvb2xiYXItaGVhZGVyLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxJQUFJLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDaEQsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFTMUQsTUFBTSxPQUFPLHlCQUF5Qjs7OztJQUNwQyxZQUEyQixPQUE0QjtRQUE1QixZQUFPLEdBQVAsT0FBTyxDQUFxQjtJQUFHLENBQUM7Ozs7O0lBRzNELE9BQU87UUFDTCxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sRUFBRSxDQUFDO0lBQ3hCLENBQUM7Ozs7O0lBR0QsSUFBSSxXQUFXO1FBQ2IsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQztJQUMvQixDQUFDOzs7OztJQUdELElBQUksU0FBUztRQUNYLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUM7SUFDL0IsQ0FBQzs7O1lBdkJGLFNBQVMsU0FBQztnQkFDVCxRQUFRLEVBQUUsb0JBQW9CO2dCQUM5Qix1WkFBNEM7Z0JBQzVDLElBQUksRUFBRTtvQkFDSixLQUFLLEVBQUUscUJBQXFCO2lCQUM3QjthQUNGOzs7O1lBUlEsbUJBQW1CLHVCQVViLElBQUk7Ozs7SUFBTCw0Q0FBMkMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIEhvc3QgfSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xuaW1wb3J0IHsgU2RzVG9vbGJhckNvbXBvbmVudCB9IGZyb20gXCIuL3Rvb2xiYXIuY29tcG9uZW50XCI7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogXCJzZHMtdG9vbGJhci1oZWFkZXJcIixcbiAgdGVtcGxhdGVVcmw6IFwidG9vbGJhci1oZWFkZXIuY29tcG9uZW50Lmh0bWxcIixcbiAgaG9zdDoge1xuICAgIGNsYXNzOiBcInNkcy10b29sYmFyX19oZWFkZXJcIlxuICB9XG59KVxuZXhwb3J0IGNsYXNzIFNkc1Rvb2xiYXJIZWFkZXJDb21wb25lbnQge1xuICBjb25zdHJ1Y3RvcihASG9zdCgpIHB1YmxpYyB0b29sYmFyOiBTZHNUb29sYmFyQ29tcG9uZW50KSB7fVxuXG4gIC8qKiBUb2dnbGVzIHRoZSBleHBhbmRlZCBzdGF0ZSBvZiB0aGUgdG9vbGJhci4gKi9cbiAgX3RvZ2dsZSgpIHtcbiAgICB0aGlzLnRvb2xiYXIudG9nZ2xlKCk7XG4gIH1cblxuICAvKiogR2V0cyB3aGV0aGVyIHRoZSB0b29sYmFyIGlzIGV4cGFuZGVkLiAqL1xuICBnZXQgX2lzRXhwYW5kZWQoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMudG9vbGJhci5leHBhbmRlZDtcbiAgfVxuXG4gIC8qKiBXaGV0aGVyIHRoZSB0b29sYmFyIGlzIGRpc2FibGVkLiAqL1xuICBnZXQgX2Rpc2FibGVkKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLnRvb2xiYXIuZGlzYWJsZWQ7XG4gIH1cbn1cbiJdfQ==