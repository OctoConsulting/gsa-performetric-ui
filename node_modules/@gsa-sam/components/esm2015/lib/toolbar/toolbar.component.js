/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, EventEmitter, Input, Output } from "@angular/core";
import { coerceBooleanProperty } from "@angular/cdk/coercion";
import { sdsToolbarAnimations } from "./toolbar-animations";
/**
 * Counter for generating unique element ids.
 * @type {?}
 */
let uniqueId = 0;
export class SdsToolbarComponent {
    constructor() {
        /**
         * The unique Toolbar id.
         */
        this.id = uniqueId++;
        /**
         * ID for the header element. Used for a11y labelling.
         */
        this._headerId = `sds-toolbar-header-${this.id}`;
        /**
         * ID for the content element. Used for a11y labelling.
         */
        this._contentId = `sds-toolbar-content-${this.id}`;
        /**
         * Emits whenever the expanded state of the toolbar changes.
         */
        this.expandedChange = new EventEmitter();
        this._expanded = false;
        this._disabled = false;
        /**
         * Width of the toolbar when is expanded.
         */
        this.expandedWidth = "300px";
        // Elements that surround the toolbar need to make space for the expanded toolbar.
        // Adding 20 more pixes to provide padding
        this.expandedSpace = "20px";
    }
    /**
     * Whether the toolbar is expanded.
     * @return {?}
     */
    get expanded() {
        return this._expanded;
    }
    /**
     * @param {?} expanded
     * @return {?}
     */
    set expanded(expanded) {
        expanded = coerceBooleanProperty(expanded);
        // Only emit events and update the internal value if the value changes.
        if (this._expanded !== expanded) {
            this._expanded = expanded;
            this.expandedChange.emit(expanded);
        }
    }
    /**
     * Whether the toolbar is disabled.
     * @return {?}
     */
    get disabled() {
        return this._disabled;
    }
    /**
     * @param {?} disabled
     * @return {?}
     */
    set disabled(disabled) {
        this._disabled = coerceBooleanProperty(disabled);
    }
    /**
     * Toggles the expanded state of the toolbar.
     * @return {?}
     */
    toggle() {
        this.expanded = !this.expanded;
    }
    /**
     * Gets the expanded state string.
     * @return {?}
     */
    _getExpandedState() {
        return this.expanded ? "expanded" : "collapsed";
    }
}
SdsToolbarComponent.decorators = [
    { type: Component, args: [{
                selector: "sds-toolbar",
                exportAs: "sdsToolbar",
                template: "<sds-toolbar-header></sds-toolbar-header>\n<div\n  class=\"sds-toolbar__content\"\n  role=\"region\"\n  [@bodyExpansion]=\"{\n    value: _getExpandedState(),\n    params: { expandedWidth: expandedWidth }\n  }\"\n  [attr.aria-labelledby]=\"_headerId\"\n  [id]=\"_contentId\"\n>\n  <ng-content></ng-content>\n</div>\n",
                animations: [sdsToolbarAnimations.bodyExpansion],
                host: {
                    class: "sds-toolbar",
                    "[class.sds-toolbar--expanded]": "expanded"
                }
            }] }
];
/** @nocollapse */
SdsToolbarComponent.ctorParameters = () => [];
SdsToolbarComponent.propDecorators = {
    expandedChange: [{ type: Output }],
    expanded: [{ type: Input }],
    disabled: [{ type: Input }],
    expandedWidth: [{ type: Input }],
    expandedSpace: [{ type: Input }]
};
if (false) {
    /**
     * The unique Toolbar id.
     * @type {?}
     */
    SdsToolbarComponent.prototype.id;
    /**
     * ID for the header element. Used for a11y labelling.
     * @type {?}
     */
    SdsToolbarComponent.prototype._headerId;
    /**
     * ID for the content element. Used for a11y labelling.
     * @type {?}
     */
    SdsToolbarComponent.prototype._contentId;
    /**
     * Emits whenever the expanded state of the toolbar changes.
     * @type {?}
     */
    SdsToolbarComponent.prototype.expandedChange;
    /**
     * @type {?}
     * @private
     */
    SdsToolbarComponent.prototype._expanded;
    /**
     * @type {?}
     * @private
     */
    SdsToolbarComponent.prototype._disabled;
    /**
     * Width of the toolbar when is expanded.
     * @type {?}
     */
    SdsToolbarComponent.prototype.expandedWidth;
    /** @type {?} */
    SdsToolbarComponent.prototype.expandedSpace;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG9vbGJhci5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZ3NhLXNhbS9jb21wb25lbnRzLyIsInNvdXJjZXMiOlsibGliL3Rvb2xiYXIvdG9vbGJhci5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsWUFBWSxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDdkUsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFDOUQsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sc0JBQXNCLENBQUM7Ozs7O0lBTXhELFFBQVEsR0FBRyxDQUFDO0FBWWhCLE1BQU0sT0FBTyxtQkFBbUI7SUFVOUI7Ozs7UUFSUyxPQUFFLEdBQUcsUUFBUSxFQUFFLENBQUM7Ozs7UUFHaEIsY0FBUyxHQUFXLHNCQUFzQixJQUFJLENBQUMsRUFBRSxFQUFFLENBQUM7Ozs7UUFHcEQsZUFBVSxHQUFXLHVCQUF1QixJQUFJLENBQUMsRUFBRSxFQUFFLENBQUM7Ozs7UUFLckQsbUJBQWMsR0FBMEIsSUFBSSxZQUFZLEVBQVcsQ0FBQztRQWdCdEUsY0FBUyxHQUFHLEtBQUssQ0FBQztRQVVsQixjQUFTLEdBQVksS0FBSyxDQUFDOzs7O1FBRzFCLGtCQUFhLEdBQVcsT0FBTyxDQUFDOzs7UUFJaEMsa0JBQWEsR0FBVyxNQUFNLENBQUM7SUFwQ3pCLENBQUM7Ozs7O0lBTWhCLElBQ0ksUUFBUTtRQUNWLE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQztJQUN4QixDQUFDOzs7OztJQUNELElBQUksUUFBUSxDQUFDLFFBQWE7UUFDeEIsUUFBUSxHQUFHLHFCQUFxQixDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBRTNDLHVFQUF1RTtRQUN2RSxJQUFJLElBQUksQ0FBQyxTQUFTLEtBQUssUUFBUSxFQUFFO1lBQy9CLElBQUksQ0FBQyxTQUFTLEdBQUcsUUFBUSxDQUFDO1lBQzFCLElBQUksQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1NBQ3BDO0lBQ0gsQ0FBQzs7Ozs7SUFJRCxJQUNJLFFBQVE7UUFDVixPQUFPLElBQUksQ0FBQyxTQUFTLENBQUM7SUFDeEIsQ0FBQzs7Ozs7SUFDRCxJQUFJLFFBQVEsQ0FBQyxRQUFhO1FBQ3hCLElBQUksQ0FBQyxTQUFTLEdBQUcscUJBQXFCLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDbkQsQ0FBQzs7Ozs7SUFXRCxNQUFNO1FBQ0osSUFBSSxDQUFDLFFBQVEsR0FBRyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUM7SUFDakMsQ0FBQzs7Ozs7SUFHRCxpQkFBaUI7UUFDZixPQUFPLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsV0FBVyxDQUFDO0lBQ2xELENBQUM7OztZQWxFRixTQUFTLFNBQUM7Z0JBQ1QsUUFBUSxFQUFFLGFBQWE7Z0JBQ3ZCLFFBQVEsRUFBRSxZQUFZO2dCQUN0Qix1VUFBcUM7Z0JBQ3JDLFVBQVUsRUFBRSxDQUFDLG9CQUFvQixDQUFDLGFBQWEsQ0FBQztnQkFDaEQsSUFBSSxFQUFFO29CQUNKLEtBQUssRUFBRSxhQUFhO29CQUNwQiwrQkFBK0IsRUFBRSxVQUFVO2lCQUM1QzthQUNGOzs7Ozs2QkFjRSxNQUFNO3VCQUdOLEtBQUs7dUJBZ0JMLEtBQUs7NEJBVUwsS0FBSzs0QkFJTCxLQUFLOzs7Ozs7O0lBNUNOLGlDQUF5Qjs7Ozs7SUFHekIsd0NBQTZEOzs7OztJQUc3RCx5Q0FBK0Q7Ozs7O0lBSy9ELDZDQUE4RTs7Ozs7SUFnQjlFLHdDQUEwQjs7Ozs7SUFVMUIsd0NBQW1DOzs7OztJQUduQyw0Q0FBeUM7O0lBSXpDLDRDQUF3QyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgRXZlbnRFbWl0dGVyLCBJbnB1dCwgT3V0cHV0IH0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcbmltcG9ydCB7IGNvZXJjZUJvb2xlYW5Qcm9wZXJ0eSB9IGZyb20gXCJAYW5ndWxhci9jZGsvY29lcmNpb25cIjtcbmltcG9ydCB7IHNkc1Rvb2xiYXJBbmltYXRpb25zIH0gZnJvbSBcIi4vdG9vbGJhci1hbmltYXRpb25zXCI7XG5cbi8qKiBUb29sYmFyJ3Mgc3RhdGVzLiAqL1xuZXhwb3J0IHR5cGUgU2RzVG9vbGJhclN0YXRlID0gXCJleHBhbmRlZFwiIHwgXCJjb2xsYXBzZWRcIjtcblxuLyoqIENvdW50ZXIgZm9yIGdlbmVyYXRpbmcgdW5pcXVlIGVsZW1lbnQgaWRzLiAqL1xubGV0IHVuaXF1ZUlkID0gMDtcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiBcInNkcy10b29sYmFyXCIsXG4gIGV4cG9ydEFzOiBcInNkc1Rvb2xiYXJcIixcbiAgdGVtcGxhdGVVcmw6IFwidG9vbGJhci5jb21wb25lbnQuaHRtbFwiLFxuICBhbmltYXRpb25zOiBbc2RzVG9vbGJhckFuaW1hdGlvbnMuYm9keUV4cGFuc2lvbl0sXG4gIGhvc3Q6IHtcbiAgICBjbGFzczogXCJzZHMtdG9vbGJhclwiLFxuICAgIFwiW2NsYXNzLnNkcy10b29sYmFyLS1leHBhbmRlZF1cIjogXCJleHBhbmRlZFwiXG4gIH1cbn0pXG5leHBvcnQgY2xhc3MgU2RzVG9vbGJhckNvbXBvbmVudCB7XG4gIC8qKiBUaGUgdW5pcXVlIFRvb2xiYXIgaWQuICovXG4gIHJlYWRvbmx5IGlkID0gdW5pcXVlSWQrKztcblxuICAvKiogSUQgZm9yIHRoZSBoZWFkZXIgZWxlbWVudC4gVXNlZCBmb3IgYTExeSBsYWJlbGxpbmcuICovXG4gIHJlYWRvbmx5IF9oZWFkZXJJZDogc3RyaW5nID0gYHNkcy10b29sYmFyLWhlYWRlci0ke3RoaXMuaWR9YDtcblxuICAvKiogSUQgZm9yIHRoZSBjb250ZW50IGVsZW1lbnQuIFVzZWQgZm9yIGExMXkgbGFiZWxsaW5nLiAqL1xuICByZWFkb25seSBfY29udGVudElkOiBzdHJpbmcgPSBgc2RzLXRvb2xiYXItY29udGVudC0ke3RoaXMuaWR9YDtcblxuICBjb25zdHJ1Y3RvcigpIHt9XG5cbiAgLyoqIEVtaXRzIHdoZW5ldmVyIHRoZSBleHBhbmRlZCBzdGF0ZSBvZiB0aGUgdG9vbGJhciBjaGFuZ2VzLiAqL1xuICBAT3V0cHV0KCkgZXhwYW5kZWRDaGFuZ2U6IEV2ZW50RW1pdHRlcjxib29sZWFuPiA9IG5ldyBFdmVudEVtaXR0ZXI8Ym9vbGVhbj4oKTtcblxuICAvKiogV2hldGhlciB0aGUgdG9vbGJhciBpcyBleHBhbmRlZC4gKi9cbiAgQElucHV0KClcbiAgZ2V0IGV4cGFuZGVkKCk6IGFueSB7XG4gICAgcmV0dXJuIHRoaXMuX2V4cGFuZGVkO1xuICB9XG4gIHNldCBleHBhbmRlZChleHBhbmRlZDogYW55KSB7XG4gICAgZXhwYW5kZWQgPSBjb2VyY2VCb29sZWFuUHJvcGVydHkoZXhwYW5kZWQpO1xuXG4gICAgLy8gT25seSBlbWl0IGV2ZW50cyBhbmQgdXBkYXRlIHRoZSBpbnRlcm5hbCB2YWx1ZSBpZiB0aGUgdmFsdWUgY2hhbmdlcy5cbiAgICBpZiAodGhpcy5fZXhwYW5kZWQgIT09IGV4cGFuZGVkKSB7XG4gICAgICB0aGlzLl9leHBhbmRlZCA9IGV4cGFuZGVkO1xuICAgICAgdGhpcy5leHBhbmRlZENoYW5nZS5lbWl0KGV4cGFuZGVkKTtcbiAgICB9XG4gIH1cbiAgcHJpdmF0ZSBfZXhwYW5kZWQgPSBmYWxzZTtcblxuICAvKiogV2hldGhlciB0aGUgdG9vbGJhciBpcyBkaXNhYmxlZC4gKi9cbiAgQElucHV0KClcbiAgZ2V0IGRpc2FibGVkKCkge1xuICAgIHJldHVybiB0aGlzLl9kaXNhYmxlZDtcbiAgfVxuICBzZXQgZGlzYWJsZWQoZGlzYWJsZWQ6IGFueSkge1xuICAgIHRoaXMuX2Rpc2FibGVkID0gY29lcmNlQm9vbGVhblByb3BlcnR5KGRpc2FibGVkKTtcbiAgfVxuICBwcml2YXRlIF9kaXNhYmxlZDogYm9vbGVhbiA9IGZhbHNlO1xuXG4gIC8qKiBXaWR0aCBvZiB0aGUgdG9vbGJhciB3aGVuIGlzIGV4cGFuZGVkLiAqL1xuICBASW5wdXQoKSBleHBhbmRlZFdpZHRoOiBzdHJpbmcgPSBcIjMwMHB4XCI7XG5cbiAgLy8gRWxlbWVudHMgdGhhdCBzdXJyb3VuZCB0aGUgdG9vbGJhciBuZWVkIHRvIG1ha2Ugc3BhY2UgZm9yIHRoZSBleHBhbmRlZCB0b29sYmFyLlxuICAvLyBBZGRpbmcgMjAgbW9yZSBwaXhlcyB0byBwcm92aWRlIHBhZGRpbmdcbiAgQElucHV0KCkgZXhwYW5kZWRTcGFjZTogc3RyaW5nID0gXCIyMHB4XCI7XG5cbiAgLyoqIFRvZ2dsZXMgdGhlIGV4cGFuZGVkIHN0YXRlIG9mIHRoZSB0b29sYmFyLiAqL1xuICB0b2dnbGUoKSB7XG4gICAgdGhpcy5leHBhbmRlZCA9ICF0aGlzLmV4cGFuZGVkO1xuICB9XG5cbiAgLyoqIEdldHMgdGhlIGV4cGFuZGVkIHN0YXRlIHN0cmluZy4gKi9cbiAgX2dldEV4cGFuZGVkU3RhdGUoKTogU2RzVG9vbGJhclN0YXRlIHtcbiAgICByZXR1cm4gdGhpcy5leHBhbmRlZCA/IFwiZXhwYW5kZWRcIiA6IFwiY29sbGFwc2VkXCI7XG4gIH1cbn1cbiJdfQ==