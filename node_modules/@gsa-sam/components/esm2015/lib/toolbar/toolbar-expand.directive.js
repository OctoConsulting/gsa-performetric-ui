/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, ElementRef, Input, Renderer2 } from "@angular/core";
import { SdsToolbarComponent } from "./toolbar.component";
export class SdsToolbarExpandDirective {
    /**
     * @param {?} renderer
     * @param {?} _element
     */
    constructor(renderer, _element) {
        this.renderer = renderer;
        this._element = _element;
    }
    /**
     * References the toolbar instance that the element its associated with.
     * @return {?}
     */
    get toolbar() {
        return this._toolbar;
    }
    /**
     * @param {?} toolbar
     * @return {?}
     */
    set toolbar(toolbar) {
        if (toolbar === this._toolbar) {
            return;
        }
        this._toolbar = toolbar;
        /** Sets toolbar expanded width */
        this._expandedWidth = this._toolbar.expandedSpace;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.setStyle(this.toolbar.expanded);
        this.toolbar.expandedChange.subscribe((/**
         * @param {?} value
         * @return {?}
         */
        value => {
            this.setStyle(value);
        }));
    }
    /**
     * @private
     * @param {?} value
     * @return {?}
     */
    setStyle(value) {
        if (value) {
            this.renderer.setStyle(this._element.nativeElement, "margin-left", `${this._expandedWidth}`);
        }
        else {
            this.renderer.removeStyle(this._element.nativeElement, "margin-left");
        }
    }
}
SdsToolbarExpandDirective.decorators = [
    { type: Directive, args: [{
                selector: "[sdsToolbarExpand]"
            },] }
];
/** @nocollapse */
SdsToolbarExpandDirective.ctorParameters = () => [
    { type: Renderer2 },
    { type: ElementRef }
];
SdsToolbarExpandDirective.propDecorators = {
    toolbar: [{ type: Input, args: ["sdsToolbarExpand",] }]
};
if (false) {
    /**
     * Width of the toolbar while expanded.
     * @type {?}
     */
    SdsToolbarExpandDirective.prototype._expandedWidth;
    /**
     * @type {?}
     * @private
     */
    SdsToolbarExpandDirective.prototype._toolbar;
    /**
     * @type {?}
     * @private
     */
    SdsToolbarExpandDirective.prototype.renderer;
    /**
     * @type {?}
     * @private
     */
    SdsToolbarExpandDirective.prototype._element;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG9vbGJhci1leHBhbmQuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGdzYS1zYW0vY29tcG9uZW50cy8iLCJzb3VyY2VzIjpbImxpYi90b29sYmFyL3Rvb2xiYXItZXhwYW5kLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQUUsS0FBSyxFQUFFLFNBQVMsRUFBVSxNQUFNLGVBQWUsQ0FBQztBQUNoRixPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUsxRCxNQUFNLE9BQU8seUJBQXlCOzs7OztJQW9CcEMsWUFBb0IsUUFBbUIsRUFBVSxRQUFvQjtRQUFqRCxhQUFRLEdBQVIsUUFBUSxDQUFXO1FBQVUsYUFBUSxHQUFSLFFBQVEsQ0FBWTtJQUFJLENBQUM7Ozs7O0lBZjFFLElBQ0ksT0FBTztRQUNULE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQztJQUN2QixDQUFDOzs7OztJQUNELElBQUksT0FBTyxDQUFDLE9BQTRCO1FBQ3RDLElBQUksT0FBTyxLQUFLLElBQUksQ0FBQyxRQUFRLEVBQUU7WUFDN0IsT0FBTztTQUNSO1FBQ0QsSUFBSSxDQUFDLFFBQVEsR0FBRyxPQUFPLENBQUM7UUFDeEIsa0NBQWtDO1FBRWxDLElBQUksQ0FBQyxjQUFjLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxhQUFhLENBQUM7SUFDcEQsQ0FBQzs7OztJQUlELFFBQVE7UUFDTixJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDckMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxjQUFjLENBQUMsU0FBUzs7OztRQUFDLEtBQUssQ0FBQyxFQUFFO1lBQzVDLElBQUksQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDdkIsQ0FBQyxFQUFDLENBQUM7SUFDTCxDQUFDOzs7Ozs7SUFFTyxRQUFRLENBQUMsS0FBVTtRQUN6QixJQUFJLEtBQUssRUFBRTtZQUNULElBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsYUFBYSxFQUFFLGFBQWEsRUFBRSxHQUFHLElBQUksQ0FBQyxjQUFjLEVBQUUsQ0FBQyxDQUFDO1NBQzlGO2FBQ0k7WUFDSCxJQUFJLENBQUMsUUFBUSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLGFBQWEsRUFBRSxhQUFhLENBQUMsQ0FBQztTQUN2RTtJQUNILENBQUM7OztZQXRDRixTQUFTLFNBQUM7Z0JBQ1QsUUFBUSxFQUFFLG9CQUFvQjthQUMvQjs7OztZQUxzQyxTQUFTO1lBQTVCLFVBQVU7OztzQkFXM0IsS0FBSyxTQUFDLGtCQUFrQjs7Ozs7OztJQUh6QixtREFBdUI7Ozs7O0lBZ0J2Qiw2Q0FBc0M7Ozs7O0lBRTFCLDZDQUEyQjs7Ozs7SUFBRSw2Q0FBNEIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEaXJlY3RpdmUsIEVsZW1lbnRSZWYsIElucHV0LCBSZW5kZXJlcjIsIE9uSW5pdCB9IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XG5pbXBvcnQgeyBTZHNUb29sYmFyQ29tcG9uZW50IH0gZnJvbSBcIi4vdG9vbGJhci5jb21wb25lbnRcIjtcblxuQERpcmVjdGl2ZSh7XG4gIHNlbGVjdG9yOiBcIltzZHNUb29sYmFyRXhwYW5kXVwiXG59KVxuZXhwb3J0IGNsYXNzIFNkc1Rvb2xiYXJFeHBhbmREaXJlY3RpdmUgaW1wbGVtZW50cyBPbkluaXQge1xuICAvKiogV2lkdGggb2YgdGhlIHRvb2xiYXIgd2hpbGUgZXhwYW5kZWQuICovXG4gIF9leHBhbmRlZFdpZHRoOiBzdHJpbmc7XG5cbiAgLyoqIFJlZmVyZW5jZXMgdGhlIHRvb2xiYXIgaW5zdGFuY2UgdGhhdCB0aGUgZWxlbWVudCBpdHMgYXNzb2NpYXRlZCB3aXRoLiAqL1xuICBASW5wdXQoXCJzZHNUb29sYmFyRXhwYW5kXCIpXG4gIGdldCB0b29sYmFyKCkge1xuICAgIHJldHVybiB0aGlzLl90b29sYmFyO1xuICB9XG4gIHNldCB0b29sYmFyKHRvb2xiYXI6IFNkc1Rvb2xiYXJDb21wb25lbnQpIHtcbiAgICBpZiAodG9vbGJhciA9PT0gdGhpcy5fdG9vbGJhcikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0aGlzLl90b29sYmFyID0gdG9vbGJhcjtcbiAgICAvKiogU2V0cyB0b29sYmFyIGV4cGFuZGVkIHdpZHRoICovXG5cbiAgICB0aGlzLl9leHBhbmRlZFdpZHRoID0gdGhpcy5fdG9vbGJhci5leHBhbmRlZFNwYWNlO1xuICB9XG4gIHByaXZhdGUgX3Rvb2xiYXI6IFNkc1Rvb2xiYXJDb21wb25lbnQ7XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSByZW5kZXJlcjogUmVuZGVyZXIyLCBwcml2YXRlIF9lbGVtZW50OiBFbGVtZW50UmVmKSB7IH1cbiAgbmdPbkluaXQoKSB7XG4gICAgdGhpcy5zZXRTdHlsZSh0aGlzLnRvb2xiYXIuZXhwYW5kZWQpO1xuICAgIHRoaXMudG9vbGJhci5leHBhbmRlZENoYW5nZS5zdWJzY3JpYmUodmFsdWUgPT4ge1xuICAgICAgdGhpcy5zZXRTdHlsZSh2YWx1ZSk7XG4gICAgfSk7XG4gIH1cblxuICBwcml2YXRlIHNldFN0eWxlKHZhbHVlOiBhbnkpIHtcbiAgICBpZiAodmFsdWUpIHtcbiAgICAgIHRoaXMucmVuZGVyZXIuc2V0U3R5bGUodGhpcy5fZWxlbWVudC5uYXRpdmVFbGVtZW50LCBcIm1hcmdpbi1sZWZ0XCIsIGAke3RoaXMuX2V4cGFuZGVkV2lkdGh9YCk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgdGhpcy5yZW5kZXJlci5yZW1vdmVTdHlsZSh0aGlzLl9lbGVtZW50Lm5hdGl2ZUVsZW1lbnQsIFwibWFyZ2luLWxlZnRcIik7XG4gICAgfVxuICB9XG59XG4iXX0=