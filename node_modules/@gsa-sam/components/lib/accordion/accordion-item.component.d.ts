import { AnimationEvent } from '@angular/animations';
import { CdkAccordionItem } from "@angular/cdk/accordion";
import { UniqueSelectionDispatcher } from '@angular/cdk/collections';
import { TemplatePortal } from '@angular/cdk/portal';
import { AfterContentInit, ChangeDetectorRef, EventEmitter, ElementRef, OnChanges, OnDestroy, SimpleChanges, ViewContainerRef } from "@angular/core";
import { Subject } from 'rxjs';
import { SdsAccordionItemContentDirective } from './accordion-item-content.directive';
import { SdsAccordionBase } from './accordion-base';
/** Accordion Item's states. */
export declare type SdsAccordionItemState = 'expanded' | 'collapsed';
export declare class SdsAccordionItemComponent extends CdkAccordionItem implements AfterContentInit, OnChanges, OnDestroy {
    private _viewContainerRef;
    _animationMode: string;
    private _document;
    /** An event emitted after the body's expansion animation happens. */
    afterExpand: EventEmitter<void>;
    /** An event emitted after the body's collapse animation happens. */
    afterCollapse: EventEmitter<void>;
    /** Stream that emits for changes in `@Input` properties. */
    readonly _inputChanges: Subject<SimpleChanges>;
    /** Optionally defined accordion the accordion item belongs to. */
    accordion: SdsAccordionBase;
    /** Content that will be rendered lazily. */
    _lazyContent: SdsAccordionItemContentDirective;
    /** Element containing the accordion item's user-provided content. */
    _body: ElementRef<HTMLElement>;
    /** Portal holding the user's content. */
    _portal: TemplatePortal;
    /** ID for the associated header element. Used for a11y labelling. */
    _headerId: string;
    /** Stream of body animation done events. */
    _bodyAnimationDone: Subject<AnimationEvent>;
    constructor(accordion: SdsAccordionBase, _changeDetectorRef: ChangeDetectorRef, _uniqueSelectionDispatcher: UniqueSelectionDispatcher, _viewContainerRef: ViewContainerRef, _document: any, _animationMode: string);
    /** Gets the expanded state string. */
    _getExpandedState(): SdsAccordionItemState;
    ngAfterContentInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    ngOnDestroy(): void;
    /** Checks whether the accordion item's content contains the currently-focused element. */
    _containsFocus(): boolean;
}
