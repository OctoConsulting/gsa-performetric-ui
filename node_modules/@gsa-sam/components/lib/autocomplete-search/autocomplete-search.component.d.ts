import { TemplateRef, ElementRef, ChangeDetectorRef } from '@angular/core';
import { ControlValueAccessor } from '@angular/forms';
import { SDSAutocompleteServiceInterface } from './models/SDSAutocompleteServiceInterface';
import { SDSSelectedItemModel } from '../selected-result/models/sds-selectedItem.model';
import { SDSAutocompleteSearchConfiguration } from './models/SDSAutocompleteConfiguration';
export declare class SDSAutocompleteSearchComponent implements ControlValueAccessor {
    private _changeDetectorRef;
    constructor(_changeDetectorRef: ChangeDetectorRef);
    /**
     * Ul list of elements
     */
    resultsListElement: ElementRef;
    /**
     * input control
     */
    input: ElementRef;
    /**
     * Allow to insert a customized template for suggestions to use
     */
    itemTemplate: TemplateRef<any>;
    /**
     * The data model that has the selected item
     */
    model: SDSSelectedItemModel;
    /**
     * Configuration for the Autocomplete control
     */
    configuration: SDSAutocompleteSearchConfiguration;
    /**
     * Instance of the SamHiercarchicalServiceInterface provided
     */
    service: SDSAutocompleteServiceInterface;
    /**
     * Timer id for the timer awaiting the service call for more typeing
     */
    private timeoutNumber;
    /**
     *  result set to be rendered
     */
    results: object[];
    /**
     * max number of results to be shown
     */
    private maxResults;
    /**
     * selected index
     */
    highlightedIndex: number;
    /**
     * highlighted object in drop down
     */
    private highlightedItem;
    /**
     * value of the input field
     */
    inputValue: string;
    /**
     * Proprty being set on the object is highlighted
     */
    private HighlightedPropertyName;
    showLoad: boolean;
    /**
     * Search string
     */
    private searchString;
    /**
     * Message announced by screen readers when
     * autocomplete results are updated or new item
     * is highlighted
     */
    srOnlyText: string;
    /**
     * To make input readonly
     */
    inputReadOnly: boolean;
    /**
     * Used to store selected items
     */
    items: any[];
    /**
     * Stored Event for ControlValueAccessor
     */
    onTouchedCallback: () => void;
    /**
     * Stored Event for ControlValueAccessor
     */
    propogateChange: (_: any) => void;
    disabled: boolean;
    private resultsAvailableMessage;
    private index;
    /**
     * Gets the string value from the specifed properties of an object
     * @param object
     * @param propertyFields comma seperated list with periods depth of object
     */
    getObjectValue(object: Object, propertyFields: string): string;
    /**
     * Determines if the dropdown should be shown
     */
    showResults: boolean;
    /**
     * Clears the input fields and value
     */
    clearInput(): void;
    /**
     *
     * @param event
     */
    checkForFocus(event: any): void;
    /**
     *
     */
    private focusRemoved;
    onkeypress(ev: any): boolean;
    textChange(event: any): void;
    /**
     * Event method used when focus is gained to the input
     */
    inputFocusHandler(): void;
    /**
     * Key event
     * @param event
     */
    onKeydown(event: any): void;
    /**
     * selects the item adding it to the model and closes the results
     * @param item
     */
    selectItem(item: object): void;
    /**
     *  clears the results and closes result drop down
     */
    private clearAndHideResults;
    /**
     *  handles the arrow up key event
     */
    private onArrowUp;
    /**
     *  handles the arrow down key event
     */
    private onArrowDown;
    showFreeText(): boolean;
    private createFreeTextItem;
    /**
     *  gets the inital results
     * @param searchString
     */
    private getResults;
    /**
     * Checks if the new search string matches the old search string
     * @param searchString
     */
    private matchPastSearchString;
    /**
     * highlights the index being hovered
     * @param index
     */
    listItemHover(index: number): void;
    /**
     * Scroll Event Handler (Calculates if mpre items should be asked for from service on scrolling down)
     */
    onScroll(): void;
    /**
     * gets more results based when scrolling and adds the items
     */
    private getAdditionalResults;
    /**
     * adds a single item to the list
     * @param item
     */
    private addResult;
    /**
     * When paging up and down with arrow key it sets the highlighted item into view
     */
    private scrollSelectedItemIntoView;
    /**
     * Sets the highlighted item by keyboard or mouseover
     * @param item
     */
    private setHighlightedItem;
    /**
     * Adds message to be read by screen reader
     * @param message
     */
    private addScreenReaderMessage;
    writeValue(obj: any): void;
    getClass(): "" | "hide-cursor";
    registerOnChange(fn: any): void;
    registerOnTouched(fn: any): void;
    setDisabledState(isDisabled: boolean): void;
}
