import { OnInit, EventEmitter, ChangeDetectorRef, ElementRef } from '@angular/core';
import { PaginationConfigurationModel, PaginationModel } from './model/paginationModel';
export declare class PaginationComponent implements OnInit {
    private change;
    ngOnInit(): void;
    constructor(change: ChangeDetectorRef);
    /**
     * Stores the previous number. Used when focus out if field empty
     */
    private maintainPreviousValue;
    /**
     * Input field for the current page
     */
    currentPageField: ElementRef;
    /**
     * Output of the page model object
     */
    pageChange: EventEmitter<PaginationModel>;
    /**
     * Pagination model
     */
    page: PaginationModel;
    /**
     * configuration for the pagination
     */
    paginationConfiguration: PaginationConfigurationModel;
    /**
     * debounce time for current page input
     */
    debounceTime: number;
    /**
     * Stores the previous number
     */
    private previousNumber;
    /**
     * timeout id of the debounce time
     */
    timeoutNumber: number;
    /**
     * Drop down options for page size
     */
    options: {
        label: string;
        value: number;
    }[];
    /**
     * previous page lowers page number by one within range
     */
    previousPage(): void;
    /**
     * next page increase page number by one within range
     */
    nextPage(): void;
    /**
     * current page changes sets new value if within range
     * @param newValue
     */
    valuechange(newValue?: number): void;
    /**
     * adjusts the value if not within the page limit above or below
     * @param newValue handles
     */
    private handleInputOutsideBounds;
    /**
     * current page focus out will replace with previous valid if empty
     */
    currentPageFocusOut(): void;
    /**
     * page size selection change
     */
    onSelectChange(): void;
}
