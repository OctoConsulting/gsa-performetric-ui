import { AfterContentInit, ElementRef, EventEmitter, InjectionToken, OnDestroy, TemplateRef, OnInit } from '@angular/core';
import { AnimationEvent } from '@angular/animations';
import { FocusOrigin } from '@angular/cdk/a11y';
import { SdsMenuItemComponent } from './menu-item.component';
/** Menu Positions */
export declare type MenuPositionX = 'before' | 'after';
export declare type MenuPositionY = 'above' | 'below';
/** Menu available sizes */
export declare type MenuSizes = 'sm';
/** Injection token used to provide the parent menu to menu items. */
export declare const SDS_MENU_TOKEN: InjectionToken<SdsMenuInterface<any>>;
/** Menu Interface */
export interface SdsMenuInterface<T = any> {
    xPosition: MenuPositionX;
    yPosition: MenuPositionY;
    overlapTrigger: boolean;
    templateRef: TemplateRef<any>;
    closed: EventEmitter<void | 'click' | 'keydown' | 'tab'>;
    parentMenu?: SdsMenuInterface;
    size?: MenuSizes;
    focusFirstItem: (origin?: FocusOrigin) => void;
    setPositionClasses?: (x: MenuPositionX, y: MenuPositionY) => void;
    addItem?: (item: T) => void;
    insertItem?: (item: T, index: number) => void;
    removeItem?: (item: T) => void;
}
export declare class SdsMenuComponent implements OnInit, AfterContentInit, OnDestroy, SdsMenuInterface<SdsMenuItemComponent> {
    private _elementRef;
    /** After | Before the menu triger element */
    private _xPosition;
    /** Above | Below the menu triger element */
    private _yPosition;
    /** Manage browser focus */
    private _keyManager;
    /** Menu items inside the current menu. */
    private _items;
    /** Subscription to tab events on the menu panel */
    private _tabSubscription;
    /** Stores <sds-menu> classes */
    private _previousPanelClass;
    /** Config object to be passed into the menu's ngClass */
    _classList: {
        [key: string]: boolean;
    };
    /** Current state of the panel animation. */
    _panelAnimationState: 'void' | 'enter';
    /** Grab the component template */
    templateRef: TemplateRef<any>;
    /**
     * Size of menu component.
     * Affects the font-size of the menu items and
     * the size of the close button in the menu header
     */
    size: MenuSizes;
    /** Position of the menu in the X axis. */
    xPosition: MenuPositionX;
    /** Position of the menu in the Y axis. */
    yPosition: MenuPositionY;
    /** Whether menu panel overlaps trigger element */
    overlapTrigger: boolean;
    private _overlapTrigger;
    /** Transfer classes from the sds-menu to the overlay container */
    panelClass: string;
    /** Event emitted when the menu is closed. */
    closed: EventEmitter<void | "click" | "keydown" | "tab">;
    constructor(_elementRef: ElementRef<HTMLElement>);
    ngOnInit(): void;
    ngAfterContentInit(): void;
    ngOnDestroy(): void;
    /** Focus the first item in the menu */
    focusFirstItem(origin?: FocusOrigin): void;
    /** Adds classes to the menu panel based on its position */
    setPositionClasses(posX?: MenuPositionX, posY?: MenuPositionY): void;
    /** Adds a menu item with the menu. */
    addItem(item: SdsMenuItemComponent): void;
    /** Inserts a menu item at an index */
    insertItem(item: SdsMenuItemComponent, index: number): void;
    /** Removes an item from the menu. */
    removeItem(item: SdsMenuItemComponent): void;
    /** Handle a keyboard event from the menu */
    _handleKeydown(event: KeyboardEvent): void;
    /** Starts the enter animation. */
    _startAnimation(): void;
    /** Callback that is invoked when the panel animation completes. */
    _onAnimationDone(event: AnimationEvent): void;
    /** Resets the panel animation to its initial state. */
    _resetAnimation(): void;
    _onAnimationStart(event: AnimationEvent): void;
}
