import { ElementRef, EventEmitter, OnDestroy, ViewContainerRef } from '@angular/core';
import { FocusMonitor, FocusOrigin } from '@angular/cdk/a11y';
import { Overlay } from '@angular/cdk/overlay';
import { SdsMenuInterface } from './menu.component';
export declare class SdsMenuTriggerForDirective implements OnDestroy {
    private _overlay;
    private _element;
    private _viewContainerRef;
    private _focusMonitor;
    /** ARIA haspopup for the menu trigger. */
    ariaHasPopup: boolean;
    /** ARIA expanded for the menu trigger. */
    readonly menuOpen: boolean;
    /** Holds the menu instance */
    private _menu;
    /** Holds value for menuOpen variable */
    private _menuOpen;
    /** CDK Portal for menu panel */
    private _portal;
    /** PortalOutlet */
    private _overlayRef;
    /** Tracks input type  */
    private _openedBy;
    private _closingActionsSubscription;
    private _menuCloseSubscription;
    /** References the menu instance that the trigger is associated with. */
    menu: SdsMenuInterface;
    /** Event emitted when the associated menu is opened. */
    menuOpened: EventEmitter<void>;
    /** Event emitted when the associated menu is closed. */
    menuClosed: EventEmitter<void>;
    /** Handles mouse presses on the trigger. */
    _handleMousedown(event: MouseEvent): void;
    /** Toggles the menu between the open and closed states. */
    toggleMenu(): void;
    constructor(_overlay: Overlay, _element: ElementRef<HTMLElement>, _viewContainerRef: ViewContainerRef, _focusMonitor: FocusMonitor);
    ngOnDestroy(): void;
    /** Opens the menu. */
    openMenu(): void;
    /** Closes the menu. */
    closeMenu(): void;
    /** Focuses the menu trigger. */
    focus(origin?: FocusOrigin): void;
    /** This method sets the menu state to open and focuses the first item */
    private _initMenu;
    /** sets open state */
    private _setIsMenuOpen;
    /**
     * This method resets the menu when it's closed,
     * most importantly restoring focus to the menu trigger
     */
    private _resetMenu;
    /** Closes the menu and does the necessary cleanup. */
    private _destroyMenu;
    /**
     * This method creates the overlay from the provided menu's template and saves its
     * OverlayRef so that it can be attached to the DOM when openMenu is called.
     */
    private _createOverlay;
    /**
     * This method builds the configuration object needed to create the overlay, the OverlayState.
     * @returns OverlayConfig
     */
    private _getOverlayConfig;
    /**
     * Listens to changes in the position of the overlay and sets the correct classes
     * on the menu based on the new position.
     */
    private _subscribeToPositions;
    /**
     * Sets the appropriate positions on a position strategy
     * so the overlay connects with the trigger correctly.
     */
    private _setPosition;
    /** Returns a stream that emits whenever an action that should close the menu occurs. */
    private _menuClosingActions;
    /** Gets the portal that should be attached to the overlay. */
    private _getPortal;
}
