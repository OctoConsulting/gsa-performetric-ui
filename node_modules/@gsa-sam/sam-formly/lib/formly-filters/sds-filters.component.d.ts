import { EventEmitter, OnInit, ChangeDetectorRef } from '@angular/core';
import { FormGroup } from '@angular/forms';
import { FormlyFieldConfig, FormlyFormOptions } from '@ngx-formly/core';
import { Router, ActivatedRoute } from '@angular/router';
import { SDSFormlyUpdateComunicationService } from './service/sds-filters-comunication.service';
export declare class SdsFiltersComponent implements OnInit {
    formlyUpdateComunicationService: SDSFormlyUpdateComunicationService;
    private cdr;
    private router;
    private route;
    /**
     * Pass in a Form Group for ReactiveForms Support
     */
    form: FormGroup;
    /**
     *  Fields are used to configure the UI components
     */
    fields: FormlyFieldConfig[];
    /**
     *  Model used to display the filter values.
     */
    model: any;
    /**
     *    Options for the form.
     */
    options: FormlyFormOptions;
    /**
     *  Emit results when model updated
     * To enable History Tracking
     *  If advanced filters dialog should be displayed -- defaults to false
     */
    advancedFilters: boolean;
    /**
     * Timer id for the timer awaiting the service call for more typeing
     */
    isHistoryEnable: boolean;
    /**
     *  Emit results when model updated
     */
    filterChange: EventEmitter<object[]>;
    sdsFilterHistory: any[];
    _isObj: (obj: any) => boolean;
    _isEmpty: (obj: any) => boolean;
    overwrite: (baseObj: any, newObj: any) => {};
    nullify: (obj: any) => any;
    constructor(formlyUpdateComunicationService: SDSFormlyUpdateComunicationService, cdr: ChangeDetectorRef, router: Router, route: ActivatedRoute);
    onpopstate(): void;
    ngOnInit(): void;
    onModelChange(change: any): void;
    updateChange(change: any): void;
    addToStorageList(hashCode: any): void;
    clearStorage(): void;
}
