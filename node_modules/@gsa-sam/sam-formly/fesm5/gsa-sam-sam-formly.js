import { MatInputModule } from '@angular/material/input';
import { MatNativeDateModule } from '@angular/material/core';
import { MatDatepickerModule } from '@angular/material/datepicker';
import { trigger, state, style, transition, animate, group } from '@angular/animations';
import { FormlySelectModule } from '@ngx-formly/core/select';
import { FontAwesomeModule } from '@fortawesome/angular-fontawesome';
import { __extends, __spread, __assign } from 'tslib';
import { Router, ActivatedRoute } from '@angular/router';
import { stringify } from 'qs';
import { Md5 } from 'ts-md5/dist/md5';
import { Subject } from 'rxjs';
import { Component, ViewChild, ViewContainerRef, ChangeDetectionStrategy, ChangeDetectorRef, NgModule, Input, Output, EventEmitter, Optional, HostListener, Injectable, Inject, defineInjectable } from '@angular/core';
import { CommonModule } from '@angular/common';
import { ReactiveFormsModule, FormGroup, FormsModule } from '@angular/forms';
import { FieldWrapper, FieldType, FormlyModule } from '@ngx-formly/core';
import { SDSAutocompleteComponent, SdsTextComponent, SdsSearchComponent, SdsAccordionModule, SdsAutocompleteModule, SdsDialogModule, SdsTextModule, SdsSearchModule, SdsDialogRef, SDS_DIALOG_DATA, SdsDialogService } from '@gsa-sam/components';

var FormlyCustomWrapperComponent = /** @class */ (function (_super) {
    __extends(FormlyCustomWrapperComponent, _super);
    function FormlyCustomWrapperComponent() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    FormlyCustomWrapperComponent.decorators = [
        { type: Component, args: [{
                    selector: 'sam-formly-filter-wrapper-form-field',
                    template: "\n  <sds-accordion multi=\"true\" displayMode=\"basic\">\n    <sds-accordion-item class=\"sds-accordion__panel\">\n      <sds-accordion-item-header> {{to.label}} </sds-accordion-item-header>\n      <div class=\"usa-form-group\" [class.usa-form-group--error]=\"showError\">\n      <label class=\"usa-label\" *ngIf=\"to.label && to.hideLabel !== true\" [attr.for]=\"id\" [ngClass]=\"to.labelClass\">\n        <span *ngIf=\"to.tagText\" class=\"usa-tag\"  [ngClass]=\"to.tagClass ? to.tagClass : 'sds-tag--info-white'\">{{to.tagText}}</span> \n        <span>{{ to.label }}</span>\n        <span *ngIf=\"!to.required && !to.hideOptional\"> (Optional)</span>\n      </label>  \n      <small *ngIf=\"to.description\" class=\"form-text text-muted\">{{ to.description }}</small>\n      <ng-template #fieldComponent></ng-template>\n      <div *ngIf=\"showError\" class=\"usa-error-message\" [style.display]=\"'block'\">\n        <formly-validation-message [field]=\"field\"></formly-validation-message>\n      </div>\n      </div>\n    </sds-accordion-item>\n  </sds-accordion>\n  "
                }] }
    ];
    FormlyCustomWrapperComponent.propDecorators = {
        fieldComponent: [{ type: ViewChild, args: ['fieldComponent', { read: ViewContainerRef },] }]
    };
    return FormlyCustomWrapperComponent;
}(FieldWrapper));

/**
 * @param {string} [to.tagClass] Class to be added to the tag (default: sds-tag--info-white)
 * @param {string} [to.tagText] Text to be shown inside the tag
 * @param {string} [to.labelClass] Class to be applied to the label
 * @param {string} [to.label] Text to be shown for the label
 * @param {string} [to.required] Makes the field required
 * @param {string} [to.description] Add a description below the label
 * @param {string} [to.hideOptional] Remove the optional text
 * @param {string} [to.hideLabel] Hide the label
 *
 */
var FormlyWrapperFormFieldComponent = /** @class */ (function (_super) {
    __extends(FormlyWrapperFormFieldComponent, _super);
    function FormlyWrapperFormFieldComponent() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    FormlyWrapperFormFieldComponent.decorators = [
        { type: Component, args: [{
                    selector: 'sds-formly-wrapper-form-field',
                    template: "\n<div class=\"usa-form-group\" [class.usa-form-group--error]=\"showError\">\n  <label class=\"usa-label\" *ngIf=\"to.label && to.hideLabel !== true\" [attr.for]=\"id\" [ngClass]=\"to.labelClass\">\n    <span *ngIf=\"to.tagText\" class=\"usa-tag\"  [ngClass]=\"to.tagClass ? to.tagClass : 'sds-tag--info-white'\">{{to.tagText}}</span>\n    <span>{{ to.label }}</span>\n    <span *ngIf=\"!to.required && !to.hideOptional\"> (Optional)</span>\n  </label>\n  <small *ngIf=\"to.description\" class=\"form-text text-muted\">{{ to.description }}</small>\n  <ng-template #fieldComponent></ng-template>\n  <div *ngIf=\"showError\" class=\"usa-error-message\" [style.display]=\"'block'\">\n    <formly-validation-message [field]=\"field\"></formly-validation-message>\n  </div>\n</div>\n  "
                }] }
    ];
    FormlyWrapperFormFieldComponent.propDecorators = {
        fieldComponent: [{ type: ViewChild, args: ['fieldComponent', { read: ViewContainerRef },] }]
    };
    return FormlyWrapperFormFieldComponent;
}(FieldWrapper));

/**
 * @param {string} [to.expand] to expand the accordion
 *
 */
var FormlyAccordianFormFieldComponent = /** @class */ (function (_super) {
    __extends(FormlyAccordianFormFieldComponent, _super);
    function FormlyAccordianFormFieldComponent() {
        return _super.call(this) || this;
    }
    FormlyAccordianFormFieldComponent.prototype.modelHasValue = function () {
        if (this.to.hasOwnProperty('expand')) {
            return this.to.expand;
        }
        else {
            var hasValue = this.formControl.value instanceof Object
                ? stringify(this.formControl.value, { skipNulls: true })
                : this.formControl.value;
            return hasValue ? true : false;
        }
    };
    FormlyAccordianFormFieldComponent.decorators = [
        { type: Component, args: [{
                    selector: 'sam-formly-accordian-form-field',
                    template: "\n    <sds-accordion multi=\"true\" displayMode=\"basic\">\n      <sds-accordion-item\n        class=\"sds-accordion__panel\"\n        [expanded]=\"modelHasValue()\"\n      >\n        <sds-accordion-item-header> {{ to.label }} </sds-accordion-item-header>\n        <ng-container #fieldComponent></ng-container>\n      </sds-accordion-item>\n    </sds-accordion>\n  "
                }] }
    ];
    /** @nocollapse */
    FormlyAccordianFormFieldComponent.ctorParameters = function () { return []; };
    FormlyAccordianFormFieldComponent.propDecorators = {
        fieldComponent: [{ type: ViewChild, args: ['fieldComponent', { read: ViewContainerRef },] }]
    };
    return FormlyAccordianFormFieldComponent;
}(FieldWrapper));

/**
 * @param {string} [to.ariaHidden] Hide the label
 * @param {string} [to.label] Text to be shown for the label
 */
var FormlyFormFieldFilterWrapperComponent = /** @class */ (function (_super) {
    __extends(FormlyFormFieldFilterWrapperComponent, _super);
    function FormlyFormFieldFilterWrapperComponent() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    FormlyFormFieldFilterWrapperComponent.decorators = [
        { type: Component, args: [{
                    selector: 'sam-formly-filter-wrapper-form-field',
                    template: "\n    <div  class=\"wrapper-body\">\n      <div class=\"sds-accordion__trigger header-label\" [attr.aria-hidden]=\"to.ariaHidden ? 'false' : 'true'\"> {{to.label}} </div>\n      <ng-container #fieldComponent></ng-container>\n    </div>\n  "
                }] }
    ];
    FormlyFormFieldFilterWrapperComponent.propDecorators = {
        fieldComponent: [{ type: ViewChild, args: ['fieldComponent', { read: ViewContainerRef },] }]
    };
    return FormlyFormFieldFilterWrapperComponent;
}(FieldWrapper));

var FormlyFieldInputComponent = /** @class */ (function (_super) {
    __extends(FormlyFieldInputComponent, _super);
    function FormlyFieldInputComponent() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    FormlyFieldInputComponent.decorators = [
        { type: Component, args: [{
                    selector: 'sds-formly-field-input',
                    template: "\n  <input [class.usa-input--error]=\"showError\" class=\"usa-input\" [placeholder]=\"to.placeholder\" name=\"input-success\" [formlyAttributes]=\"field\" [type]=\"to.inputType? to.inputType : 'text'\" [formControl]=\"formControl\">\n  "
                }] }
    ];
    return FormlyFieldInputComponent;
}(FieldType));

var FormlyFieldSelectComponent = /** @class */ (function (_super) {
    __extends(FormlyFieldSelectComponent, _super);
    function FormlyFieldSelectComponent() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.defaultOptions = {
            templateOptions: { options: [] },
        };
        return _this;
    }
    FormlyFieldSelectComponent.decorators = [
        { type: Component, args: [{
                    selector: 'sds-formly-field-select',
                    template: "\n    <select *ngIf=\"to.multiple; else singleSelect\" \n      multiple\n      [class.custom-select]=\"to.customSelect\"\n      [formControl]=\"formControl\"\n      [class.is-invalid]=\"showError\"\n      [formlyAttributes]=\"field\">\n        <ng-container *ngFor=\"let item of to.options | formlySelectOptions:field | async\">\n         <optgroup *ngIf=\"item.group\" label=\"{{item.label}}\">\n            <option *ngFor=\"let child of item.group\" [ngValue]=\"child.value\" [disabled]=\"child.disabled\">\n              {{ child.label }}\n            </option>\n          </optgroup>\n          <option *ngIf=\"!item.group\" [ngValue]=\"item.value\" [disabled]=\"item.disabled\">{{ item.label }}</option>\n        </ng-container>\n    </select>\n    <ng-template #singleSelect>\n      <select class=\"usa-select\"\n        [formControl]=\"formControl\"\n        [class.custom-select]=\"to.customSelect\"\n        [class.is-invalid]=\"showError\"\n        [formlyAttributes]=\"field\">\n        <option *ngIf=\"to.placeholder\" [ngValue]=\"null\">{{ to.placeholder }}</option>\n        <ng-container *ngFor=\"let item of to.options | formlySelectOptions:field | async\">\n          <optgroup *ngIf=\"item.group\" label=\"{{item.label}}\">\n            <option *ngFor=\"let child of item.group\" [ngValue]=\"child.value\" [disabled]=\"child.disabled\">\n              {{ child.label }}\n            </option>\n          </optgroup>\n          <option *ngIf=\"!item.group\" [ngValue]=\"item.value\" [disabled]=\"item.disabled\">{{ item.label }}</option>\n        </ng-container>\n      </select>\n    </ng-template>\n  "
                }] }
    ];
    return FormlyFieldSelectComponent;
}(FieldType));

var FormlyFieldRadioComponent = /** @class */ (function (_super) {
    __extends(FormlyFieldRadioComponent, _super);
    function FormlyFieldRadioComponent() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.defaultOptions = {
            templateOptions: {
                options: []
            },
        };
        return _this;
    }
    FormlyFieldRadioComponent.decorators = [
        { type: Component, args: [{
                    selector: 'sds-formly-field-radio',
                    template: "\n  <div class=\"usa-radio\">\n      <div *ngFor=\"let option of to.options | formlySelectOptions:field | async; let i = index;\">\n        <input type=\"radio\"\n          [id]=\"id + '_' + i\"\n          class=\"usa-radio__input\"\n          [name]=\"id\"\n          [class.usa-input--error]=\"showError\"\n          [attr.value]=\"option.value\"\n          [value]=\"option.value\"\n          [formControl]=\"formControl\"\n          [formlyAttributes]=\"field\">\n        <label\n          class=\"usa-radio__label\"\n          [for]=\"id + '_' + i\">\n          {{ option.label }}\n        </label>\n      </div>\n    </div>\n  "
                }] }
    ];
    return FormlyFieldRadioComponent;
}(FieldType));

var FormlyFieldCheckboxComponent = /** @class */ (function (_super) {
    __extends(FormlyFieldCheckboxComponent, _super);
    function FormlyFieldCheckboxComponent() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.defaultOptions = {
            templateOptions: {
                indeterminate: true,
                hideLabel: true,
            },
        };
        return _this;
    }
    FormlyFieldCheckboxComponent.decorators = [
        { type: Component, args: [{
                    selector: 'sds-formly-field-checkbox',
                    template: "\n    <div class=\"usa-checkbox\">\n      <input class=\"usa-checkbox__input\" type=\"checkbox\"\n        [class.is-invalid]=\"showError\"\n        [indeterminate]=\"to.indeterminate && formControl.value === null\"\n        [formControl]=\"formControl\"\n        [formlyAttributes]=\"field\">\n      <label class=\"usa-checkbox__label\" [for]=\"id\">\n        {{ to.label }}\n        <span *ngIf=\"!to.required && !to.hideOptional\"> (Optional)</span>\n      </label>\n    </div>\n  "
                }] }
    ];
    return FormlyFieldCheckboxComponent;
}(FieldType));

var FormlyFieldMultiCheckboxComponent = /** @class */ (function (_super) {
    __extends(FormlyFieldMultiCheckboxComponent, _super);
    function FormlyFieldMultiCheckboxComponent() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.defaultOptions = {
            templateOptions: {
                options: [],
            },
        };
        return _this;
    }
    FormlyFieldMultiCheckboxComponent.prototype.onChange = function (value, checked) {
        var _a;
        if (this.to.type === 'array') {
            this.formControl.patchValue(checked
                ? __spread((this.formControl.value || []), [value]) : __spread((this.formControl.value || [])).filter(function (o) { return o !== value; }));
        }
        else {
            this.formControl.patchValue(__assign({}, this.formControl.value, (_a = {}, _a[value] = checked, _a)));
        }
        this.formControl.markAsTouched();
    };
    FormlyFieldMultiCheckboxComponent.decorators = [
        { type: Component, args: [{
                    selector: 'sds-formly-field-multicheckbox',
                    template: "\n  <div class=\"usa-checkbox\">\n    <div *ngFor=\"let option of to.options | formlySelectOptions:field | async; let i = index;\">\n    <input type=\"checkbox\"\n     [id]=\"id + '_' + i\"\n     class=\"usa-checkbox__input\"\n      [value]=\"option.value\"\n      [checked]=\"formControl.value && (this.to.type === 'array' ? formControl.value.includes(option.value) : formControl.value[option.value])\"\n      [formlyAttributes]=\"field\"\n      (change)=\"onChange(option.value, $event.target.checked)\">\n    <label\n    class=\"usa-checkbox__label\"\n    [for]=\"id + '_' + i\">\n        {{ option.label }}\n    </label>\n  </div>\n</div>\n  "
                }] }
    ];
    return FormlyFieldMultiCheckboxComponent;
}(FieldType));

var FormlyFieldTextAreaComponent = /** @class */ (function (_super) {
    __extends(FormlyFieldTextAreaComponent, _super);
    function FormlyFieldTextAreaComponent() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.defaultOptions = {
            templateOptions: {
                cols: 1,
                rows: 1,
            },
        };
        return _this;
    }
    FormlyFieldTextAreaComponent.decorators = [
        { type: Component, args: [{
                    selector: 'sds-formly-field-textarea',
                    template: "\n    <textarea [formControl]=\"formControl\" [cols]=\"to.cols\"\n      [rows]=\"to.rows\" class=\"usa-textarea\" [class.usa-input--error]=\"showError\"\n      [formlyAttributes]=\"field\">\n    </textarea>\n  "
                }] }
    ];
    return FormlyFieldTextAreaComponent;
}(FieldType));

var AbstractSdsFormly = /** @class */ (function (_super) {
    __extends(AbstractSdsFormly, _super);
    function AbstractSdsFormly() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    AbstractSdsFormly.prototype.ngDoCheck = function () {
        this.setProperties(this.template, this.field.templateOptions);
    };
    AbstractSdsFormly.prototype.setProperties = function (component, configuration) {
        Object.keys(configuration).forEach(function (key) {
            component[key] = configuration[key];
        });
        if (this.template.control) {
            this.template.control = this.formControl;
        }
        this.cdr.detectChanges();
    };
    return AbstractSdsFormly;
}(FieldType));

var FormlyFieldAutoCompleteComponent = /** @class */ (function (_super) {
    __extends(FormlyFieldAutoCompleteComponent, _super);
    function FormlyFieldAutoCompleteComponent(_cdr) {
        var _this = _super.call(this) || this;
        _this.cdr = _cdr;
        return _this;
    }
    FormlyFieldAutoCompleteComponent.decorators = [
        { type: Component, args: [{
                    selector: 'sds-formly-field-autocomplete',
                    template: "\n  <sds-autocomplete [formControl]=\"formControl\"></sds-autocomplete>\n  ",
                    changeDetection: ChangeDetectionStrategy.OnPush
                }] }
    ];
    /** @nocollapse */
    FormlyFieldAutoCompleteComponent.ctorParameters = function () { return [
        { type: ChangeDetectorRef }
    ]; };
    FormlyFieldAutoCompleteComponent.propDecorators = {
        template: [{ type: ViewChild, args: [SDSAutocompleteComponent,] }]
    };
    return FormlyFieldAutoCompleteComponent;
}(AbstractSdsFormly));

var FormlyFieldDatePickerComponent = /** @class */ (function (_super) {
    __extends(FormlyFieldDatePickerComponent, _super);
    function FormlyFieldDatePickerComponent() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    FormlyFieldDatePickerComponent.decorators = [
        { type: Component, args: [{
                    selector: 'sds-formly-field-datepicker',
                    template: "\n    <input\n      [id]=\"id\"\n      class=\"usa-input display-inline-block margin-top-3\"\n      [class.usa-input--error]=\"showError\"\n      [formControl]=\"formControl\"\n      [formlyAttributes]=\"field\"\n      matInput\n      [min]=\"to.minDate\"\n      [max]=\"to.maxDate\"\n      [matDatepicker]=\"picker\"\n      placeholder=\"Choose a date\"\n    />\n    <mat-datepicker-toggle matSuffix [for]=\"picker\"></mat-datepicker-toggle>\n    <mat-datepicker [startAt]=\"to.startDate\" #picker></mat-datepicker>\n  "
                }] }
    ];
    return FormlyFieldDatePickerComponent;
}(FieldType));

var FormlyFieldButtonComponent = /** @class */ (function (_super) {
    __extends(FormlyFieldButtonComponent, _super);
    function FormlyFieldButtonComponent() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    FormlyFieldButtonComponent.prototype.onClick = function ($event) {
        if (this.to.onClick) {
            this.to.onClick($event);
        }
    };
    FormlyFieldButtonComponent.decorators = [
        { type: Component, args: [{
                    selector: 'sds-formly-field-button',
                    template: "\n      <button [type]=\"to.type\" [ngClass]=\"'btn btn-' + to.btnType\" (click)=\"onClick($event)\" class=\"usa-button--unstyled\">\n        {{ to.text }}\n      </button>\n  "
                }] }
    ];
    return FormlyFieldButtonComponent;
}(FieldType));

var FormlyFieldTextComponent = /** @class */ (function (_super) {
    __extends(FormlyFieldTextComponent, _super);
    function FormlyFieldTextComponent(_cdr) {
        var _this = _super.call(this) || this;
        _this.cdr = _cdr;
        return _this;
    }
    FormlyFieldTextComponent.decorators = [
        { type: Component, args: [{
                    selector: 'sds-formly-field-text',
                    template: "\n  <sds-text [formControl]=\"formControl\"></sds-text>\n  ",
                    changeDetection: ChangeDetectionStrategy.OnPush
                }] }
    ];
    /** @nocollapse */
    FormlyFieldTextComponent.ctorParameters = function () { return [
        { type: ChangeDetectorRef }
    ]; };
    FormlyFieldTextComponent.propDecorators = {
        template: [{ type: ViewChild, args: [SdsTextComponent,] }]
    };
    return FormlyFieldTextComponent;
}(AbstractSdsFormly));

/**
 *
 * @param control
 * @param field
 */
function minDateValidator(control, field) {
    var toReturn = null;
    var minDateField = field.templateOptions.minDate;
    var value = control.value;
    if (value && minDateField) {
        if (value instanceof Date && minDateField instanceof Date) {
            if (value < minDateField) {
                if (!field.templateOptions.maxDate && !(field.templateOptions.maxDate instanceof Date)) {
                    toReturn = {
                        'minDate': true
                    };
                }
                else {
                    toReturn = {
                        'betweenDate': true
                    };
                }
            }
        }
    }
    return toReturn;
}
/**
 *
 * @param control
 * @param field
 */
function maxDateValidator(control, field) {
    var toReturn = null;
    var maxDateField = field.templateOptions.maxDate;
    var value = control.value;
    if (value && maxDateField) {
        if (value instanceof Date && maxDateField instanceof Date) {
            if (value > maxDateField) {
                if (!field.templateOptions.minDate && !(field.templateOptions.minDate instanceof Date)) {
                    toReturn = {
                        'maxDate': true
                    };
                }
                else {
                    toReturn = {
                        'betweenDate': true
                    };
                }
            }
        }
    }
    return toReturn;
}

var sdsFieldWrapper = ['label', 'description', 'validation'];
var sdsGroupWrapper = ['group'];
var sdsWrappers = __spread(sdsGroupWrapper, sdsFieldWrapper);

/**
 * @param {string} [to.tagClass] Class to be added to the tag (default: sds-tag--info-white)
 * @param {string} [to.tagText] Text to be shown inside the tag
 * @param {string} [to.label] Text to be shown for the label
 * @param {string} [to.required] Makes the field required
 * @param {string} [to.hideOptional] Remove the optional text
 *
 */
var FormlyLabelWrapperComponent = /** @class */ (function (_super) {
    __extends(FormlyLabelWrapperComponent, _super);
    function FormlyLabelWrapperComponent() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    FormlyLabelWrapperComponent.prototype.hasLabel = function () {
        if (this.to.label) {
            if (!(this.field.type === 'checkbox' || this.field.type === 'multicheckbox')) {
                return true;
            }
        }
    };
    FormlyLabelWrapperComponent.decorators = [
        { type: Component, args: [{
                    template: "\n    <div class=\"usa-form-group\" [class.usa-form-group--error]=\"showError\">\n      <label class=\"usa-label\" *ngIf=\"hasLabel()\" [attr.for]=\"id\" [ngClass]=\"{'usa-sr-only' : to.hideLabel || ((to.group==='panel' || to.group==='accordion') && field?.parent?.type!==\n      'formly-group') }\">\n        <span *ngIf=\"to.tagText\" class=\"usa-tag\"  [ngClass]=\"to.tagClass ? to.tagClass : 'sds-tag--info-white'\">{{to.tagText}}</span>\n        <span>{{ to.label }}</span>\n        <span *ngIf=\"!to.required && !to.hideOptional\"> (Optional)</span>\n      </label>\n      <ng-container #fieldComponent></ng-container>\n    </div>\n  "
                }] }
    ];
    FormlyLabelWrapperComponent.propDecorators = {
        fieldComponent: [{ type: ViewChild, args: ['fieldComponent', { read: ViewContainerRef },] }]
    };
    return FormlyLabelWrapperComponent;
}(FieldWrapper));

/**
 * @param {string} [to.description] Add a description below the label
 *
 */
var FormlyDescriptionWrapperComponent = /** @class */ (function (_super) {
    __extends(FormlyDescriptionWrapperComponent, _super);
    function FormlyDescriptionWrapperComponent() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    FormlyDescriptionWrapperComponent.decorators = [
        { type: Component, args: [{
                    template: "\n    <div>\n      <small *ngIf=\"to.description\" class=\"form-text text-muted\">{{ to.description }}</small>\n      <ng-container #fieldComponent></ng-container>\n    </div>\n  "
                }] }
    ];
    FormlyDescriptionWrapperComponent.propDecorators = {
        fieldComponent: [{ type: ViewChild, args: ['fieldComponent', { read: ViewContainerRef },] }]
    };
    return FormlyDescriptionWrapperComponent;
}(FieldWrapper));

/**
 * @param {string} [to.required] Makes the field required
 */
var FormlyValidationWrapperComponent = /** @class */ (function (_super) {
    __extends(FormlyValidationWrapperComponent, _super);
    function FormlyValidationWrapperComponent() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    FormlyValidationWrapperComponent.decorators = [
        { type: Component, args: [{
                    template: "\n    <ng-container #fieldComponent></ng-container>\n    <div *ngIf=\"showError\" class=\"usa-error-message\" [style.display]=\"'block'\">\n      <formly-validation-message [field]=\"field\"></formly-validation-message>\n    </div>\n  "
                }] }
    ];
    FormlyValidationWrapperComponent.propDecorators = {
        fieldComponent: [{ type: ViewChild, args: ['fieldComponent', { read: ViewContainerRef },] }]
    };
    return FormlyValidationWrapperComponent;
}(FieldWrapper));

/**
 * @param {string} [to.group] used to set the wrapper tupe
 * @param {string} [to.announceLabel] For screenreader
 * @param {string} [to.label] Text to be shown for the label
 * @param {string} [to.hideLabel] Hide the label
 *
 */
var FormlyGroupWrapperComponent = /** @class */ (function (_super) {
    __extends(FormlyGroupWrapperComponent, _super);
    function FormlyGroupWrapperComponent() {
        return _super.call(this) || this;
    }
    FormlyGroupWrapperComponent.prototype.modelHasValue = function () {
        if (this.to.hasOwnProperty('expand')) {
            return this.to.expand;
        }
        else {
            var hasValue = this.formControl.value instanceof Object
                ? stringify(this.formControl.value, { skipNulls: true })
                : this.formControl.value;
            return hasValue ? true : false;
        }
    };
    FormlyGroupWrapperComponent.decorators = [
        { type: Component, args: [{
                    template: "\n    <ng-container [ngSwitch]=\"to.group\">\n      <ng-container *ngSwitchCase=\"'accordion'\">\n        <sds-accordion multi=\"true\" displayMode=\"basic\">\n          <sds-accordion-item\n            class=\"sds-accordion__panel\"\n            [expanded]=\"modelHasValue()\"\n          >\n            <sds-accordion-item-header>\n              <span\n                *ngIf=\"!to.hideLabel\"\n                [attr.aria-hidden]=\"!to.announceLabel ? undefined : 'true'\"\n              >\n                {{ to.label }}\n              </span>\n            </sds-accordion-item-header>\n            <ng-container #fieldComponent></ng-container>\n          </sds-accordion-item>\n        </sds-accordion>\n      </ng-container>\n      <ng-container *ngSwitchCase=\"'panel'\">\n        <div\n          class=\"sds-panel\"\n          [ngClass]=\"{ 'sds-panel--multiple': field?.fieldGroup?.length }\"\n        >\n          <div\n            class=\"sds-panel__header\"\n            *ngIf=\"!to.hideLabel\"\n            [attr.aria-hidden]=\"!to.announceLabel ? undefined : 'true'\"\n          >\n            {{ to.label }}\n          </div>\n          <div class=\"sds-panel__body\">\n            <ng-container #fieldComponent></ng-container>\n          </div>\n        </div>\n      </ng-container>\n      <ng-container *ngSwitchDefault>\n        <ng-container #fieldComponent></ng-container>\n      </ng-container>\n    </ng-container>\n  "
                }] }
    ];
    /** @nocollapse */
    FormlyGroupWrapperComponent.ctorParameters = function () { return []; };
    FormlyGroupWrapperComponent.propDecorators = {
        fieldComponent: [{ type: ViewChild, args: ['fieldComponent', { read: ViewContainerRef },] }]
    };
    return FormlyGroupWrapperComponent;
}(FieldWrapper));

var FormlyFieldSearchComponent = /** @class */ (function (_super) {
    __extends(FormlyFieldSearchComponent, _super);
    function FormlyFieldSearchComponent(_cdr) {
        var _this = _super.call(this) || this;
        _this.cdr = _cdr;
        return _this;
    }
    FormlyFieldSearchComponent.decorators = [
        { type: Component, args: [{
                    selector: 'sds-formly-field-search',
                    template: "\n    <sds-search [formControl]=\"formControl\"></sds-search>\n    ",
                    changeDetection: ChangeDetectionStrategy.OnPush
                }] }
    ];
    /** @nocollapse */
    FormlyFieldSearchComponent.ctorParameters = function () { return [
        { type: ChangeDetectorRef }
    ]; };
    FormlyFieldSearchComponent.propDecorators = {
        template: [{ type: ViewChild, args: [SdsSearchComponent,] }]
    };
    return FormlyFieldSearchComponent;
}(AbstractSdsFormly));

var FIELD_TYPE_COMPONENTS = [
    FormlyFieldInputComponent,
    FormlyFieldCheckboxComponent,
    FormlyFieldRadioComponent,
    FormlyFieldSelectComponent,
    FormlyFieldTextAreaComponent,
    FormlyFieldMultiCheckboxComponent,
    FormlyWrapperFormFieldComponent,
    FormlyAccordianFormFieldComponent,
    FormlyFieldAutoCompleteComponent,
    FormlyFieldDatePickerComponent,
    FormlyFormFieldFilterWrapperComponent,
    FormlyFieldButtonComponent,
    FormlyCustomWrapperComponent,
    FormlyLabelWrapperComponent,
    FormlyDescriptionWrapperComponent,
    FormlyValidationWrapperComponent,
    FormlyFieldTextComponent,
    FormlyGroupWrapperComponent,
    FormlyFieldSearchComponent
];
var FORMLY_WRAPPERS = [
    {
        name: 'form-field',
        component: FormlyWrapperFormFieldComponent,
        componentName: 'FormlyWrapperFormFieldComponent'
    },
    {
        name: 'accordionwrapper',
        component: FormlyAccordianFormFieldComponent,
        componentName: 'FormlyAccordianFormFieldComponent'
    },
    {
        name: 'filterwrapper',
        component: FormlyFormFieldFilterWrapperComponent,
        componentName: 'FormlyFormFieldFilterWrapperComponent'
    },
    {
        name: 'label',
        component: FormlyLabelWrapperComponent,
        componentName: 'FormlyLabelWrapperComponent'
    },
    {
        name: 'description',
        component: FormlyDescriptionWrapperComponent,
        componentName: 'FormlyDescriptionWrapperComponent'
    },
    {
        name: 'validation',
        component: FormlyValidationWrapperComponent,
        componentName: 'FormlyValidationWrapperComponent'
    },
    {
        name: 'group',
        component: FormlyGroupWrapperComponent,
        componentName: 'FormlyGroupWrapperComponent'
    },
    {
        name: 'customwrapper',
        component: FormlyCustomWrapperComponent,
        componentName: 'FormlyCustomWrapperComponent'
    }
];
var FORMLY_CONFIG = {
    types: [
        {
            name: 'formly-group',
            wrappers: sdsGroupWrapper
        },
        {
            name: 'button',
            component: FormlyFieldButtonComponent
        },
        {
            name: 'customtext',
            component: FormlyFieldTextComponent,
            wrappers: sdsWrappers
        },
        {
            name: 'input',
            component: FormlyFieldInputComponent,
            wrappers: sdsWrappers
        },
        {
            name: 'checkbox',
            component: FormlyFieldCheckboxComponent,
            wrappers: sdsWrappers
        },
        {
            name: 'radio',
            component: FormlyFieldRadioComponent,
            wrappers: sdsWrappers
        },
        {
            name: 'select',
            component: FormlyFieldSelectComponent,
            wrappers: sdsWrappers
        },
        {
            name: 'textarea',
            component: FormlyFieldTextAreaComponent,
            wrappers: sdsWrappers
        },
        {
            name: 'multicheckbox',
            component: FormlyFieldMultiCheckboxComponent,
            wrappers: sdsWrappers
        },
        {
            name: 'autocomplete',
            component: FormlyFieldAutoCompleteComponent,
            wrappers: sdsWrappers
        },
        {
            name: 'datepicker',
            component: FormlyFieldDatePickerComponent,
            wrappers: sdsWrappers,
            defaultOptions: {
                validators: {
                    validation: [maxDateValidator, minDateValidator]
                }
            }
        },
        {
            name: 'daterangepicker',
            extends: 'formly-group',
            wrappers: sdsWrappers,
            defaultOptions: {
                fieldGroup: [
                    {
                        type: 'datepicker',
                        key: 'fromDate',
                        templateOptions: {
                            label: 'From'
                        },
                        expressionProperties: {
                            'templateOptions.minDate': minDateFromDateRangePicker,
                            'templateOptions.maxDate': maxDateFromDateRangePicker
                        }
                    },
                    {
                        type: 'datepicker',
                        key: 'toDate',
                        templateOptions: {
                            label: 'To'
                        },
                        expressionProperties: {
                            'templateOptions.minDate': minDateToDateRangePicker,
                            'templateOptions.maxDate': maxDateToDateRangePicker
                        }
                    }
                ]
            }
        },
        {
            name: 'search',
            component: FormlyFieldSearchComponent,
            wrappers: sdsWrappers
        }
    ],
    wrappers: [
        { name: 'label', component: FormlyLabelWrapperComponent },
        { name: 'description', component: FormlyDescriptionWrapperComponent },
        { name: 'validation', component: FormlyValidationWrapperComponent },
        { name: 'group', component: FormlyGroupWrapperComponent },
        { name: 'form-field', component: FormlyWrapperFormFieldComponent },
        { name: 'accordionwrapper', component: FormlyAccordianFormFieldComponent },
        { name: 'filterwrapper', component: FormlyFormFieldFilterWrapperComponent },
        { name: 'customwrapper', component: FormlyCustomWrapperComponent }
    ]
};
function minDateToDateRangePicker(model, formState, field) {
    var date = null;
    //Setting a minumn date for the date range picker
    if (field.parent.templateOptions.minDate) {
        date = new Date(field.parent.templateOptions.minDate.getTime());
    }
    if (model) {
        if (model.fromDate) {
            date = model.fromDate;
        }
    }
    return date;
}
function minDateFromDateRangePicker(model, formState, field) {
    var date = null;
    //Setting a minumn date for the date range picker
    if (field.parent.templateOptions.minDate) {
        date = new Date(field.parent.templateOptions.minDate.getTime());
    }
    return date;
}
function maxDateToDateRangePicker(model, formState, field) {
    var date = null;
    //Setting a max date for the date range picker
    if (field.parent.templateOptions.maxDate) {
        date = new Date(field.parent.templateOptions.maxDate.getTime());
    }
    return date;
}
function maxDateFromDateRangePicker(model, formState, field) {
    var date = null;
    //Setting a max date for the date range picker
    if (field.parent.templateOptions.maxDate) {
        date = new Date(field.parent.templateOptions.maxDate);
    }
    if (model) {
        if (model.toDate) {
            date = model.toDate;
        }
    }
    return date;
}

var SlideInOutAnimation = [
    trigger('slideInOut', [
        state('in', style({
            'max-height': '2000px', 'opacity': '1', 'visibility': 'visible',
        })),
        state('out', style({
            'max-height': '0px', 'opacity': '0', 'visibility': 'hidden',
        })),
        transition('in => out', [group([
                animate('400ms ease-in-out', style({
                    'opacity': '0',
                })),
                animate('600ms ease-in-out', style({
                    'max-height': '0px',
                })),
                animate('700ms ease-in-out', style({
                    'visibility': 'hidden',
                })),
            ])]),
        transition('out => in', [group([
                animate('1ms ease-in-out', style({
                    'visibility': 'visible',
                })),
                animate('600ms ease-in-out', style({
                    'max-height': '500px',
                })),
                animate('800ms ease-in-out', style({
                    'opacity': '1',
                })),
            ])]),
    ]),
];
var AnimationWrapperComponent = /** @class */ (function (_super) {
    __extends(AnimationWrapperComponent, _super);
    function AnimationWrapperComponent() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    AnimationWrapperComponent.decorators = [
        { type: Component, args: [{
                    selector: 'sam-formly-wrapper-animation',
                    template: "\n    <div [@slideInOut]=\"field.hide ? 'out' : 'in'\">\n      <ng-container #fieldComponent></ng-container>\n    </div>\n  ",
                    // styles: [`
                    //   ::ng-deep formly-field {
                    //     display: block !important;
                    //   }
                    // `],
                    animations: [SlideInOutAnimation]
                }] }
    ];
    return AnimationWrapperComponent;
}(FieldWrapper));

// Validate the min length of the character
function minlengthValidationMessage(err, field) {
    return "Should have atleast " + field.templateOptions.minLength + " characters";
}
// Validate the max length of the character
function maxlengthValidationMessage(err, field) {
    return "This value should be less than " + field.templateOptions.maxLength + " characters";
}
// Validate the min value of the character
function minValidationMessage(err, field) {
    return "This value should be more than " + field.templateOptions.min;
}
function minDateValidationMessage(err, field) {
    var dt = field.templateOptions.minDate;
    var dateFormat = (dt.getMonth() + 1) + "/" + dt.getDate() + "/" + dt.getFullYear();
    return "Date must be after " + dateFormat;
}
function maxDateValidationMessage(err, field) {
    var dt = field.templateOptions.maxDate;
    var dateFormat = (dt.getMonth() + 1) + "/" + dt.getDate() + "/" + dt.getFullYear();
    return "Date must be before " + dateFormat;
}
function betweenDateValidationMessage(err, field) {
    var dtnmax = field.templateOptions.maxDate;
    var dateMaxFormat = (dtnmax.getMonth() + 1) + "/" + dtnmax.getDate() + "/" + dtnmax.getFullYear();
    var dtmin = field.templateOptions.minDate;
    var dateMinFormat = (dtmin.getMonth() + 1) + "/" + dtmin.getDate() + "/" + dtmin.getFullYear();
    return "Date must be between " + dateMinFormat + " and " + dateMaxFormat + " ";
}
function invalidDateFormatValidationMessage(err, field) {
    return "Valid date format required (ex: MM/DD/YYYY)";
}
// Validate the max value of the character
function maxValidationMessage(err, field) {
    return "This value should be less than " + field.templateOptions.max;
}
function animationExtension(field) {
    if (field.wrappers && field.wrappers.includes('animation')) {
        return;
    }
    field.wrappers = __spread(['animation'], (field.wrappers || []));
}
var SdsFormlyModule = /** @class */ (function () {
    function SdsFormlyModule() {
    }
    SdsFormlyModule.forChild = function (config) {
        if (config === void 0) { config = {}; }
        return [{ ngModule: SdsFormlyModule, providers: [] }, FormlyModule.forChild(config)];
    };
    SdsFormlyModule.decorators = [
        { type: NgModule, args: [{
                    declarations: [
                        FIELD_TYPE_COMPONENTS,
                        AnimationWrapperComponent,
                    ],
                    imports: [
                        CommonModule,
                        SdsAccordionModule,
                        SdsAutocompleteModule,
                        SdsDialogModule,
                        SdsSearchModule,
                        SdsTextModule,
                        MatNativeDateModule,
                        MatDatepickerModule,
                        MatInputModule,
                        FontAwesomeModule,
                        ReactiveFormsModule,
                        FormlySelectModule,
                        FormlyModule.forChild(FORMLY_CONFIG),
                        FormlyModule.forRoot({
                            validationMessages: [
                                { name: 'required', message: 'This field is required' },
                                { name: 'minlength', message: minlengthValidationMessage },
                                { name: 'maxlength', message: maxlengthValidationMessage },
                                { name: 'min', message: minValidationMessage },
                                { name: 'max', message: maxValidationMessage },
                                { name: 'minDate', message: minDateValidationMessage },
                                { name: 'maxDate', message: maxDateValidationMessage },
                                { name: 'betweenDate', message: betweenDateValidationMessage },
                                { name: 'matDatepickerParse', message: invalidDateFormatValidationMessage } // Comes from the datepicker
                            ],
                            validators: [
                                { name: 'minDate', validation: minDateValidator },
                                { name: 'maxDate', validation: maxDateValidator }
                            ],
                            wrappers: [
                                { name: 'animation', component: AnimationWrapperComponent },
                            ],
                            extensions: [
                                { name: 'animation', extension: { onPopulate: animationExtension } },
                            ],
                        })
                    ]
                },] }
    ];
    return SdsFormlyModule;
}());

var SdsFormlyResetComponent = /** @class */ (function () {
    function SdsFormlyResetComponent() {
        /**
         * Pass in classes for reset button -- default .usa-button .usa-button--unstyled
         */
        this.classes = ['usa-button', 'usa-button--unstyled'];
    }
    SdsFormlyResetComponent.prototype.resetAll = function () {
        this.options.resetModel();
    };
    SdsFormlyResetComponent.decorators = [
        { type: Component, args: [{
                    selector: 'sds-formly-reset',
                    template: "<button (click)=\"resetAll()\" [ngClass]=\"classes\">\n  Reset All\n  <fa-icon [icon]=\"['sds', 'reset']\" [classes]=\"['icon-reset']\"></fa-icon>\n</button>\n",
                    styles: [".usa-button--unstyled{padding-right:0;width:initial;text-decoration:none;font-weight:600}.usa-button--unstyled:active,.usa-button--unstyled:hover{background:initial;color:initial;text-decoration:underline}"]
                }] }
    ];
    SdsFormlyResetComponent.propDecorators = {
        options: [{ type: Input }],
        classes: [{ type: Input }]
    };
    return SdsFormlyResetComponent;
}());

var SdsFormlyResetModule = /** @class */ (function () {
    function SdsFormlyResetModule() {
    }
    SdsFormlyResetModule.decorators = [
        { type: NgModule, args: [{
                    declarations: [SdsFormlyResetComponent],
                    imports: [
                        CommonModule,
                        FontAwesomeModule
                    ],
                    exports: [
                        SdsFormlyResetComponent
                    ]
                },] }
    ];
    return SdsFormlyResetModule;
}());

var SDSFormlyUpdateComunicationService = /** @class */ (function () {
    function SDSFormlyUpdateComunicationService() {
        /**
         * Filter update subject
         */
        this.updateFilterSource = new Subject();
        /**
         * Observable to subscribe to for get updates of the filter
         */
        this.filterUpdate = this.updateFilterSource.asObservable();
    }
    /**
     * Update the filter
     * @param filterData
     */
    SDSFormlyUpdateComunicationService.prototype.updateFilter = function (filterData) {
        this.updateFilterSource.next(filterData);
    };
    return SDSFormlyUpdateComunicationService;
}());

var SdsFiltersComponent = /** @class */ (function () {
    function SdsFiltersComponent(formlyUpdateComunicationService, cdr, router, route) {
        var _this = this;
        this.formlyUpdateComunicationService = formlyUpdateComunicationService;
        this.cdr = cdr;
        this.router = router;
        this.route = route;
        /**
         *    Options for the form.
         */
        this.options = {};
        /**
         *  Emit results when model updated
         * To enable History Tracking
         *  If advanced filters dialog should be displayed -- defaults to false
         */
        this.advancedFilters = false;
        /**
         * Timer id for the timer awaiting the service call for more typeing
         */
        this.isHistoryEnable = true;
        /**
         *  Emit results when model updated
         */
        // TODO: check type -- Formly models are typically objects
        this.filterChange = new EventEmitter();
        this.sdsFilterHistory = [];
        this._isObj = function (obj) { return typeof obj === 'object' && obj !== null; };
        this._isEmpty = function (obj) { return Object.keys(obj).length === 0; };
        this.overwrite = function (baseObj, newObj) {
            var result = {};
            for (var key in baseObj) {
                if (Array.isArray(baseObj[key])) {
                    result[key] = newObj[key];
                }
                else if (_this._isObj(baseObj[key])) {
                    result[key] = _this.overwrite(baseObj[key], newObj[key] || {});
                }
                else {
                    result[key] = newObj[key] || null;
                }
            }
            return result;
        };
        this.nullify = function (obj) {
            for (var key in obj) {
                if (_this._isObj(obj[key])) {
                    obj[key] = _this.nullify(obj[key]);
                }
                else {
                    obj[key] = null;
                }
            }
            return obj;
        };
    }
    SdsFiltersComponent.prototype.onpopstate = function () {
        var queryString = window.location.search;
        var urlParams = new URLSearchParams(queryString);
        var ref = urlParams.get('ref');
        var updatedFormValue = ref == null
            ? this.nullify(this.form.value)
            : JSON.parse(localStorage.getItem(ref));
        var updatedValue = this.overwrite(this.form.getRawValue(), updatedFormValue);
        this.form.setValue(updatedValue, { emitEvent: false });
        this.updateChange(updatedFormValue);
    };
    SdsFiltersComponent.prototype.ngOnInit = function () {
        var _this = this;
        if (this.isHistoryEnable) {
            var queryString = window.location.search;
            var urlParams = new URLSearchParams(queryString);
            var initialRef = urlParams.get('ref');
            if (initialRef) {
                var updatedFormValue_1 = JSON.parse(localStorage.getItem(initialRef));
                setTimeout(function () {
                    _this.model = __assign({}, _this.model, updatedFormValue_1);
                    _this.updateChange(updatedFormValue_1);
                    _this.cdr.detectChanges();
                }, 0);
            }
            else {
                this.updateChange(this.model);
                this.clearStorage();
            }
        }
        this.cdr.detectChanges();
    };
    SdsFiltersComponent.prototype.onModelChange = function (change) {
        if (this.isHistoryEnable) {
            var md5 = new Md5();
            var hashCode = md5.appendStr(stringify(change)).end();
            this.router.navigate([], {
                relativeTo: this.route,
                queryParams: { ref: hashCode },
                queryParamsHandling: 'merge'
            });
            this.addToStorageList(hashCode);
            localStorage.setItem(hashCode.toString(), JSON.stringify(change));
        }
        this.updateChange(change);
    };
    SdsFiltersComponent.prototype.updateChange = function (change) {
        this.filterChange.emit(change);
        if (this.formlyUpdateComunicationService) {
            this.formlyUpdateComunicationService.updateFilter(change);
        }
    };
    SdsFiltersComponent.prototype.addToStorageList = function (hashCode) {
        var list = JSON.parse(localStorage.getItem('sdsFilterHistory'));
        this.sdsFilterHistory = (list && list.length > 0) ? list : this.sdsFilterHistory;
        this.sdsFilterHistory.push(hashCode);
        localStorage.setItem('sdsFilterHistory', JSON.stringify(this.sdsFilterHistory));
    };
    SdsFiltersComponent.prototype.clearStorage = function () {
        var list = JSON.parse(localStorage.getItem('sdsFilterHistory'));
        if (list && list.length > 0) {
            var unique = list.filter(function (item, i, ar) { return ar.indexOf(item) === i; });
            unique.forEach(function (item) {
                localStorage.removeItem(item);
            });
        }
    };
    SdsFiltersComponent.decorators = [
        { type: Component, args: [{
                    selector: 'sds-filters',
                    template: "<formly-form [form]=\"form\" [fields]=\"fields\" [options]=\"options\" [model]=\"model\" (modelChange)=\"onModelChange($event)\">\n</formly-form>\n<div class=\"grid-row\">\n  <div *ngIf=\"advancedFilters\" class=\"grid-col\">\n    <sds-advanced-filters [form]=\"form\" [fields]=\"fields\" [options]=\"options\" [model]=\"model\">\n    </sds-advanced-filters>\n  </div>\n  <div class=\"grid-col text-right\">\n    <sds-formly-reset [options]=\"options\"></sds-formly-reset>\n  </div>\n</div>\n"
                }] }
    ];
    /** @nocollapse */
    SdsFiltersComponent.ctorParameters = function () { return [
        { type: SDSFormlyUpdateComunicationService, decorators: [{ type: Optional }] },
        { type: ChangeDetectorRef },
        { type: Router },
        { type: ActivatedRoute }
    ]; };
    SdsFiltersComponent.propDecorators = {
        form: [{ type: Input }],
        fields: [{ type: Input }],
        model: [{ type: Input }],
        options: [{ type: Input }],
        advancedFilters: [{ type: Input }],
        isHistoryEnable: [{ type: Input }],
        filterChange: [{ type: Output }],
        onpopstate: [{ type: HostListener, args: ['window:popstate', [''],] }]
    };
    return SdsFiltersComponent;
}());

var SdsAdvancedFiltersService = /** @class */ (function () {
    function SdsAdvancedFiltersService() {
    }
    SdsAdvancedFiltersService.prototype.convertToCheckboxes = function (origFields) {
        var _this = this;
        var fields = [];
        origFields.forEach(function (origField) {
            if (origField.fieldGroup && origField.fieldGroup.length > 1) {
                var field = _this.createMulticheckbox(origField);
                fields.push(field);
            }
            else {
                var field = {
                    type: 'checkbox',
                    key: origField.key,
                    defaultValue: !origField.hide,
                    templateOptions: {
                        hideOptional: true
                    }
                };
                if (origField.templateOptions && origField.templateOptions.label) {
                    field.templateOptions.label = origField.templateOptions.label;
                }
                fields.push(field);
            }
        });
        return fields;
    };
    // TODO: Should be changed so option has label field instead of key but multicheckbox field type must be updated so default value still works
    SdsAdvancedFiltersService.prototype.createMulticheckbox = function (origField) {
        var options = [];
        var defaultValue = [];
        origField.fieldGroup.forEach(function (field) {
            var label = field.templateOptions && field.templateOptions.label ? field.templateOptions.label : null;
            var option = {
                key: field.key,
                value: label
            };
            options.push(option);
            if (!origField.hide && !field.hide) {
                defaultValue.push(field.key);
            }
        });
        var field = {
            key: origField.key,
            type: 'multicheckbox',
            templateOptions: {
                hideOptional: true,
                type: 'array',
                options: options
            }
        };
        if (origField.templateOptions && origField.templateOptions.label) {
            field.templateOptions.label = origField.templateOptions.label;
        }
        if (!origField.hide) {
            field.defaultValue = defaultValue;
        }
        return field;
    };
    SdsAdvancedFiltersService.prototype.updateFields = function (selectedFields, fields, model) {
        var _this = this;
        fields.forEach(function (field) {
            var key = field.key;
            var selectedField = selectedFields[key];
            if (field.fieldGroup && field.fieldGroup.length > 1) {
                var fieldModel = model[key];
                _this.updateFieldGroup(field, selectedField, fieldModel);
            }
            else {
                _this.updateSingleField(field, selectedField, model);
            }
        });
        return {
            fields: fields,
            model: model
        };
    };
    SdsAdvancedFiltersService.prototype.updateFieldGroup = function (parentField, selectedFields, model) {
        var _this = this;
        if (selectedFields && selectedFields.length) {
            parentField.hide = false;
            parentField.fieldGroup.forEach(function (field) {
                var key = field.key;
                var fieldSelected = selectedFields.includes(key);
                _this.updateSingleField(field, fieldSelected, model);
            });
        }
        else {
            parentField.hide = true;
            parentField.fieldGroup.forEach(function (field) {
                _this.updateSingleField(field, false, model);
            });
        }
    };
    SdsAdvancedFiltersService.prototype.updateSingleField = function (field, fieldSelected, model) {
        if (fieldSelected) {
            field.hide = false;
        }
        else {
            field.hide = true;
            field.templateOptions['required'] = false;
            model[field.key] = null;
        }
    };
    SdsAdvancedFiltersService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    SdsAdvancedFiltersService.ctorParameters = function () { return []; };
    SdsAdvancedFiltersService.ngInjectableDef = defineInjectable({ factory: function SdsAdvancedFiltersService_Factory() { return new SdsAdvancedFiltersService(); }, token: SdsAdvancedFiltersService, providedIn: "root" });
    return SdsAdvancedFiltersService;
}());

var SdsFormlyDialogComponent = /** @class */ (function () {
    function SdsFormlyDialogComponent(advancedFiltersService, dialogRef, data) {
        this.advancedFiltersService = advancedFiltersService;
        this.dialogRef = dialogRef;
        this.data = data;
    }
    SdsFormlyDialogComponent.prototype.ngOnInit = function () {
        this.fields = this.data.fields;
        this.form = this.data.form ? this.data.form : new FormGroup({});
        this.model = this.data.model ? this.data.model : {};
        this.options = this.data.options ? this.data.options : {};
        this.cancel = this.data.cancel ? this.data.cancel : 'Cancel';
        this.submit = this.data.submit ? this.data.submit : 'Submit';
    };
    SdsFormlyDialogComponent.prototype.onSubmit = function () {
        if (this.form.valid) {
            var results = this.advancedFiltersService.updateFields(this.model, this.data.originalFields, this.data.originalModel);
            this.dialogRef.close(results);
        }
    };
    SdsFormlyDialogComponent.prototype.onCancel = function () {
        this.dialogRef.close();
    };
    SdsFormlyDialogComponent.decorators = [
        { type: Component, args: [{
                    selector: 'sds-formly-dialog',
                    template: "<form [formGroup]=\"form\" (ngSubmit)=\"onSubmit()\">\n  <div *ngIf=\"data.title\" sds-dialog-title>{{data.title}}</div>\n  <div *ngIf=\"data.subtitle\" sds-dialog-subtitle>{{data.subtitle}}</div>\n  <div sds-dialog-content>\n    <formly-form [form]=\"form\" [fields]=\"fields\" [options]=\"options\" [model]=\"model\"></formly-form>\n  </div>\n  <div sds-dialog-actions>\n    <button class=\"usa-button usa-button--base\" (click)=\"onCancel()\" type=\"button\">\n      {{cancel}}\n    </button>\n    <button class=\"usa-button\" type=\"submit\">\n      {{submit}}\n    </button>\n  </div>\n</form>\n"
                }] }
    ];
    /** @nocollapse */
    SdsFormlyDialogComponent.ctorParameters = function () { return [
        { type: SdsAdvancedFiltersService },
        { type: SdsDialogRef },
        { type: undefined, decorators: [{ type: Inject, args: [SDS_DIALOG_DATA,] }] }
    ]; };
    return SdsFormlyDialogComponent;
}());

var AdvancedFiltersComponent = /** @class */ (function () {
    function AdvancedFiltersComponent(dialog, advancedFiltersService) {
        this.dialog = dialog;
        this.advancedFiltersService = advancedFiltersService;
        /**
         *    Options for the form.
         */
        this.options = {};
    }
    AdvancedFiltersComponent.prototype.openDialog = function () {
        var _this = this;
        var modalFields = this.advancedFiltersService.convertToCheckboxes(this.fields);
        var data = {
            fields: modalFields,
            originalFields: this.fields,
            originalModel: this.model,
            submit: 'Update',
            title: 'More Filters',
        };
        var dialogRef = this.dialog.open(SdsFormlyDialogComponent, {
            width: 'medium',
            data: data
        });
        dialogRef.afterClosed().subscribe(function (result) {
            if (result) {
                _this.fields = result.fields;
                _this.model = result.model;
            }
        });
    };
    AdvancedFiltersComponent.decorators = [
        { type: Component, args: [{
                    selector: 'sds-advanced-filters',
                    template: "<button type=\"button\" (click)=\"openDialog()\" class=\"usa-button usa-button--unstyled\">More\n  Filters\n  <fa-icon [icon]=\"['sds', 'filter']\" [classes]=\"['icon-filter']\"></fa-icon>\n</button>\n",
                    styles: [".usa-button--unstyled{padding-left:0;width:initial;text-decoration:none;font-weight:600}.usa-button--unstyled:active,.usa-button--unstyled:hover{background:initial;color:initial;text-decoration:underline}"]
                }] }
    ];
    /** @nocollapse */
    AdvancedFiltersComponent.ctorParameters = function () { return [
        { type: SdsDialogService },
        { type: SdsAdvancedFiltersService }
    ]; };
    AdvancedFiltersComponent.propDecorators = {
        form: [{ type: Input }],
        fields: [{ type: Input }],
        model: [{ type: Input }],
        options: [{ type: Input }]
    };
    return AdvancedFiltersComponent;
}());

var SdsFiltersModule = /** @class */ (function () {
    function SdsFiltersModule() {
    }
    SdsFiltersModule.decorators = [
        { type: NgModule, args: [{
                    declarations: [
                        SdsFiltersComponent,
                        AdvancedFiltersComponent,
                    ],
                    imports: [
                        CommonModule,
                        FormsModule,
                        SdsAccordionModule,
                        SdsFormlyModule,
                        SdsFormlyResetModule,
                        FontAwesomeModule,
                        ReactiveFormsModule,
                        FormlySelectModule,
                        FormlyModule
                    ],
                    exports: [SdsFiltersComponent]
                },] }
    ];
    return SdsFiltersModule;
}());

var SdsFormlyDialogModule = /** @class */ (function () {
    function SdsFormlyDialogModule() {
    }
    SdsFormlyDialogModule.decorators = [
        { type: NgModule, args: [{
                    declarations: [SdsFormlyDialogComponent],
                    imports: [
                        CommonModule,
                        SdsFiltersModule,
                        SdsDialogModule,
                        ReactiveFormsModule,
                        SdsFormlyModule,
                        FormlyModule,
                        FormsModule
                    ],
                    entryComponents: [SdsFormlyDialogComponent],
                    exports: [SdsFormlyDialogComponent]
                },] }
    ];
    return SdsFormlyDialogModule;
}());

/**
 * Generated bundle index. Do not edit.
 */

export { AdvancedFiltersComponent as ɵw, SdsFiltersComponent as ɵv, SdsFormlyResetComponent as ɵu, FormlyFieldAutoCompleteComponent as ɵi, FormlyFieldButtonComponent as ɵl, FormlyFieldCheckboxComponent as ɵb, FormlyFieldDatePickerComponent as ɵj, FormlyFieldInputComponent as ɵa, FormlyFieldMultiCheckboxComponent as ɵf, FormlyFieldRadioComponent as ɵc, FormlyFieldSearchComponent as ɵs, FormlyFieldSelectComponent as ɵd, FormlyFieldTextComponent as ɵq, FormlyFieldTextAreaComponent as ɵe, FormlyCustomWrapperComponent as ɵm, FormlyDescriptionWrapperComponent as ɵo, FormlyAccordianFormFieldComponent as ɵh, AnimationWrapperComponent as ɵt, FormlyFormFieldFilterWrapperComponent as ɵk, FormlyWrapperFormFieldComponent as ɵg, FormlyGroupWrapperComponent as ɵr, FormlyLabelWrapperComponent as ɵn, FormlyValidationWrapperComponent as ɵp, minlengthValidationMessage, maxlengthValidationMessage, minValidationMessage, minDateValidationMessage, maxDateValidationMessage, betweenDateValidationMessage, invalidDateFormatValidationMessage, maxValidationMessage, animationExtension, SdsFormlyModule, maxDateValidator, minDateValidator, SdsFormlyResetModule, SdsFiltersModule, SdsFormlyDialogComponent, SdsFormlyDialogModule, SDSFormlyUpdateComunicationService, SdsAdvancedFiltersService, sdsFieldWrapper, sdsGroupWrapper, sdsWrappers, FIELD_TYPE_COMPONENTS, FORMLY_WRAPPERS, FORMLY_CONFIG, minDateToDateRangePicker, minDateFromDateRangePicker, maxDateToDateRangePicker, maxDateFromDateRangePicker, AbstractSdsFormly };

//# sourceMappingURL=gsa-sam-sam-formly.js.map