import { Component, Input, Output, EventEmitter, Optional, HostListener, ChangeDetectorRef } from '@angular/core';
import { FormGroup } from '@angular/forms';
import { Router, ActivatedRoute } from '@angular/router';
import * as qs from 'qs';
import { Md5 } from 'ts-md5/dist/md5';
import { SDSFormlyUpdateComunicationService } from './service/sds-filters-comunication.service';
export class SdsFiltersComponent {
    constructor(formlyUpdateComunicationService, cdr, router, route) {
        this.formlyUpdateComunicationService = formlyUpdateComunicationService;
        this.cdr = cdr;
        this.router = router;
        this.route = route;
        /**
         *    Options for the form.
         */
        this.options = {};
        /**
         *  Emit results when model updated
         * To enable History Tracking
         *  If advanced filters dialog should be displayed -- defaults to false
         */
        this.advancedFilters = false;
        /**
         * Timer id for the timer awaiting the service call for more typeing
         */
        this.isHistoryEnable = true;
        /**
         *  Emit results when model updated
         */
        // TODO: check type -- Formly models are typically objects
        this.filterChange = new EventEmitter();
        this.sdsFilterHistory = [];
        this._isObj = (obj) => typeof obj === 'object' && obj !== null;
        this._isEmpty = (obj) => Object.keys(obj).length === 0;
        this.overwrite = (baseObj, newObj) => {
            let result = {};
            for (let key in baseObj) {
                if (Array.isArray(baseObj[key])) {
                    result[key] = newObj[key];
                }
                else if (this._isObj(baseObj[key])) {
                    result[key] = this.overwrite(baseObj[key], newObj[key] || {});
                }
                else {
                    result[key] = newObj[key] || null;
                }
            }
            return result;
        };
        this.nullify = (obj) => {
            for (let key in obj) {
                if (this._isObj(obj[key])) {
                    obj[key] = this.nullify(obj[key]);
                }
                else {
                    obj[key] = null;
                }
            }
            return obj;
        };
    }
    onpopstate() {
        const queryString = window.location.search;
        const urlParams = new URLSearchParams(queryString);
        const ref = urlParams.get('ref');
        const updatedFormValue = ref == null
            ? this.nullify(this.form.value)
            : JSON.parse(localStorage.getItem(ref));
        const updatedValue = this.overwrite(this.form.getRawValue(), updatedFormValue);
        this.form.setValue(updatedValue, { emitEvent: false });
        this.updateChange(updatedFormValue);
    }
    ngOnInit() {
        if (this.isHistoryEnable) {
            const queryString = window.location.search;
            const urlParams = new URLSearchParams(queryString);
            const initialRef = urlParams.get('ref');
            if (initialRef) {
                const updatedFormValue = JSON.parse(localStorage.getItem(initialRef));
                setTimeout(() => {
                    this.model = Object.assign({}, this.model, updatedFormValue);
                    this.updateChange(updatedFormValue);
                    this.cdr.detectChanges();
                }, 0);
            }
            else {
                this.updateChange(this.model);
                this.clearStorage();
            }
        }
        this.cdr.detectChanges();
    }
    onModelChange(change) {
        if (this.isHistoryEnable) {
            const md5 = new Md5();
            const hashCode = md5.appendStr(qs.stringify(change)).end();
            this.router.navigate([], {
                relativeTo: this.route,
                queryParams: { ref: hashCode },
                queryParamsHandling: 'merge'
            });
            this.addToStorageList(hashCode);
            localStorage.setItem(hashCode.toString(), JSON.stringify(change));
        }
        this.updateChange(change);
    }
    updateChange(change) {
        this.filterChange.emit(change);
        if (this.formlyUpdateComunicationService) {
            this.formlyUpdateComunicationService.updateFilter(change);
        }
    }
    addToStorageList(hashCode) {
        const list = JSON.parse(localStorage.getItem('sdsFilterHistory'));
        this.sdsFilterHistory = (list && list.length > 0) ? list : this.sdsFilterHistory;
        this.sdsFilterHistory.push(hashCode);
        localStorage.setItem('sdsFilterHistory', JSON.stringify(this.sdsFilterHistory));
    }
    clearStorage() {
        const list = JSON.parse(localStorage.getItem('sdsFilterHistory'));
        if (list && list.length > 0) {
            const unique = list.filter((item, i, ar) => ar.indexOf(item) === i);
            unique.forEach(item => {
                localStorage.removeItem(item);
            });
        }
    }
}
SdsFiltersComponent.decorators = [
    { type: Component, args: [{
                selector: 'sds-filters',
                template: "<formly-form [form]=\"form\" [fields]=\"fields\" [options]=\"options\" [model]=\"model\" (modelChange)=\"onModelChange($event)\">\n</formly-form>\n<div class=\"grid-row\">\n  <div *ngIf=\"advancedFilters\" class=\"grid-col\">\n    <sds-advanced-filters [form]=\"form\" [fields]=\"fields\" [options]=\"options\" [model]=\"model\">\n    </sds-advanced-filters>\n  </div>\n  <div class=\"grid-col text-right\">\n    <sds-formly-reset [options]=\"options\"></sds-formly-reset>\n  </div>\n</div>\n"
            }] }
];
/** @nocollapse */
SdsFiltersComponent.ctorParameters = () => [
    { type: SDSFormlyUpdateComunicationService, decorators: [{ type: Optional }] },
    { type: ChangeDetectorRef },
    { type: Router },
    { type: ActivatedRoute }
];
SdsFiltersComponent.propDecorators = {
    form: [{ type: Input }],
    fields: [{ type: Input }],
    model: [{ type: Input }],
    options: [{ type: Input }],
    advancedFilters: [{ type: Input }],
    isHistoryEnable: [{ type: Input }],
    filterChange: [{ type: Output }],
    onpopstate: [{ type: HostListener, args: ['window:popstate', [''],] }]
};
//# sourceMappingURL=data:application/json;base64,