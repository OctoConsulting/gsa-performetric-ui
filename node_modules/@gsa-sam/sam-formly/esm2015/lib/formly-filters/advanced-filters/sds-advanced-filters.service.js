import { Injectable } from '@angular/core';
import * as i0 from "@angular/core";
export class SdsAdvancedFiltersService {
    constructor() { }
    convertToCheckboxes(origFields) {
        const fields = [];
        origFields.forEach(origField => {
            if (origField.fieldGroup && origField.fieldGroup.length > 1) {
                const field = this.createMulticheckbox(origField);
                fields.push(field);
            }
            else {
                const field = {
                    type: 'checkbox',
                    key: origField.key,
                    defaultValue: !origField.hide,
                    templateOptions: {
                        hideOptional: true
                    }
                };
                if (origField.templateOptions && origField.templateOptions.label) {
                    field.templateOptions.label = origField.templateOptions.label;
                }
                fields.push(field);
            }
        });
        return fields;
    }
    // TODO: Should be changed so option has label field instead of key but multicheckbox field type must be updated so default value still works
    createMulticheckbox(origField) {
        const options = [];
        const defaultValue = [];
        origField.fieldGroup.forEach(field => {
            const label = field.templateOptions && field.templateOptions.label ? field.templateOptions.label : null;
            const option = {
                key: field.key,
                value: label
            };
            options.push(option);
            if (!origField.hide && !field.hide) {
                defaultValue.push(field.key);
            }
        });
        const field = {
            key: origField.key,
            type: 'multicheckbox',
            templateOptions: {
                hideOptional: true,
                type: 'array',
                options: options
            }
        };
        if (origField.templateOptions && origField.templateOptions.label) {
            field.templateOptions.label = origField.templateOptions.label;
        }
        if (!origField.hide) {
            field.defaultValue = defaultValue;
        }
        return field;
    }
    updateFields(selectedFields, fields, model) {
        fields.forEach((field) => {
            const key = field.key;
            const selectedField = selectedFields[key];
            if (field.fieldGroup && field.fieldGroup.length > 1) {
                const fieldModel = model[key];
                this.updateFieldGroup(field, selectedField, fieldModel);
            }
            else {
                this.updateSingleField(field, selectedField, model);
            }
        });
        return {
            fields: fields,
            model: model
        };
    }
    updateFieldGroup(parentField, selectedFields, model) {
        if (selectedFields && selectedFields.length) {
            parentField.hide = false;
            parentField.fieldGroup.forEach(field => {
                const key = field.key;
                const fieldSelected = selectedFields.includes(key);
                this.updateSingleField(field, fieldSelected, model);
            });
        }
        else {
            parentField.hide = true;
            parentField.fieldGroup.forEach(field => {
                this.updateSingleField(field, false, model);
            });
        }
    }
    updateSingleField(field, fieldSelected, model) {
        if (fieldSelected) {
            field.hide = false;
        }
        else {
            field.hide = true;
            field.templateOptions['required'] = false;
            model[field.key] = null;
        }
    }
}
SdsAdvancedFiltersService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
SdsAdvancedFiltersService.ctorParameters = () => [];
SdsAdvancedFiltersService.ngInjectableDef = i0.defineInjectable({ factory: function SdsAdvancedFiltersService_Factory() { return new SdsAdvancedFiltersService(); }, token: SdsAdvancedFiltersService, providedIn: "root" });
//# sourceMappingURL=data:application/json;base64,