import { Component, ViewChild, ViewContainerRef } from '@angular/core';
import { FieldWrapper } from '@ngx-formly/core';
import * as qs from 'qs';
/**
 * @param {string} [to.group] used to set the wrapper tupe
 * @param {string} [to.announceLabel] For screenreader
 * @param {string} [to.label] Text to be shown for the label
 * @param {string} [to.hideLabel] Hide the label
 *
 */
export class FormlyGroupWrapperComponent extends FieldWrapper {
    constructor() {
        super();
    }
    modelHasValue() {
        if (this.to.hasOwnProperty('expand')) {
            return this.to.expand;
        }
        else {
            const hasValue = this.formControl.value instanceof Object
                ? qs.stringify(this.formControl.value, { skipNulls: true })
                : this.formControl.value;
            return hasValue ? true : false;
        }
    }
}
FormlyGroupWrapperComponent.decorators = [
    { type: Component, args: [{
                template: `
    <ng-container [ngSwitch]="to.group">
      <ng-container *ngSwitchCase="'accordion'">
        <sds-accordion multi="true" displayMode="basic">
          <sds-accordion-item
            class="sds-accordion__panel"
            [expanded]="modelHasValue()"
          >
            <sds-accordion-item-header>
              <span
                *ngIf="!to.hideLabel"
                [attr.aria-hidden]="!to.announceLabel ? undefined : 'true'"
              >
                {{ to.label }}
              </span>
            </sds-accordion-item-header>
            <ng-container #fieldComponent></ng-container>
          </sds-accordion-item>
        </sds-accordion>
      </ng-container>
      <ng-container *ngSwitchCase="'panel'">
        <div
          class="sds-panel"
          [ngClass]="{ 'sds-panel--multiple': field?.fieldGroup?.length }"
        >
          <div
            class="sds-panel__header"
            *ngIf="!to.hideLabel"
            [attr.aria-hidden]="!to.announceLabel ? undefined : 'true'"
          >
            {{ to.label }}
          </div>
          <div class="sds-panel__body">
            <ng-container #fieldComponent></ng-container>
          </div>
        </div>
      </ng-container>
      <ng-container *ngSwitchDefault>
        <ng-container #fieldComponent></ng-container>
      </ng-container>
    </ng-container>
  `
            }] }
];
/** @nocollapse */
FormlyGroupWrapperComponent.ctorParameters = () => [];
FormlyGroupWrapperComponent.propDecorators = {
    fieldComponent: [{ type: ViewChild, args: ['fieldComponent', { read: ViewContainerRef },] }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3JvdXAud3JhcHBlci5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Bnc2Etc2FtL3NhbS1mb3JtbHkvIiwic291cmNlcyI6WyJsaWIvZm9ybWx5L3dyYXBwZXJzL2dyb3VwLndyYXBwZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxTQUFTLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDdkUsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBQ2hELE9BQU8sS0FBSyxFQUFFLE1BQU0sSUFBSSxDQUFDO0FBRXpCOzs7Ozs7R0FNRztBQTZDSCxNQUFNLE9BQU8sMkJBQTRCLFNBQVEsWUFBWTtJQUczRDtRQUNFLEtBQUssRUFBRSxDQUFDO0lBQ1YsQ0FBQztJQUNELGFBQWE7UUFDWCxJQUFJLElBQUksQ0FBQyxFQUFFLENBQUMsY0FBYyxDQUFDLFFBQVEsQ0FBQyxFQUFFO1lBQ3BDLE9BQU8sSUFBSSxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUM7U0FDdkI7YUFBTTtZQUNMLE1BQU0sUUFBUSxHQUNaLElBQUksQ0FBQyxXQUFXLENBQUMsS0FBSyxZQUFZLE1BQU07Z0JBQ3RDLENBQUMsQ0FBQyxFQUFFLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsS0FBSyxFQUFFLEVBQUUsU0FBUyxFQUFFLElBQUksRUFBRSxDQUFDO2dCQUMzRCxDQUFDLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUM7WUFDN0IsT0FBTyxRQUFRLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDO1NBQ2hDO0lBQ0gsQ0FBQzs7O1lBNURGLFNBQVMsU0FBQztnQkFDVCxRQUFRLEVBQUU7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0dBeUNUO2FBQ0Y7Ozs7OzZCQUVFLFNBQVMsU0FBQyxnQkFBZ0IsRUFBRSxFQUFFLElBQUksRUFBRSxnQkFBZ0IsRUFBRSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgVmlld0NoaWxkLCBWaWV3Q29udGFpbmVyUmVmIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBGaWVsZFdyYXBwZXIgfSBmcm9tICdAbmd4LWZvcm1seS9jb3JlJztcbmltcG9ydCAqIGFzIHFzIGZyb20gJ3FzJztcblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gW3RvLmdyb3VwXSB1c2VkIHRvIHNldCB0aGUgd3JhcHBlciB0dXBlXG4gKiBAcGFyYW0ge3N0cmluZ30gW3RvLmFubm91bmNlTGFiZWxdIEZvciBzY3JlZW5yZWFkZXJcbiAqIEBwYXJhbSB7c3RyaW5nfSBbdG8ubGFiZWxdIFRleHQgdG8gYmUgc2hvd24gZm9yIHRoZSBsYWJlbFxuICogQHBhcmFtIHtzdHJpbmd9IFt0by5oaWRlTGFiZWxdIEhpZGUgdGhlIGxhYmVsXG4gKiBcbiAqL1xuQENvbXBvbmVudCh7XG4gIHRlbXBsYXRlOiBgXG4gICAgPG5nLWNvbnRhaW5lciBbbmdTd2l0Y2hdPVwidG8uZ3JvdXBcIj5cbiAgICAgIDxuZy1jb250YWluZXIgKm5nU3dpdGNoQ2FzZT1cIidhY2NvcmRpb24nXCI+XG4gICAgICAgIDxzZHMtYWNjb3JkaW9uIG11bHRpPVwidHJ1ZVwiIGRpc3BsYXlNb2RlPVwiYmFzaWNcIj5cbiAgICAgICAgICA8c2RzLWFjY29yZGlvbi1pdGVtXG4gICAgICAgICAgICBjbGFzcz1cInNkcy1hY2NvcmRpb25fX3BhbmVsXCJcbiAgICAgICAgICAgIFtleHBhbmRlZF09XCJtb2RlbEhhc1ZhbHVlKClcIlxuICAgICAgICAgID5cbiAgICAgICAgICAgIDxzZHMtYWNjb3JkaW9uLWl0ZW0taGVhZGVyPlxuICAgICAgICAgICAgICA8c3BhblxuICAgICAgICAgICAgICAgICpuZ0lmPVwiIXRvLmhpZGVMYWJlbFwiXG4gICAgICAgICAgICAgICAgW2F0dHIuYXJpYS1oaWRkZW5dPVwiIXRvLmFubm91bmNlTGFiZWwgPyB1bmRlZmluZWQgOiAndHJ1ZSdcIlxuICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAge3sgdG8ubGFiZWwgfX1cbiAgICAgICAgICAgICAgPC9zcGFuPlxuICAgICAgICAgICAgPC9zZHMtYWNjb3JkaW9uLWl0ZW0taGVhZGVyPlxuICAgICAgICAgICAgPG5nLWNvbnRhaW5lciAjZmllbGRDb21wb25lbnQ+PC9uZy1jb250YWluZXI+XG4gICAgICAgICAgPC9zZHMtYWNjb3JkaW9uLWl0ZW0+XG4gICAgICAgIDwvc2RzLWFjY29yZGlvbj5cbiAgICAgIDwvbmctY29udGFpbmVyPlxuICAgICAgPG5nLWNvbnRhaW5lciAqbmdTd2l0Y2hDYXNlPVwiJ3BhbmVsJ1wiPlxuICAgICAgICA8ZGl2XG4gICAgICAgICAgY2xhc3M9XCJzZHMtcGFuZWxcIlxuICAgICAgICAgIFtuZ0NsYXNzXT1cInsgJ3Nkcy1wYW5lbC0tbXVsdGlwbGUnOiBmaWVsZD8uZmllbGRHcm91cD8ubGVuZ3RoIH1cIlxuICAgICAgICA+XG4gICAgICAgICAgPGRpdlxuICAgICAgICAgICAgY2xhc3M9XCJzZHMtcGFuZWxfX2hlYWRlclwiXG4gICAgICAgICAgICAqbmdJZj1cIiF0by5oaWRlTGFiZWxcIlxuICAgICAgICAgICAgW2F0dHIuYXJpYS1oaWRkZW5dPVwiIXRvLmFubm91bmNlTGFiZWwgPyB1bmRlZmluZWQgOiAndHJ1ZSdcIlxuICAgICAgICAgID5cbiAgICAgICAgICAgIHt7IHRvLmxhYmVsIH19XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPGRpdiBjbGFzcz1cInNkcy1wYW5lbF9fYm9keVwiPlxuICAgICAgICAgICAgPG5nLWNvbnRhaW5lciAjZmllbGRDb21wb25lbnQ+PC9uZy1jb250YWluZXI+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9uZy1jb250YWluZXI+XG4gICAgICA8bmctY29udGFpbmVyICpuZ1N3aXRjaERlZmF1bHQ+XG4gICAgICAgIDxuZy1jb250YWluZXIgI2ZpZWxkQ29tcG9uZW50PjwvbmctY29udGFpbmVyPlxuICAgICAgPC9uZy1jb250YWluZXI+XG4gICAgPC9uZy1jb250YWluZXI+XG4gIGBcbn0pXG5leHBvcnQgY2xhc3MgRm9ybWx5R3JvdXBXcmFwcGVyQ29tcG9uZW50IGV4dGVuZHMgRmllbGRXcmFwcGVyIHtcbiAgQFZpZXdDaGlsZCgnZmllbGRDb21wb25lbnQnLCB7IHJlYWQ6IFZpZXdDb250YWluZXJSZWYgfSlcbiAgZmllbGRDb21wb25lbnQ6IFZpZXdDb250YWluZXJSZWY7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKCk7XG4gIH1cbiAgbW9kZWxIYXNWYWx1ZSgpIHtcbiAgICBpZiAodGhpcy50by5oYXNPd25Qcm9wZXJ0eSgnZXhwYW5kJykpIHtcbiAgICAgIHJldHVybiB0aGlzLnRvLmV4cGFuZDtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3QgaGFzVmFsdWUgPVxuICAgICAgICB0aGlzLmZvcm1Db250cm9sLnZhbHVlIGluc3RhbmNlb2YgT2JqZWN0XG4gICAgICAgICAgPyBxcy5zdHJpbmdpZnkodGhpcy5mb3JtQ29udHJvbC52YWx1ZSwgeyBza2lwTnVsbHM6IHRydWUgfSlcbiAgICAgICAgICA6IHRoaXMuZm9ybUNvbnRyb2wudmFsdWU7XG4gICAgICByZXR1cm4gaGFzVmFsdWUgPyB0cnVlIDogZmFsc2U7XG4gICAgfVxuICB9XG59XG4iXX0=