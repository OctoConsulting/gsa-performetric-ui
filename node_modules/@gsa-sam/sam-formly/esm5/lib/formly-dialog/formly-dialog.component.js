import { Component, Inject } from '@angular/core';
import { FormGroup } from '@angular/forms';
import { SdsDialogRef, SDS_DIALOG_DATA } from '@gsa-sam/components';
import { SdsAdvancedFiltersService } from '../formly-filters/advanced-filters/sds-advanced-filters.service';
var SdsFormlyDialogComponent = /** @class */ (function () {
    function SdsFormlyDialogComponent(advancedFiltersService, dialogRef, data) {
        this.advancedFiltersService = advancedFiltersService;
        this.dialogRef = dialogRef;
        this.data = data;
    }
    SdsFormlyDialogComponent.prototype.ngOnInit = function () {
        this.fields = this.data.fields;
        this.form = this.data.form ? this.data.form : new FormGroup({});
        this.model = this.data.model ? this.data.model : {};
        this.options = this.data.options ? this.data.options : {};
        this.cancel = this.data.cancel ? this.data.cancel : 'Cancel';
        this.submit = this.data.submit ? this.data.submit : 'Submit';
    };
    SdsFormlyDialogComponent.prototype.onSubmit = function () {
        if (this.form.valid) {
            var results = this.advancedFiltersService.updateFields(this.model, this.data.originalFields, this.data.originalModel);
            this.dialogRef.close(results);
        }
    };
    SdsFormlyDialogComponent.prototype.onCancel = function () {
        this.dialogRef.close();
    };
    SdsFormlyDialogComponent.decorators = [
        { type: Component, args: [{
                    selector: 'sds-formly-dialog',
                    template: "<form [formGroup]=\"form\" (ngSubmit)=\"onSubmit()\">\n  <div *ngIf=\"data.title\" sds-dialog-title>{{data.title}}</div>\n  <div *ngIf=\"data.subtitle\" sds-dialog-subtitle>{{data.subtitle}}</div>\n  <div sds-dialog-content>\n    <formly-form [form]=\"form\" [fields]=\"fields\" [options]=\"options\" [model]=\"model\"></formly-form>\n  </div>\n  <div sds-dialog-actions>\n    <button class=\"usa-button usa-button--base\" (click)=\"onCancel()\" type=\"button\">\n      {{cancel}}\n    </button>\n    <button class=\"usa-button\" type=\"submit\">\n      {{submit}}\n    </button>\n  </div>\n</form>\n"
                }] }
    ];
    /** @nocollapse */
    SdsFormlyDialogComponent.ctorParameters = function () { return [
        { type: SdsAdvancedFiltersService },
        { type: SdsDialogRef },
        { type: undefined, decorators: [{ type: Inject, args: [SDS_DIALOG_DATA,] }] }
    ]; };
    return SdsFormlyDialogComponent;
}());
export { SdsFormlyDialogComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9ybWx5LWRpYWxvZy5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZ3NhLXNhbS9zYW0tZm9ybWx5LyIsInNvdXJjZXMiOlsibGliL2Zvcm1seS1kaWFsb2cvZm9ybWx5LWRpYWxvZy5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLEVBQVUsTUFBTSxlQUFlLENBQUM7QUFFMUQsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQzNDLE9BQU8sRUFBRSxZQUFZLEVBQUUsZUFBZSxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFHcEUsT0FBTyxFQUFFLHlCQUF5QixFQUFFLE1BQU0saUVBQWlFLENBQUM7QUFFNUc7SUFhRSxrQ0FDUyxzQkFBaUQsRUFDakQsU0FBaUQsRUFDeEIsSUFBeUI7UUFGbEQsMkJBQXNCLEdBQXRCLHNCQUFzQixDQUEyQjtRQUNqRCxjQUFTLEdBQVQsU0FBUyxDQUF3QztRQUN4QixTQUFJLEdBQUosSUFBSSxDQUFxQjtJQUN4RCxDQUFDO0lBRUcsMkNBQVEsR0FBZjtRQUNFLElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUM7UUFDL0IsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksU0FBUyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQ2hFLElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7UUFDcEQsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQztRQUMxRCxJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDO1FBQzdELElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUM7SUFDL0QsQ0FBQztJQUVELDJDQUFRLEdBQVI7UUFDRSxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFO1lBQ25CLElBQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxzQkFBc0IsQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLGNBQWMsRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDO1lBQ3hILElBQUksQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1NBQy9CO0lBQ0gsQ0FBQztJQUVELDJDQUFRLEdBQVI7UUFDRSxJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssRUFBRSxDQUFDO0lBQ3pCLENBQUM7O2dCQXJDRixTQUFTLFNBQUM7b0JBQ1QsUUFBUSxFQUFFLG1CQUFtQjtvQkFDN0Isb21CQUE2QztpQkFDOUM7Ozs7Z0JBTFEseUJBQXlCO2dCQUh6QixZQUFZO2dEQXFCaEIsTUFBTSxTQUFDLGVBQWU7O0lBc0IzQiwrQkFBQztDQUFBLEFBdENELElBc0NDO1NBakNZLHdCQUF3QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgSW5qZWN0LCBPbkluaXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEZvcm1seUZvcm1PcHRpb25zLCBGb3JtbHlGaWVsZENvbmZpZyB9IGZyb20gJ0BuZ3gtZm9ybWx5L2NvcmUnO1xuaW1wb3J0IHsgRm9ybUdyb3VwIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuaW1wb3J0IHsgU2RzRGlhbG9nUmVmLCBTRFNfRElBTE9HX0RBVEEgfSBmcm9tICdAZ3NhLXNhbS9jb21wb25lbnRzJztcblxuaW1wb3J0IHsgU2RzRm9ybWx5RGlhbG9nRGF0YSB9IGZyb20gJy4vZm9ybWx5LWRpYWxvZy1kYXRhLm1vZGVsJztcbmltcG9ydCB7IFNkc0FkdmFuY2VkRmlsdGVyc1NlcnZpY2UgfSBmcm9tICcuLi9mb3JtbHktZmlsdGVycy9hZHZhbmNlZC1maWx0ZXJzL3Nkcy1hZHZhbmNlZC1maWx0ZXJzLnNlcnZpY2UnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdzZHMtZm9ybWx5LWRpYWxvZycsXG4gIHRlbXBsYXRlVXJsOiAnLi9mb3JtbHktZGlhbG9nLmNvbXBvbmVudC5odG1sJ1xufSlcblxuZXhwb3J0IGNsYXNzIFNkc0Zvcm1seURpYWxvZ0NvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCB7XG4gIGZvcm06IEZvcm1Hcm91cDtcbiAgbW9kZWw6IGFueTtcbiAgb3B0aW9uczogRm9ybWx5Rm9ybU9wdGlvbnM7XG4gIGZpZWxkczogRm9ybWx5RmllbGRDb25maWdbXTtcbiAgY2FuY2VsOiBzdHJpbmc7XG4gIHN1Ym1pdDogc3RyaW5nO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHB1YmxpYyBhZHZhbmNlZEZpbHRlcnNTZXJ2aWNlOiBTZHNBZHZhbmNlZEZpbHRlcnNTZXJ2aWNlLFxuICAgIHB1YmxpYyBkaWFsb2dSZWY6IFNkc0RpYWxvZ1JlZjxTZHNGb3JtbHlEaWFsb2dDb21wb25lbnQ+LFxuICAgIEBJbmplY3QoU0RTX0RJQUxPR19EQVRBKSBwdWJsaWMgZGF0YTogU2RzRm9ybWx5RGlhbG9nRGF0YVxuICApIHt9XG5cbiAgcHVibGljIG5nT25Jbml0KCkge1xuICAgIHRoaXMuZmllbGRzID0gdGhpcy5kYXRhLmZpZWxkcztcbiAgICB0aGlzLmZvcm0gPSB0aGlzLmRhdGEuZm9ybSA/IHRoaXMuZGF0YS5mb3JtIDogbmV3IEZvcm1Hcm91cCh7fSk7XG4gICAgdGhpcy5tb2RlbCA9IHRoaXMuZGF0YS5tb2RlbCA/IHRoaXMuZGF0YS5tb2RlbCA6IHt9O1xuICAgIHRoaXMub3B0aW9ucyA9IHRoaXMuZGF0YS5vcHRpb25zID8gdGhpcy5kYXRhLm9wdGlvbnMgOiB7fTtcbiAgICB0aGlzLmNhbmNlbCA9IHRoaXMuZGF0YS5jYW5jZWwgPyB0aGlzLmRhdGEuY2FuY2VsIDogJ0NhbmNlbCc7XG4gICAgdGhpcy5zdWJtaXQgPSB0aGlzLmRhdGEuc3VibWl0ID8gdGhpcy5kYXRhLnN1Ym1pdCA6ICdTdWJtaXQnO1xuICB9XG5cbiAgb25TdWJtaXQoKSB7XG4gICAgaWYgKHRoaXMuZm9ybS52YWxpZCkge1xuICAgICAgY29uc3QgcmVzdWx0cyA9IHRoaXMuYWR2YW5jZWRGaWx0ZXJzU2VydmljZS51cGRhdGVGaWVsZHModGhpcy5tb2RlbCwgdGhpcy5kYXRhLm9yaWdpbmFsRmllbGRzLCB0aGlzLmRhdGEub3JpZ2luYWxNb2RlbCk7XG4gICAgICB0aGlzLmRpYWxvZ1JlZi5jbG9zZShyZXN1bHRzKTtcbiAgICB9XG4gIH1cblxuICBvbkNhbmNlbCgpIHtcbiAgICB0aGlzLmRpYWxvZ1JlZi5jbG9zZSgpO1xuICB9XG59XG4iXX0=