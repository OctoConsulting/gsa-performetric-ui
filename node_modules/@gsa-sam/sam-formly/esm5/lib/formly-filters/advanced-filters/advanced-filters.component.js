import { Component, Input } from '@angular/core';
import { FormGroup } from '@angular/forms';
import { SdsDialogService } from '@gsa-sam/components';
import { SdsAdvancedFiltersService } from './sds-advanced-filters.service';
import { SdsFormlyDialogComponent } from '../../formly-dialog/formly-dialog.component';
var AdvancedFiltersComponent = /** @class */ (function () {
    function AdvancedFiltersComponent(dialog, advancedFiltersService) {
        this.dialog = dialog;
        this.advancedFiltersService = advancedFiltersService;
        /**
         *    Options for the form.
         */
        this.options = {};
    }
    AdvancedFiltersComponent.prototype.openDialog = function () {
        var _this = this;
        var modalFields = this.advancedFiltersService.convertToCheckboxes(this.fields);
        var data = {
            fields: modalFields,
            originalFields: this.fields,
            originalModel: this.model,
            submit: 'Update',
            title: 'More Filters',
        };
        var dialogRef = this.dialog.open(SdsFormlyDialogComponent, {
            width: 'medium',
            data: data
        });
        dialogRef.afterClosed().subscribe(function (result) {
            if (result) {
                _this.fields = result.fields;
                _this.model = result.model;
            }
        });
    };
    AdvancedFiltersComponent.decorators = [
        { type: Component, args: [{
                    selector: 'sds-advanced-filters',
                    template: "<button type=\"button\" (click)=\"openDialog()\" class=\"usa-button usa-button--unstyled\">More\n  Filters\n  <fa-icon [icon]=\"['sds', 'filter']\" [classes]=\"['icon-filter']\"></fa-icon>\n</button>\n",
                    styles: [".usa-button--unstyled{padding-left:0;width:initial;text-decoration:none;font-weight:600}.usa-button--unstyled:active,.usa-button--unstyled:hover{background:initial;color:initial;text-decoration:underline}"]
                }] }
    ];
    /** @nocollapse */
    AdvancedFiltersComponent.ctorParameters = function () { return [
        { type: SdsDialogService },
        { type: SdsAdvancedFiltersService }
    ]; };
    AdvancedFiltersComponent.propDecorators = {
        form: [{ type: Input }],
        fields: [{ type: Input }],
        model: [{ type: Input }],
        options: [{ type: Input }]
    };
    return AdvancedFiltersComponent;
}());
export { AdvancedFiltersComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWR2YW5jZWQtZmlsdGVycy5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZ3NhLXNhbS9zYW0tZm9ybWx5LyIsInNvdXJjZXMiOlsibGliL2Zvcm1seS1maWx0ZXJzL2FkdmFuY2VkLWZpbHRlcnMvYWR2YW5jZWQtZmlsdGVycy5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFNBQVMsRUFBQyxLQUFLLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDaEQsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQzNDLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBR3ZELE9BQU8sRUFBRSx5QkFBeUIsRUFBRSxNQUFNLGdDQUFnQyxDQUFDO0FBRTNFLE9BQU8sRUFBRSx3QkFBd0IsRUFBRSxNQUFNLDZDQUE2QyxDQUFDO0FBRXZGO0lBNEJFLGtDQUNTLE1BQXdCLEVBQ3ZCLHNCQUFpRDtRQURsRCxXQUFNLEdBQU4sTUFBTSxDQUFrQjtRQUN2QiwyQkFBc0IsR0FBdEIsc0JBQXNCLENBQTJCO1FBUDNEOztXQUVHO1FBQ2EsWUFBTyxHQUFzQixFQUFFLENBQUM7SUFLMUMsQ0FBQztJQUVQLDZDQUFVLEdBQVY7UUFBQSxpQkFzQkM7UUFyQkMsSUFBTSxXQUFXLEdBQXdCLElBQUksQ0FBQyxzQkFBc0IsQ0FBQyxtQkFBbUIsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7UUFFdEcsSUFBTSxJQUFJLEdBQXdCO1lBQ2hDLE1BQU0sRUFBRSxXQUFXO1lBQ25CLGNBQWMsRUFBRSxJQUFJLENBQUMsTUFBTTtZQUMzQixhQUFhLEVBQUUsSUFBSSxDQUFDLEtBQUs7WUFDekIsTUFBTSxFQUFFLFFBQVE7WUFDaEIsS0FBSyxFQUFFLGNBQWM7U0FDdEIsQ0FBQztRQUVGLElBQU0sU0FBUyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLHdCQUF3QixFQUFFO1lBQzNELEtBQUssRUFBRSxRQUFRO1lBQ2YsSUFBSSxFQUFFLElBQUk7U0FDWCxDQUFDLENBQUM7UUFFSCxTQUFTLENBQUMsV0FBVyxFQUFFLENBQUMsU0FBUyxDQUFDLFVBQUEsTUFBTTtZQUN0QyxJQUFJLE1BQU0sRUFBRTtnQkFDVixLQUFJLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUM7Z0JBQzVCLEtBQUksQ0FBQyxLQUFLLEdBQUcsTUFBTSxDQUFDLEtBQUssQ0FBQzthQUMzQjtRQUNILENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQzs7Z0JBdkRGLFNBQVMsU0FBQztvQkFDVCxRQUFRLEVBQUUsc0JBQXNCO29CQUNoQyxxTkFBZ0Q7O2lCQUVqRDs7OztnQkFYUSxnQkFBZ0I7Z0JBR2hCLHlCQUF5Qjs7O3VCQWUvQixLQUFLO3lCQUtMLEtBQUs7d0JBS0wsS0FBSzswQkFLTCxLQUFLOztJQStCUiwrQkFBQztDQUFBLEFBekRELElBeURDO1NBbkRZLHdCQUF3QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCxJbnB1dCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgRm9ybUdyb3VwIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuaW1wb3J0IHsgU2RzRGlhbG9nU2VydmljZSB9IGZyb20gJ0Bnc2Etc2FtL2NvbXBvbmVudHMnO1xuaW1wb3J0IHsgRm9ybWx5RmllbGRDb25maWcsIEZvcm1seUZvcm1PcHRpb25zIH0gZnJvbSAnQG5neC1mb3JtbHkvY29yZSc7XG5cbmltcG9ydCB7IFNkc0FkdmFuY2VkRmlsdGVyc1NlcnZpY2UgfSBmcm9tICcuL3Nkcy1hZHZhbmNlZC1maWx0ZXJzLnNlcnZpY2UnO1xuaW1wb3J0IHsgU2RzRm9ybWx5RGlhbG9nRGF0YSB9IGZyb20gJy4uLy4uL2Zvcm1seS1kaWFsb2cvZm9ybWx5LWRpYWxvZy1kYXRhLm1vZGVsJztcbmltcG9ydCB7IFNkc0Zvcm1seURpYWxvZ0NvbXBvbmVudCB9IGZyb20gJy4uLy4uL2Zvcm1seS1kaWFsb2cvZm9ybWx5LWRpYWxvZy5jb21wb25lbnQnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdzZHMtYWR2YW5jZWQtZmlsdGVycycsXG4gIHRlbXBsYXRlVXJsOiAnLi9hZHZhbmNlZC1maWx0ZXJzLmNvbXBvbmVudC5odG1sJyxcbiAgc3R5bGVVcmxzOiBbJy4vYWR2YW5jZWQtZmlsdGVycy5jb21wb25lbnQuc2NzcyddXG59KVxuXG5leHBvcnQgY2xhc3MgQWR2YW5jZWRGaWx0ZXJzQ29tcG9uZW50IHtcblxuICAgIC8qKlxuICAgKiBQYXNzIGluIGEgRm9ybSBHcm91cCBmb3IgUmVhY3RpdmVGb3JtcyBTdXBwb3J0XG4gICAqL1xuICBASW5wdXQoKSBwdWJsaWMgZm9ybTogRm9ybUdyb3VwO1xuXG4gIC8qKlxuICAgKiAgRmllbGRzIGFyZSB1c2VkIHRvIGNvbmZpZ3VyZSB0aGUgVUkgY29tcG9uZW50c1xuICAgKi9cbiAgQElucHV0KCkgcHVibGljIGZpZWxkczogRm9ybWx5RmllbGRDb25maWdbXTtcblxuICAvKipcbiAgICogIE1vZGVsIHVzZWQgdG8gZGlzcGxheSB0aGUgZmlsdGVyIHZhbHVlcy5cbiAgICovXG4gIEBJbnB1dCgpIHB1YmxpYyBtb2RlbDogYW55O1xuXG4gIC8qKlxuICAgKiAgICBPcHRpb25zIGZvciB0aGUgZm9ybS5cbiAgICovXG4gIEBJbnB1dCgpIHB1YmxpYyBvcHRpb25zOiBGb3JtbHlGb3JtT3B0aW9ucyA9IHt9O1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHB1YmxpYyBkaWFsb2c6IFNkc0RpYWxvZ1NlcnZpY2UsXG4gICAgcHJpdmF0ZSBhZHZhbmNlZEZpbHRlcnNTZXJ2aWNlOiBTZHNBZHZhbmNlZEZpbHRlcnNTZXJ2aWNlXG4gICAgKSB7IH1cblxuICBvcGVuRGlhbG9nKCk6IHZvaWQge1xuICAgIGNvbnN0IG1vZGFsRmllbGRzOiBGb3JtbHlGaWVsZENvbmZpZ1tdID0gdGhpcy5hZHZhbmNlZEZpbHRlcnNTZXJ2aWNlLmNvbnZlcnRUb0NoZWNrYm94ZXModGhpcy5maWVsZHMpO1xuXG4gICAgY29uc3QgZGF0YTogU2RzRm9ybWx5RGlhbG9nRGF0YSA9IHtcbiAgICAgIGZpZWxkczogbW9kYWxGaWVsZHMsXG4gICAgICBvcmlnaW5hbEZpZWxkczogdGhpcy5maWVsZHMsXG4gICAgICBvcmlnaW5hbE1vZGVsOiB0aGlzLm1vZGVsLFxuICAgICAgc3VibWl0OiAnVXBkYXRlJyxcbiAgICAgIHRpdGxlOiAnTW9yZSBGaWx0ZXJzJyxcbiAgICB9O1xuXG4gICAgY29uc3QgZGlhbG9nUmVmID0gdGhpcy5kaWFsb2cub3BlbihTZHNGb3JtbHlEaWFsb2dDb21wb25lbnQsIHtcbiAgICAgIHdpZHRoOiAnbWVkaXVtJyxcbiAgICAgIGRhdGE6IGRhdGFcbiAgICB9KTtcblxuICAgIGRpYWxvZ1JlZi5hZnRlckNsb3NlZCgpLnN1YnNjcmliZShyZXN1bHQgPT4ge1xuICAgICAgaWYgKHJlc3VsdCkge1xuICAgICAgICB0aGlzLmZpZWxkcyA9IHJlc3VsdC5maWVsZHM7XG4gICAgICAgIHRoaXMubW9kZWwgPSByZXN1bHQubW9kZWw7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxufVxuIl19