import { Injectable } from '@angular/core';
import * as i0 from "@angular/core";
var SdsAdvancedFiltersService = /** @class */ (function () {
    function SdsAdvancedFiltersService() {
    }
    SdsAdvancedFiltersService.prototype.convertToCheckboxes = function (origFields) {
        var _this = this;
        var fields = [];
        origFields.forEach(function (origField) {
            if (origField.fieldGroup && origField.fieldGroup.length > 1) {
                var field = _this.createMulticheckbox(origField);
                fields.push(field);
            }
            else {
                var field = {
                    type: 'checkbox',
                    key: origField.key,
                    defaultValue: !origField.hide,
                    templateOptions: {
                        hideOptional: true
                    }
                };
                if (origField.templateOptions && origField.templateOptions.label) {
                    field.templateOptions.label = origField.templateOptions.label;
                }
                fields.push(field);
            }
        });
        return fields;
    };
    // TODO: Should be changed so option has label field instead of key but multicheckbox field type must be updated so default value still works
    SdsAdvancedFiltersService.prototype.createMulticheckbox = function (origField) {
        var options = [];
        var defaultValue = [];
        origField.fieldGroup.forEach(function (field) {
            var label = field.templateOptions && field.templateOptions.label ? field.templateOptions.label : null;
            var option = {
                key: field.key,
                value: label
            };
            options.push(option);
            if (!origField.hide && !field.hide) {
                defaultValue.push(field.key);
            }
        });
        var field = {
            key: origField.key,
            type: 'multicheckbox',
            templateOptions: {
                hideOptional: true,
                type: 'array',
                options: options
            }
        };
        if (origField.templateOptions && origField.templateOptions.label) {
            field.templateOptions.label = origField.templateOptions.label;
        }
        if (!origField.hide) {
            field.defaultValue = defaultValue;
        }
        return field;
    };
    SdsAdvancedFiltersService.prototype.updateFields = function (selectedFields, fields, model) {
        var _this = this;
        fields.forEach(function (field) {
            var key = field.key;
            var selectedField = selectedFields[key];
            if (field.fieldGroup && field.fieldGroup.length > 1) {
                var fieldModel = model[key];
                _this.updateFieldGroup(field, selectedField, fieldModel);
            }
            else {
                _this.updateSingleField(field, selectedField, model);
            }
        });
        return {
            fields: fields,
            model: model
        };
    };
    SdsAdvancedFiltersService.prototype.updateFieldGroup = function (parentField, selectedFields, model) {
        var _this = this;
        if (selectedFields && selectedFields.length) {
            parentField.hide = false;
            parentField.fieldGroup.forEach(function (field) {
                var key = field.key;
                var fieldSelected = selectedFields.includes(key);
                _this.updateSingleField(field, fieldSelected, model);
            });
        }
        else {
            parentField.hide = true;
            parentField.fieldGroup.forEach(function (field) {
                _this.updateSingleField(field, false, model);
            });
        }
    };
    SdsAdvancedFiltersService.prototype.updateSingleField = function (field, fieldSelected, model) {
        if (fieldSelected) {
            field.hide = false;
        }
        else {
            field.hide = true;
            field.templateOptions['required'] = false;
            model[field.key] = null;
        }
    };
    SdsAdvancedFiltersService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    SdsAdvancedFiltersService.ctorParameters = function () { return []; };
    SdsAdvancedFiltersService.ngInjectableDef = i0.defineInjectable({ factory: function SdsAdvancedFiltersService_Factory() { return new SdsAdvancedFiltersService(); }, token: SdsAdvancedFiltersService, providedIn: "root" });
    return SdsAdvancedFiltersService;
}());
export { SdsAdvancedFiltersService };
//# sourceMappingURL=data:application/json;base64,