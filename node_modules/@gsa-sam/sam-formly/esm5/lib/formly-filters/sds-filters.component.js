import * as tslib_1 from "tslib";
import { Component, Input, Output, EventEmitter, Optional, HostListener, ChangeDetectorRef } from '@angular/core';
import { FormGroup } from '@angular/forms';
import { Router, ActivatedRoute } from '@angular/router';
import * as qs from 'qs';
import { Md5 } from 'ts-md5/dist/md5';
import { SDSFormlyUpdateComunicationService } from './service/sds-filters-comunication.service';
var SdsFiltersComponent = /** @class */ (function () {
    function SdsFiltersComponent(formlyUpdateComunicationService, cdr, router, route) {
        var _this = this;
        this.formlyUpdateComunicationService = formlyUpdateComunicationService;
        this.cdr = cdr;
        this.router = router;
        this.route = route;
        /**
         *    Options for the form.
         */
        this.options = {};
        /**
         *  Emit results when model updated
         * To enable History Tracking
         *  If advanced filters dialog should be displayed -- defaults to false
         */
        this.advancedFilters = false;
        /**
         * Timer id for the timer awaiting the service call for more typeing
         */
        this.isHistoryEnable = true;
        /**
         *  Emit results when model updated
         */
        // TODO: check type -- Formly models are typically objects
        this.filterChange = new EventEmitter();
        this.sdsFilterHistory = [];
        this._isObj = function (obj) { return typeof obj === 'object' && obj !== null; };
        this._isEmpty = function (obj) { return Object.keys(obj).length === 0; };
        this.overwrite = function (baseObj, newObj) {
            var result = {};
            for (var key in baseObj) {
                if (Array.isArray(baseObj[key])) {
                    result[key] = newObj[key];
                }
                else if (_this._isObj(baseObj[key])) {
                    result[key] = _this.overwrite(baseObj[key], newObj[key] || {});
                }
                else {
                    result[key] = newObj[key] || null;
                }
            }
            return result;
        };
        this.nullify = function (obj) {
            for (var key in obj) {
                if (_this._isObj(obj[key])) {
                    obj[key] = _this.nullify(obj[key]);
                }
                else {
                    obj[key] = null;
                }
            }
            return obj;
        };
    }
    SdsFiltersComponent.prototype.onpopstate = function () {
        var queryString = window.location.search;
        var urlParams = new URLSearchParams(queryString);
        var ref = urlParams.get('ref');
        var updatedFormValue = ref == null
            ? this.nullify(this.form.value)
            : JSON.parse(localStorage.getItem(ref));
        var updatedValue = this.overwrite(this.form.getRawValue(), updatedFormValue);
        this.form.setValue(updatedValue, { emitEvent: false });
        this.updateChange(updatedFormValue);
    };
    SdsFiltersComponent.prototype.ngOnInit = function () {
        var _this = this;
        if (this.isHistoryEnable) {
            var queryString = window.location.search;
            var urlParams = new URLSearchParams(queryString);
            var initialRef = urlParams.get('ref');
            if (initialRef) {
                var updatedFormValue_1 = JSON.parse(localStorage.getItem(initialRef));
                setTimeout(function () {
                    _this.model = tslib_1.__assign({}, _this.model, updatedFormValue_1);
                    _this.updateChange(updatedFormValue_1);
                    _this.cdr.detectChanges();
                }, 0);
            }
            else {
                this.updateChange(this.model);
                this.clearStorage();
            }
        }
        this.cdr.detectChanges();
    };
    SdsFiltersComponent.prototype.onModelChange = function (change) {
        if (this.isHistoryEnable) {
            var md5 = new Md5();
            var hashCode = md5.appendStr(qs.stringify(change)).end();
            this.router.navigate([], {
                relativeTo: this.route,
                queryParams: { ref: hashCode },
                queryParamsHandling: 'merge'
            });
            this.addToStorageList(hashCode);
            localStorage.setItem(hashCode.toString(), JSON.stringify(change));
        }
        this.updateChange(change);
    };
    SdsFiltersComponent.prototype.updateChange = function (change) {
        this.filterChange.emit(change);
        if (this.formlyUpdateComunicationService) {
            this.formlyUpdateComunicationService.updateFilter(change);
        }
    };
    SdsFiltersComponent.prototype.addToStorageList = function (hashCode) {
        var list = JSON.parse(localStorage.getItem('sdsFilterHistory'));
        this.sdsFilterHistory = (list && list.length > 0) ? list : this.sdsFilterHistory;
        this.sdsFilterHistory.push(hashCode);
        localStorage.setItem('sdsFilterHistory', JSON.stringify(this.sdsFilterHistory));
    };
    SdsFiltersComponent.prototype.clearStorage = function () {
        var list = JSON.parse(localStorage.getItem('sdsFilterHistory'));
        if (list && list.length > 0) {
            var unique = list.filter(function (item, i, ar) { return ar.indexOf(item) === i; });
            unique.forEach(function (item) {
                localStorage.removeItem(item);
            });
        }
    };
    SdsFiltersComponent.decorators = [
        { type: Component, args: [{
                    selector: 'sds-filters',
                    template: "<formly-form [form]=\"form\" [fields]=\"fields\" [options]=\"options\" [model]=\"model\" (modelChange)=\"onModelChange($event)\">\n</formly-form>\n<div class=\"grid-row\">\n  <div *ngIf=\"advancedFilters\" class=\"grid-col\">\n    <sds-advanced-filters [form]=\"form\" [fields]=\"fields\" [options]=\"options\" [model]=\"model\">\n    </sds-advanced-filters>\n  </div>\n  <div class=\"grid-col text-right\">\n    <sds-formly-reset [options]=\"options\"></sds-formly-reset>\n  </div>\n</div>\n"
                }] }
    ];
    /** @nocollapse */
    SdsFiltersComponent.ctorParameters = function () { return [
        { type: SDSFormlyUpdateComunicationService, decorators: [{ type: Optional }] },
        { type: ChangeDetectorRef },
        { type: Router },
        { type: ActivatedRoute }
    ]; };
    SdsFiltersComponent.propDecorators = {
        form: [{ type: Input }],
        fields: [{ type: Input }],
        model: [{ type: Input }],
        options: [{ type: Input }],
        advancedFilters: [{ type: Input }],
        isHistoryEnable: [{ type: Input }],
        filterChange: [{ type: Output }],
        onpopstate: [{ type: HostListener, args: ['window:popstate', [''],] }]
    };
    return SdsFiltersComponent;
}());
export { SdsFiltersComponent };
//# sourceMappingURL=data:application/json;base64,