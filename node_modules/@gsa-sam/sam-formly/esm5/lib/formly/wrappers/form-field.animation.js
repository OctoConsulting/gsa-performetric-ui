import * as tslib_1 from "tslib";
import { Component } from '@angular/core';
import { FieldWrapper } from '@ngx-formly/core';
import { trigger, state, style, transition, animate, group } from '@angular/animations';
var SlideInOutAnimation = [
    trigger('slideInOut', [
        state('in', style({
            'max-height': '2000px', 'opacity': '1', 'visibility': 'visible',
        })),
        state('out', style({
            'max-height': '0px', 'opacity': '0', 'visibility': 'hidden',
        })),
        transition('in => out', [group([
                animate('400ms ease-in-out', style({
                    'opacity': '0',
                })),
                animate('600ms ease-in-out', style({
                    'max-height': '0px',
                })),
                animate('700ms ease-in-out', style({
                    'visibility': 'hidden',
                })),
            ])]),
        transition('out => in', [group([
                animate('1ms ease-in-out', style({
                    'visibility': 'visible',
                })),
                animate('600ms ease-in-out', style({
                    'max-height': '500px',
                })),
                animate('800ms ease-in-out', style({
                    'opacity': '1',
                })),
            ])]),
    ]),
];
var AnimationWrapperComponent = /** @class */ (function (_super) {
    tslib_1.__extends(AnimationWrapperComponent, _super);
    function AnimationWrapperComponent() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    AnimationWrapperComponent.decorators = [
        { type: Component, args: [{
                    selector: 'sam-formly-wrapper-animation',
                    template: "\n    <div [@slideInOut]=\"field.hide ? 'out' : 'in'\">\n      <ng-container #fieldComponent></ng-container>\n    </div>\n  ",
                    // styles: [`
                    //   ::ng-deep formly-field {
                    //     display: block !important;
                    //   }
                    // `],
                    animations: [SlideInOutAnimation]
                }] }
    ];
    return AnimationWrapperComponent;
}(FieldWrapper));
export { AnimationWrapperComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9ybS1maWVsZC5hbmltYXRpb24uanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZ3NhLXNhbS9zYW0tZm9ybWx5LyIsInNvdXJjZXMiOlsibGliL2Zvcm1seS93cmFwcGVycy9mb3JtLWZpZWxkLmFuaW1hdGlvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMxQyxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFFaEQsT0FBTyxFQUFFLE9BQU8sRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLFVBQVUsRUFBRSxPQUFPLEVBQUUsS0FBSyxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFFeEYsSUFBTSxtQkFBbUIsR0FBRztJQUMxQixPQUFPLENBQUMsWUFBWSxFQUFFO1FBQ3BCLEtBQUssQ0FBQyxJQUFJLEVBQUUsS0FBSyxDQUFDO1lBQ2hCLFlBQVksRUFBRSxRQUFRLEVBQUUsU0FBUyxFQUFFLEdBQUcsRUFBRSxZQUFZLEVBQUUsU0FBUztTQUNoRSxDQUFDLENBQUM7UUFDSCxLQUFLLENBQUMsS0FBSyxFQUFFLEtBQUssQ0FBQztZQUNqQixZQUFZLEVBQUUsS0FBSyxFQUFFLFNBQVMsRUFBRSxHQUFHLEVBQUUsWUFBWSxFQUFFLFFBQVE7U0FDNUQsQ0FBQyxDQUFDO1FBQ0gsVUFBVSxDQUFDLFdBQVcsRUFBRSxDQUFDLEtBQUssQ0FBQztnQkFDN0IsT0FBTyxDQUFDLG1CQUFtQixFQUFFLEtBQUssQ0FBQztvQkFDakMsU0FBUyxFQUFFLEdBQUc7aUJBQ2YsQ0FBQyxDQUFDO2dCQUNILE9BQU8sQ0FBQyxtQkFBbUIsRUFBRSxLQUFLLENBQUM7b0JBQ2pDLFlBQVksRUFBRSxLQUFLO2lCQUNwQixDQUFDLENBQUM7Z0JBQ0gsT0FBTyxDQUFDLG1CQUFtQixFQUFFLEtBQUssQ0FBQztvQkFDakMsWUFBWSxFQUFFLFFBQVE7aUJBQ3ZCLENBQUMsQ0FBQzthQUNKLENBQ0EsQ0FBQyxDQUFDO1FBQ0gsVUFBVSxDQUFDLFdBQVcsRUFBRSxDQUFDLEtBQUssQ0FBQztnQkFDN0IsT0FBTyxDQUFDLGlCQUFpQixFQUFFLEtBQUssQ0FBQztvQkFDL0IsWUFBWSxFQUFFLFNBQVM7aUJBQ3hCLENBQUMsQ0FBQztnQkFDSCxPQUFPLENBQUMsbUJBQW1CLEVBQUUsS0FBSyxDQUFDO29CQUNqQyxZQUFZLEVBQUUsT0FBTztpQkFDdEIsQ0FBQyxDQUFDO2dCQUNILE9BQU8sQ0FBQyxtQkFBbUIsRUFBRSxLQUFLLENBQUM7b0JBQ2pDLFNBQVMsRUFBRSxHQUFHO2lCQUNmLENBQUMsQ0FBQzthQUNKLENBQ0EsQ0FBQyxDQUFDO0tBQ0osQ0FBQztDQUNILENBQUM7QUFFRjtJQWMrQyxxREFBWTtJQWQzRDs7SUFlQSxDQUFDOztnQkFmQSxTQUFTLFNBQUM7b0JBQ1QsUUFBUSxFQUFFLDhCQUE4QjtvQkFDeEMsUUFBUSxFQUFFLDhIQUlUO29CQUNELGFBQWE7b0JBQ2IsNkJBQTZCO29CQUM3QixpQ0FBaUM7b0JBQ2pDLE1BQU07b0JBQ04sTUFBTTtvQkFDTixVQUFVLEVBQUUsQ0FBQyxtQkFBbUIsQ0FBQztpQkFDbEM7O0lBRUQsZ0NBQUM7Q0FBQSxBQWZELENBYytDLFlBQVksR0FDMUQ7U0FEWSx5QkFBeUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEZpZWxkV3JhcHBlciB9IGZyb20gJ0BuZ3gtZm9ybWx5L2NvcmUnO1xuXG5pbXBvcnQgeyB0cmlnZ2VyLCBzdGF0ZSwgc3R5bGUsIHRyYW5zaXRpb24sIGFuaW1hdGUsIGdyb3VwIH0gZnJvbSAnQGFuZ3VsYXIvYW5pbWF0aW9ucyc7XG5cbmNvbnN0IFNsaWRlSW5PdXRBbmltYXRpb24gPSBbXG4gIHRyaWdnZXIoJ3NsaWRlSW5PdXQnLCBbXG4gICAgc3RhdGUoJ2luJywgc3R5bGUoe1xuICAgICAgJ21heC1oZWlnaHQnOiAnMjAwMHB4JywgJ29wYWNpdHknOiAnMScsICd2aXNpYmlsaXR5JzogJ3Zpc2libGUnLFxuICAgIH0pKSxcbiAgICBzdGF0ZSgnb3V0Jywgc3R5bGUoe1xuICAgICAgJ21heC1oZWlnaHQnOiAnMHB4JywgJ29wYWNpdHknOiAnMCcsICd2aXNpYmlsaXR5JzogJ2hpZGRlbicsXG4gICAgfSkpLFxuICAgIHRyYW5zaXRpb24oJ2luID0+IG91dCcsIFtncm91cChbXG4gICAgICBhbmltYXRlKCc0MDBtcyBlYXNlLWluLW91dCcsIHN0eWxlKHtcbiAgICAgICAgJ29wYWNpdHknOiAnMCcsXG4gICAgICB9KSksXG4gICAgICBhbmltYXRlKCc2MDBtcyBlYXNlLWluLW91dCcsIHN0eWxlKHtcbiAgICAgICAgJ21heC1oZWlnaHQnOiAnMHB4JyxcbiAgICAgIH0pKSxcbiAgICAgIGFuaW1hdGUoJzcwMG1zIGVhc2UtaW4tb3V0Jywgc3R5bGUoe1xuICAgICAgICAndmlzaWJpbGl0eSc6ICdoaWRkZW4nLFxuICAgICAgfSkpLFxuICAgIF0sXG4gICAgKV0pLFxuICAgIHRyYW5zaXRpb24oJ291dCA9PiBpbicsIFtncm91cChbXG4gICAgICBhbmltYXRlKCcxbXMgZWFzZS1pbi1vdXQnLCBzdHlsZSh7XG4gICAgICAgICd2aXNpYmlsaXR5JzogJ3Zpc2libGUnLFxuICAgICAgfSkpLFxuICAgICAgYW5pbWF0ZSgnNjAwbXMgZWFzZS1pbi1vdXQnLCBzdHlsZSh7XG4gICAgICAgICdtYXgtaGVpZ2h0JzogJzUwMHB4JyxcbiAgICAgIH0pKSxcbiAgICAgIGFuaW1hdGUoJzgwMG1zIGVhc2UtaW4tb3V0Jywgc3R5bGUoe1xuICAgICAgICAnb3BhY2l0eSc6ICcxJyxcbiAgICAgIH0pKSxcbiAgICBdLFxuICAgICldKSxcbiAgXSksXG5dO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdzYW0tZm9ybWx5LXdyYXBwZXItYW5pbWF0aW9uJyxcbiAgdGVtcGxhdGU6IGBcbiAgICA8ZGl2IFtAc2xpZGVJbk91dF09XCJmaWVsZC5oaWRlID8gJ291dCcgOiAnaW4nXCI+XG4gICAgICA8bmctY29udGFpbmVyICNmaWVsZENvbXBvbmVudD48L25nLWNvbnRhaW5lcj5cbiAgICA8L2Rpdj5cbiAgYCxcbiAgLy8gc3R5bGVzOiBbYFxuICAvLyAgIDo6bmctZGVlcCBmb3JtbHktZmllbGQge1xuICAvLyAgICAgZGlzcGxheTogYmxvY2sgIWltcG9ydGFudDtcbiAgLy8gICB9XG4gIC8vIGBdLFxuICBhbmltYXRpb25zOiBbU2xpZGVJbk91dEFuaW1hdGlvbl0sXG59KVxuZXhwb3J0IGNsYXNzIEFuaW1hdGlvbldyYXBwZXJDb21wb25lbnQgZXh0ZW5kcyBGaWVsZFdyYXBwZXIge1xufSJdfQ==