import * as tslib_1 from "tslib";
import { Component, ViewChild, ViewContainerRef } from '@angular/core';
import { FieldWrapper } from '@ngx-formly/core';
import * as qs from 'qs';
/**
 * @param {string} [to.expand] to expand the accordion
 *
 */
var FormlyAccordianFormFieldComponent = /** @class */ (function (_super) {
    tslib_1.__extends(FormlyAccordianFormFieldComponent, _super);
    function FormlyAccordianFormFieldComponent() {
        return _super.call(this) || this;
    }
    FormlyAccordianFormFieldComponent.prototype.modelHasValue = function () {
        if (this.to.hasOwnProperty('expand')) {
            return this.to.expand;
        }
        else {
            var hasValue = this.formControl.value instanceof Object
                ? qs.stringify(this.formControl.value, { skipNulls: true })
                : this.formControl.value;
            return hasValue ? true : false;
        }
    };
    FormlyAccordianFormFieldComponent.decorators = [
        { type: Component, args: [{
                    selector: 'sam-formly-accordian-form-field',
                    template: "\n    <sds-accordion multi=\"true\" displayMode=\"basic\">\n      <sds-accordion-item\n        class=\"sds-accordion__panel\"\n        [expanded]=\"modelHasValue()\"\n      >\n        <sds-accordion-item-header> {{ to.label }} </sds-accordion-item-header>\n        <ng-container #fieldComponent></ng-container>\n      </sds-accordion-item>\n    </sds-accordion>\n  "
                }] }
    ];
    /** @nocollapse */
    FormlyAccordianFormFieldComponent.ctorParameters = function () { return []; };
    FormlyAccordianFormFieldComponent.propDecorators = {
        fieldComponent: [{ type: ViewChild, args: ['fieldComponent', { read: ViewContainerRef },] }]
    };
    return FormlyAccordianFormFieldComponent;
}(FieldWrapper));
export { FormlyAccordianFormFieldComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9ybS1maWVsZC5hY2NvcmRpYW4uanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZ3NhLXNhbS9zYW0tZm9ybWx5LyIsInNvdXJjZXMiOlsibGliL2Zvcm1seS93cmFwcGVycy9mb3JtLWZpZWxkLmFjY29yZGlhbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxTQUFTLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDdkUsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBQ2hELE9BQU8sS0FBSyxFQUFFLE1BQU0sSUFBSSxDQUFDO0FBRXpCOzs7R0FHRztBQUVIO0lBY3VELDZEQUFZO0lBR2pFO2VBQ0UsaUJBQU87SUFDVCxDQUFDO0lBQ0QseURBQWEsR0FBYjtRQUNFLElBQUksSUFBSSxDQUFDLEVBQUUsQ0FBQyxjQUFjLENBQUMsUUFBUSxDQUFDLEVBQUU7WUFDcEMsT0FBTyxJQUFJLENBQUMsRUFBRSxDQUFDLE1BQU0sQ0FBQztTQUN2QjthQUFNO1lBQ0wsSUFBTSxRQUFRLEdBQ1osSUFBSSxDQUFDLFdBQVcsQ0FBQyxLQUFLLFlBQVksTUFBTTtnQkFDdEMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxLQUFLLEVBQUUsRUFBRSxTQUFTLEVBQUUsSUFBSSxFQUFFLENBQUM7Z0JBQzNELENBQUMsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLEtBQUssQ0FBQztZQUM3QixPQUFPLFFBQVEsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUM7U0FDaEM7SUFDSCxDQUFDOztnQkE5QkYsU0FBUyxTQUFDO29CQUNULFFBQVEsRUFBRSxpQ0FBaUM7b0JBQzNDLFFBQVEsRUFBRSwrV0FVVDtpQkFDRjs7Ozs7aUNBRUUsU0FBUyxTQUFDLGdCQUFnQixFQUFFLEVBQUUsSUFBSSxFQUFFLGdCQUFnQixFQUFFOztJQWdCekQsd0NBQUM7Q0FBQSxBQS9CRCxDQWN1RCxZQUFZLEdBaUJsRTtTQWpCWSxpQ0FBaUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIFZpZXdDaGlsZCwgVmlld0NvbnRhaW5lclJlZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgRmllbGRXcmFwcGVyIH0gZnJvbSAnQG5neC1mb3JtbHkvY29yZSc7XG5pbXBvcnQgKiBhcyBxcyBmcm9tICdxcyc7XG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IFt0by5leHBhbmRdIHRvIGV4cGFuZCB0aGUgYWNjb3JkaW9uXG4gKiBcbiAqL1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdzYW0tZm9ybWx5LWFjY29yZGlhbi1mb3JtLWZpZWxkJyxcbiAgdGVtcGxhdGU6IGBcbiAgICA8c2RzLWFjY29yZGlvbiBtdWx0aT1cInRydWVcIiBkaXNwbGF5TW9kZT1cImJhc2ljXCI+XG4gICAgICA8c2RzLWFjY29yZGlvbi1pdGVtXG4gICAgICAgIGNsYXNzPVwic2RzLWFjY29yZGlvbl9fcGFuZWxcIlxuICAgICAgICBbZXhwYW5kZWRdPVwibW9kZWxIYXNWYWx1ZSgpXCJcbiAgICAgID5cbiAgICAgICAgPHNkcy1hY2NvcmRpb24taXRlbS1oZWFkZXI+IHt7IHRvLmxhYmVsIH19IDwvc2RzLWFjY29yZGlvbi1pdGVtLWhlYWRlcj5cbiAgICAgICAgPG5nLWNvbnRhaW5lciAjZmllbGRDb21wb25lbnQ+PC9uZy1jb250YWluZXI+XG4gICAgICA8L3Nkcy1hY2NvcmRpb24taXRlbT5cbiAgICA8L3Nkcy1hY2NvcmRpb24+XG4gIGBcbn0pXG5leHBvcnQgY2xhc3MgRm9ybWx5QWNjb3JkaWFuRm9ybUZpZWxkQ29tcG9uZW50IGV4dGVuZHMgRmllbGRXcmFwcGVyIHtcbiAgQFZpZXdDaGlsZCgnZmllbGRDb21wb25lbnQnLCB7IHJlYWQ6IFZpZXdDb250YWluZXJSZWYgfSlcbiAgZmllbGRDb21wb25lbnQ6IFZpZXdDb250YWluZXJSZWY7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKCk7XG4gIH1cbiAgbW9kZWxIYXNWYWx1ZSgpIHtcbiAgICBpZiAodGhpcy50by5oYXNPd25Qcm9wZXJ0eSgnZXhwYW5kJykpIHtcbiAgICAgIHJldHVybiB0aGlzLnRvLmV4cGFuZDtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3QgaGFzVmFsdWUgPVxuICAgICAgICB0aGlzLmZvcm1Db250cm9sLnZhbHVlIGluc3RhbmNlb2YgT2JqZWN0XG4gICAgICAgICAgPyBxcy5zdHJpbmdpZnkodGhpcy5mb3JtQ29udHJvbC52YWx1ZSwgeyBza2lwTnVsbHM6IHRydWUgfSlcbiAgICAgICAgICA6IHRoaXMuZm9ybUNvbnRyb2wudmFsdWU7XG4gICAgICByZXR1cm4gaGFzVmFsdWUgPyB0cnVlIDogZmFsc2U7XG4gICAgfVxuICB9XG59XG4iXX0=